
DDS_Controler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d04  080001e0  080001e0  000101e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08008ee4  08008ee4  00018ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fcc  08008fcc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fd4  08008fd4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fd4  08008fd4  00018fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fd8  08008fd8  00018fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf0  200001f4  080091d0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001de4  080091d0  00021de4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e41  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fe0  00000000  00000000  00042065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  00046048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  000476c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a17  00000000  00000000  00048bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001caa6  00000000  00000000  0006f5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e30bf  00000000  00000000  0008c095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016f154  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061bc  00000000  00000000  0016f1a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008ecc 	.word	0x08008ecc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f8 	.word	0x200001f8
 800021c:	08008ecc 	.word	0x08008ecc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	; 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b98c 	b.w	8000b2c <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f824 	bl	8000868 <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__aeabi_d2ulz>:
 800082c:	b5d0      	push	{r4, r6, r7, lr}
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <__aeabi_d2ulz+0x34>)
 8000830:	2200      	movs	r2, #0
 8000832:	4606      	mov	r6, r0
 8000834:	460f      	mov	r7, r1
 8000836:	f7ff fcfb 	bl	8000230 <__aeabi_dmul>
 800083a:	f000 f979 	bl	8000b30 <__aeabi_d2uiz>
 800083e:	4604      	mov	r4, r0
 8000840:	f7ff ff62 	bl	8000708 <__aeabi_ui2d>
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <__aeabi_d2ulz+0x38>)
 8000846:	2200      	movs	r2, #0
 8000848:	f7ff fcf2 	bl	8000230 <__aeabi_dmul>
 800084c:	4602      	mov	r2, r0
 800084e:	460b      	mov	r3, r1
 8000850:	4630      	mov	r0, r6
 8000852:	4639      	mov	r1, r7
 8000854:	f7ff fe1a 	bl	800048c <__aeabi_dsub>
 8000858:	f000 f96a 	bl	8000b30 <__aeabi_d2uiz>
 800085c:	4621      	mov	r1, r4
 800085e:	bdd0      	pop	{r4, r6, r7, pc}
 8000860:	3df00000 	.word	0x3df00000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	4604      	mov	r4, r0
 8000870:	468c      	mov	ip, r1
 8000872:	2b00      	cmp	r3, #0
 8000874:	f040 8083 	bne.w	800097e <__udivmoddi4+0x116>
 8000878:	428a      	cmp	r2, r1
 800087a:	4617      	mov	r7, r2
 800087c:	d947      	bls.n	800090e <__udivmoddi4+0xa6>
 800087e:	fab2 f282 	clz	r2, r2
 8000882:	b142      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000884:	f1c2 0020 	rsb	r0, r2, #32
 8000888:	fa24 f000 	lsr.w	r0, r4, r0
 800088c:	4091      	lsls	r1, r2
 800088e:	4097      	lsls	r7, r2
 8000890:	ea40 0c01 	orr.w	ip, r0, r1
 8000894:	4094      	lsls	r4, r2
 8000896:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800089a:	0c23      	lsrs	r3, r4, #16
 800089c:	fbbc f6f8 	udiv	r6, ip, r8
 80008a0:	fa1f fe87 	uxth.w	lr, r7
 80008a4:	fb08 c116 	mls	r1, r8, r6, ip
 80008a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ac:	fb06 f10e 	mul.w	r1, r6, lr
 80008b0:	4299      	cmp	r1, r3
 80008b2:	d909      	bls.n	80008c8 <__udivmoddi4+0x60>
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ba:	f080 8119 	bcs.w	8000af0 <__udivmoddi4+0x288>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 8116 	bls.w	8000af0 <__udivmoddi4+0x288>
 80008c4:	3e02      	subs	r6, #2
 80008c6:	443b      	add	r3, r7
 80008c8:	1a5b      	subs	r3, r3, r1
 80008ca:	b2a4      	uxth	r4, r4
 80008cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008d0:	fb08 3310 	mls	r3, r8, r0, r3
 80008d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80008dc:	45a6      	cmp	lr, r4
 80008de:	d909      	bls.n	80008f4 <__udivmoddi4+0x8c>
 80008e0:	193c      	adds	r4, r7, r4
 80008e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e6:	f080 8105 	bcs.w	8000af4 <__udivmoddi4+0x28c>
 80008ea:	45a6      	cmp	lr, r4
 80008ec:	f240 8102 	bls.w	8000af4 <__udivmoddi4+0x28c>
 80008f0:	3802      	subs	r0, #2
 80008f2:	443c      	add	r4, r7
 80008f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f8:	eba4 040e 	sub.w	r4, r4, lr
 80008fc:	2600      	movs	r6, #0
 80008fe:	b11d      	cbz	r5, 8000908 <__udivmoddi4+0xa0>
 8000900:	40d4      	lsrs	r4, r2
 8000902:	2300      	movs	r3, #0
 8000904:	e9c5 4300 	strd	r4, r3, [r5]
 8000908:	4631      	mov	r1, r6
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	b902      	cbnz	r2, 8000912 <__udivmoddi4+0xaa>
 8000910:	deff      	udf	#255	; 0xff
 8000912:	fab2 f282 	clz	r2, r2
 8000916:	2a00      	cmp	r2, #0
 8000918:	d150      	bne.n	80009bc <__udivmoddi4+0x154>
 800091a:	1bcb      	subs	r3, r1, r7
 800091c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000920:	fa1f f887 	uxth.w	r8, r7
 8000924:	2601      	movs	r6, #1
 8000926:	fbb3 fcfe 	udiv	ip, r3, lr
 800092a:	0c21      	lsrs	r1, r4, #16
 800092c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000930:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000934:	fb08 f30c 	mul.w	r3, r8, ip
 8000938:	428b      	cmp	r3, r1
 800093a:	d907      	bls.n	800094c <__udivmoddi4+0xe4>
 800093c:	1879      	adds	r1, r7, r1
 800093e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000942:	d202      	bcs.n	800094a <__udivmoddi4+0xe2>
 8000944:	428b      	cmp	r3, r1
 8000946:	f200 80e9 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 800094a:	4684      	mov	ip, r0
 800094c:	1ac9      	subs	r1, r1, r3
 800094e:	b2a3      	uxth	r3, r4
 8000950:	fbb1 f0fe 	udiv	r0, r1, lr
 8000954:	fb0e 1110 	mls	r1, lr, r0, r1
 8000958:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800095c:	fb08 f800 	mul.w	r8, r8, r0
 8000960:	45a0      	cmp	r8, r4
 8000962:	d907      	bls.n	8000974 <__udivmoddi4+0x10c>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f100 33ff 	add.w	r3, r0, #4294967295
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x10a>
 800096c:	45a0      	cmp	r8, r4
 800096e:	f200 80d9 	bhi.w	8000b24 <__udivmoddi4+0x2bc>
 8000972:	4618      	mov	r0, r3
 8000974:	eba4 0408 	sub.w	r4, r4, r8
 8000978:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800097c:	e7bf      	b.n	80008fe <__udivmoddi4+0x96>
 800097e:	428b      	cmp	r3, r1
 8000980:	d909      	bls.n	8000996 <__udivmoddi4+0x12e>
 8000982:	2d00      	cmp	r5, #0
 8000984:	f000 80b1 	beq.w	8000aea <__udivmoddi4+0x282>
 8000988:	2600      	movs	r6, #0
 800098a:	e9c5 0100 	strd	r0, r1, [r5]
 800098e:	4630      	mov	r0, r6
 8000990:	4631      	mov	r1, r6
 8000992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000996:	fab3 f683 	clz	r6, r3
 800099a:	2e00      	cmp	r6, #0
 800099c:	d14a      	bne.n	8000a34 <__udivmoddi4+0x1cc>
 800099e:	428b      	cmp	r3, r1
 80009a0:	d302      	bcc.n	80009a8 <__udivmoddi4+0x140>
 80009a2:	4282      	cmp	r2, r0
 80009a4:	f200 80b8 	bhi.w	8000b18 <__udivmoddi4+0x2b0>
 80009a8:	1a84      	subs	r4, r0, r2
 80009aa:	eb61 0103 	sbc.w	r1, r1, r3
 80009ae:	2001      	movs	r0, #1
 80009b0:	468c      	mov	ip, r1
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	d0a8      	beq.n	8000908 <__udivmoddi4+0xa0>
 80009b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80009ba:	e7a5      	b.n	8000908 <__udivmoddi4+0xa0>
 80009bc:	f1c2 0320 	rsb	r3, r2, #32
 80009c0:	fa20 f603 	lsr.w	r6, r0, r3
 80009c4:	4097      	lsls	r7, r2
 80009c6:	fa01 f002 	lsl.w	r0, r1, r2
 80009ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ce:	40d9      	lsrs	r1, r3
 80009d0:	4330      	orrs	r0, r6
 80009d2:	0c03      	lsrs	r3, r0, #16
 80009d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80009d8:	fa1f f887 	uxth.w	r8, r7
 80009dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80009e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009e4:	fb06 f108 	mul.w	r1, r6, r8
 80009e8:	4299      	cmp	r1, r3
 80009ea:	fa04 f402 	lsl.w	r4, r4, r2
 80009ee:	d909      	bls.n	8000a04 <__udivmoddi4+0x19c>
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80009f6:	f080 808d 	bcs.w	8000b14 <__udivmoddi4+0x2ac>
 80009fa:	4299      	cmp	r1, r3
 80009fc:	f240 808a 	bls.w	8000b14 <__udivmoddi4+0x2ac>
 8000a00:	3e02      	subs	r6, #2
 8000a02:	443b      	add	r3, r7
 8000a04:	1a5b      	subs	r3, r3, r1
 8000a06:	b281      	uxth	r1, r0
 8000a08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a14:	fb00 f308 	mul.w	r3, r0, r8
 8000a18:	428b      	cmp	r3, r1
 8000a1a:	d907      	bls.n	8000a2c <__udivmoddi4+0x1c4>
 8000a1c:	1879      	adds	r1, r7, r1
 8000a1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a22:	d273      	bcs.n	8000b0c <__udivmoddi4+0x2a4>
 8000a24:	428b      	cmp	r3, r1
 8000a26:	d971      	bls.n	8000b0c <__udivmoddi4+0x2a4>
 8000a28:	3802      	subs	r0, #2
 8000a2a:	4439      	add	r1, r7
 8000a2c:	1acb      	subs	r3, r1, r3
 8000a2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a32:	e778      	b.n	8000926 <__udivmoddi4+0xbe>
 8000a34:	f1c6 0c20 	rsb	ip, r6, #32
 8000a38:	fa03 f406 	lsl.w	r4, r3, r6
 8000a3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a40:	431c      	orrs	r4, r3
 8000a42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a46:	fa01 f306 	lsl.w	r3, r1, r6
 8000a4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a52:	431f      	orrs	r7, r3
 8000a54:	0c3b      	lsrs	r3, r7, #16
 8000a56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a5a:	fa1f f884 	uxth.w	r8, r4
 8000a5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a66:	fb09 fa08 	mul.w	sl, r9, r8
 8000a6a:	458a      	cmp	sl, r1
 8000a6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000a70:	fa00 f306 	lsl.w	r3, r0, r6
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x220>
 8000a76:	1861      	adds	r1, r4, r1
 8000a78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a7c:	d248      	bcs.n	8000b10 <__udivmoddi4+0x2a8>
 8000a7e:	458a      	cmp	sl, r1
 8000a80:	d946      	bls.n	8000b10 <__udivmoddi4+0x2a8>
 8000a82:	f1a9 0902 	sub.w	r9, r9, #2
 8000a86:	4421      	add	r1, r4
 8000a88:	eba1 010a 	sub.w	r1, r1, sl
 8000a8c:	b2bf      	uxth	r7, r7
 8000a8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a9a:	fb00 f808 	mul.w	r8, r0, r8
 8000a9e:	45b8      	cmp	r8, r7
 8000aa0:	d907      	bls.n	8000ab2 <__udivmoddi4+0x24a>
 8000aa2:	19e7      	adds	r7, r4, r7
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aa8:	d22e      	bcs.n	8000b08 <__udivmoddi4+0x2a0>
 8000aaa:	45b8      	cmp	r8, r7
 8000aac:	d92c      	bls.n	8000b08 <__udivmoddi4+0x2a0>
 8000aae:	3802      	subs	r0, #2
 8000ab0:	4427      	add	r7, r4
 8000ab2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ab6:	eba7 0708 	sub.w	r7, r7, r8
 8000aba:	fba0 8902 	umull	r8, r9, r0, r2
 8000abe:	454f      	cmp	r7, r9
 8000ac0:	46c6      	mov	lr, r8
 8000ac2:	4649      	mov	r1, r9
 8000ac4:	d31a      	bcc.n	8000afc <__udivmoddi4+0x294>
 8000ac6:	d017      	beq.n	8000af8 <__udivmoddi4+0x290>
 8000ac8:	b15d      	cbz	r5, 8000ae2 <__udivmoddi4+0x27a>
 8000aca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ace:	eb67 0701 	sbc.w	r7, r7, r1
 8000ad2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ad6:	40f2      	lsrs	r2, r6
 8000ad8:	ea4c 0202 	orr.w	r2, ip, r2
 8000adc:	40f7      	lsrs	r7, r6
 8000ade:	e9c5 2700 	strd	r2, r7, [r5]
 8000ae2:	2600      	movs	r6, #0
 8000ae4:	4631      	mov	r1, r6
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	462e      	mov	r6, r5
 8000aec:	4628      	mov	r0, r5
 8000aee:	e70b      	b.n	8000908 <__udivmoddi4+0xa0>
 8000af0:	4606      	mov	r6, r0
 8000af2:	e6e9      	b.n	80008c8 <__udivmoddi4+0x60>
 8000af4:	4618      	mov	r0, r3
 8000af6:	e6fd      	b.n	80008f4 <__udivmoddi4+0x8c>
 8000af8:	4543      	cmp	r3, r8
 8000afa:	d2e5      	bcs.n	8000ac8 <__udivmoddi4+0x260>
 8000afc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b00:	eb69 0104 	sbc.w	r1, r9, r4
 8000b04:	3801      	subs	r0, #1
 8000b06:	e7df      	b.n	8000ac8 <__udivmoddi4+0x260>
 8000b08:	4608      	mov	r0, r1
 8000b0a:	e7d2      	b.n	8000ab2 <__udivmoddi4+0x24a>
 8000b0c:	4660      	mov	r0, ip
 8000b0e:	e78d      	b.n	8000a2c <__udivmoddi4+0x1c4>
 8000b10:	4681      	mov	r9, r0
 8000b12:	e7b9      	b.n	8000a88 <__udivmoddi4+0x220>
 8000b14:	4666      	mov	r6, ip
 8000b16:	e775      	b.n	8000a04 <__udivmoddi4+0x19c>
 8000b18:	4630      	mov	r0, r6
 8000b1a:	e74a      	b.n	80009b2 <__udivmoddi4+0x14a>
 8000b1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b20:	4439      	add	r1, r7
 8000b22:	e713      	b.n	800094c <__udivmoddi4+0xe4>
 8000b24:	3802      	subs	r0, #2
 8000b26:	443c      	add	r4, r7
 8000b28:	e724      	b.n	8000974 <__udivmoddi4+0x10c>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_idiv0>:
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <DDS_Serial_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DDS_Serial_Init(){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
	GPIOF->BSRR = GPIO_BSRR_BS_15;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <DDS_Serial_Init+0x78>)
 8000b78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b7c:	619a      	str	r2, [r3, #24]
	while(GPIOF->BSRR != 0){}
 8000b7e:	bf00      	nop
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <DDS_Serial_Init+0x78>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1fb      	bne.n	8000b80 <DDS_Serial_Init+0x10>
	GPIOF->BSRR = GPIO_BSRR_BR_15;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <DDS_Serial_Init+0x78>)
 8000b8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b8e:	619a      	str	r2, [r3, #24]
	while(GPIOF->BSRR != 0){}
 8000b90:	bf00      	nop
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <DDS_Serial_Init+0x78>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1fb      	bne.n	8000b92 <DDS_Serial_Init+0x22>
	GPIOE->BSRR = GPIO_BSRR_BS_13;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <DDS_Serial_Init+0x7c>)
 8000b9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ba0:	619a      	str	r2, [r3, #24]
	while(GPIOE->BSRR != 0){}
 8000ba2:	bf00      	nop
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <DDS_Serial_Init+0x7c>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1fb      	bne.n	8000ba4 <DDS_Serial_Init+0x34>
	GPIOE->BSRR = GPIO_BSRR_BR_13;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <DDS_Serial_Init+0x7c>)
 8000bae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000bb2:	619a      	str	r2, [r3, #24]
	while(GPIOE->BSRR != 0){}
 8000bb4:	bf00      	nop
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <DDS_Serial_Init+0x7c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d1fb      	bne.n	8000bb6 <DDS_Serial_Init+0x46>
	char *log  = "DDS_Serial_Init_complete\n\r";
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <DDS_Serial_Init+0x80>)
 8000bc0:	607b      	str	r3, [r7, #4]
	while(CDC_Transmit_FS((uint8_t *)log, strlen(log)) != USBD_OK){}
 8000bc2:	bf00      	nop
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fb2b 	bl	8000220 <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	4619      	mov	r1, r3
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f007 fbb7 	bl	8008344 <CDC_Transmit_FS>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1f3      	bne.n	8000bc4 <DDS_Serial_Init+0x54>
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021400 	.word	0x40021400
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	08008ee4 	.word	0x08008ee4
 8000bf4:	00000000 	.word	0x00000000

08000bf8 <DDS_Serial_Write>:

void DDS_Serial_Write(DDS_t *DDS_CH1, DDS_t *DDS_CH2){
 8000bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bfc:	b095      	sub	sp, #84	; 0x54
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	61f8      	str	r0, [r7, #28]
 8000c02:	61b9      	str	r1, [r7, #24]
	double 		Double_DDS_Senddata_CH1,
				Double_DDS_Senddata_CH2;
	uint64_t	DDS_Send_data_CH1,
				DDS_Send_data_CH2,
				BitMask;
	Double_DDS_Senddata_CH1 = 23.86092942 * (double)DDS_CH1->freq;		//2の32?��?/180MHz = 23.86092942
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fd7d 	bl	8000708 <__aeabi_ui2d>
 8000c0e:	a37d      	add	r3, pc, #500	; (adr r3, 8000e04 <DDS_Serial_Write+0x20c>)
 8000c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c14:	f7ff fb0c 	bl	8000230 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	Double_DDS_Senddata_CH2 = 23.86092942 * (double)DDS_CH2->freq;		//2の32?��?/180MHz = 23.86092942
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fd6f 	bl	8000708 <__aeabi_ui2d>
 8000c2a:	a376      	add	r3, pc, #472	; (adr r3, 8000e04 <DDS_Serial_Write+0x20c>)
 8000c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c30:	f7ff fafe 	bl	8000230 <__aeabi_dmul>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	DDS_Send_data_CH1 = (uint64_t)Double_DDS_Senddata_CH1;
 8000c3c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000c40:	f7ff fdf4 	bl	800082c <__aeabi_d2ulz>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	DDS_Send_data_CH2 = (uint64_t)Double_DDS_Senddata_CH2;
 8000c4c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000c50:	f7ff fdec 	bl	800082c <__aeabi_d2ulz>
 8000c54:	4602      	mov	r2, r0
 8000c56:	460b      	mov	r3, r1
 8000c58:	e9c7 2308 	strd	r2, r3, [r7, #32]

	BitMask = 0x01;
 8000c5c:	f04f 0201 	mov.w	r2, #1
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	for (int i = 0; i < 32; i++) {
 8000c68:	2300      	movs	r3, #0
 8000c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8000c6c:	e04f      	b.n	8000d0e <DDS_Serial_Write+0x116>
		if(DDS_Send_data_CH1 & BitMask){
 8000c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000c72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000c76:	ea00 0602 	and.w	r6, r0, r2
 8000c7a:	613e      	str	r6, [r7, #16]
 8000c7c:	400b      	ands	r3, r1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	d004      	beq.n	8000c92 <DDS_Serial_Write+0x9a>
			GPIOG->BSRR = GPIO_BSRR_BS_9; //DDS_D1 set
 8000c88:	4b5b      	ldr	r3, [pc, #364]	; (8000df8 <DDS_Serial_Write+0x200>)
 8000c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8e:	619a      	str	r2, [r3, #24]
 8000c90:	e003      	b.n	8000c9a <DDS_Serial_Write+0xa2>
	//		while(CDC_Transmit_FS((uint8_t *)log_set, strlen(log_set)) != USBD_OK){}
		}else{
			GPIOG->BSRR = GPIO_BSRR_BR_9; //DDS_D1 unset
 8000c92:	4b59      	ldr	r3, [pc, #356]	; (8000df8 <DDS_Serial_Write+0x200>)
 8000c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c98:	619a      	str	r2, [r3, #24]
//			while(CDC_Transmit_FS((uint8_t *)log_unset, strlen(log_unset)) != USBD_OK){}
		}
		if(DDS_Send_data_CH2 & BitMask){
 8000c9a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000c9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000ca2:	ea00 0602 	and.w	r6, r0, r2
 8000ca6:	60be      	str	r6, [r7, #8]
 8000ca8:	400b      	ands	r3, r1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	d004      	beq.n	8000cbe <DDS_Serial_Write+0xc6>
			GPIOG->BSRR = GPIO_BSRR_BS_14; //DDS_D2 set
 8000cb4:	4b50      	ldr	r3, [pc, #320]	; (8000df8 <DDS_Serial_Write+0x200>)
 8000cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cba:	619a      	str	r2, [r3, #24]
 8000cbc:	e003      	b.n	8000cc6 <DDS_Serial_Write+0xce>
	//		while(CDC_Transmit_FS((uint8_t *)log_set, strlen(log_set)) != USBD_OK){}
		}else{
			GPIOG->BSRR = GPIO_BSRR_BR_14; //DDS_D2 unset
 8000cbe:	4b4e      	ldr	r3, [pc, #312]	; (8000df8 <DDS_Serial_Write+0x200>)
 8000cc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc4:	619a      	str	r2, [r3, #24]
//			while(CDC_Transmit_FS((uint8_t *)log_unset, strlen(log_unset)) != USBD_OK){}
				}
		while(GPIOG->BSRR != 0){}
 8000cc6:	bf00      	nop
 8000cc8:	4b4b      	ldr	r3, [pc, #300]	; (8000df8 <DDS_Serial_Write+0x200>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1fb      	bne.n	8000cc8 <DDS_Serial_Write+0xd0>
		GPIOF->BSRR = GPIO_BSRR_BS_15; //DDS_CLK set
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <DDS_Serial_Write+0x204>)
 8000cd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cd6:	619a      	str	r2, [r3, #24]
		while(GPIOF->BSRR != 0){}
 8000cd8:	bf00      	nop
 8000cda:	4b48      	ldr	r3, [pc, #288]	; (8000dfc <DDS_Serial_Write+0x204>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1fb      	bne.n	8000cda <DDS_Serial_Write+0xe2>
		GPIOF->BSRR = GPIO_BSRR_BR_15;	//DDS_CLK unset
 8000ce2:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <DDS_Serial_Write+0x204>)
 8000ce4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ce8:	619a      	str	r2, [r3, #24]
		while(GPIOF->BSRR != 0){}
 8000cea:	bf00      	nop
 8000cec:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <DDS_Serial_Write+0x204>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1fb      	bne.n	8000cec <DDS_Serial_Write+0xf4>
		BitMask = BitMask << 1;
 8000cf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000cf8:	1891      	adds	r1, r2, r2
 8000cfa:	6039      	str	r1, [r7, #0]
 8000cfc:	415b      	adcs	r3, r3
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d04:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	for (int i = 0; i < 32; i++) {
 8000d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8000d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d10:	2b1f      	cmp	r3, #31
 8000d12:	ddac      	ble.n	8000c6e <DDS_Serial_Write+0x76>
	}
	//制御設定�??��8ビッ?��?
	BitMask = 0x01;
 8000d14:	f04f 0201 	mov.w	r2, #1
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	for (int j = 0; j < 8; j++){
 8000d20:	2300      	movs	r3, #0
 8000d22:	643b      	str	r3, [r7, #64]	; 0x40
 8000d24:	e04d      	b.n	8000dc2 <DDS_Serial_Write+0x1ca>
		if(0x01 & BitMask){
 8000d26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000d2a:	f04f 0001 	mov.w	r0, #1
 8000d2e:	f04f 0100 	mov.w	r1, #0
 8000d32:	ea02 0400 	and.w	r4, r2, r0
 8000d36:	ea03 0501 	and.w	r5, r3, r1
 8000d3a:	ea54 0305 	orrs.w	r3, r4, r5
 8000d3e:	d004      	beq.n	8000d4a <DDS_Serial_Write+0x152>
			GPIOG->BSRR = GPIO_BSRR_BS_9;
 8000d40:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <DDS_Serial_Write+0x200>)
 8000d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d46:	619a      	str	r2, [r3, #24]
 8000d48:	e003      	b.n	8000d52 <DDS_Serial_Write+0x15a>
		}else{
			GPIOG->BSRR = GPIO_BSRR_BR_9;
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <DDS_Serial_Write+0x200>)
 8000d4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d50:	619a      	str	r2, [r3, #24]
		}
		if(0x01 & BitMask){
 8000d52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000d56:	f04f 0001 	mov.w	r0, #1
 8000d5a:	f04f 0100 	mov.w	r1, #0
 8000d5e:	ea02 0800 	and.w	r8, r2, r0
 8000d62:	ea03 0901 	and.w	r9, r3, r1
 8000d66:	ea58 0309 	orrs.w	r3, r8, r9
 8000d6a:	d004      	beq.n	8000d76 <DDS_Serial_Write+0x17e>
			GPIOG->BSRR = GPIO_BSRR_BS_14;
 8000d6c:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <DDS_Serial_Write+0x200>)
 8000d6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d72:	619a      	str	r2, [r3, #24]
 8000d74:	e003      	b.n	8000d7e <DDS_Serial_Write+0x186>
		}else{
			GPIOG->BSRR = GPIO_BSRR_BR_14;
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <DDS_Serial_Write+0x200>)
 8000d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7c:	619a      	str	r2, [r3, #24]
		}
		while(GPIOG->BSRR != 0){}
 8000d7e:	bf00      	nop
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <DDS_Serial_Write+0x200>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1fb      	bne.n	8000d80 <DDS_Serial_Write+0x188>
		GPIOF->BSRR = GPIO_BSRR_BS_15;
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <DDS_Serial_Write+0x204>)
 8000d8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d8e:	619a      	str	r2, [r3, #24]
		while(GPIOF->BSRR != 0){}
 8000d90:	bf00      	nop
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <DDS_Serial_Write+0x204>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1fb      	bne.n	8000d92 <DDS_Serial_Write+0x19a>
		GPIOF->BSRR = GPIO_BSRR_BR_15;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <DDS_Serial_Write+0x204>)
 8000d9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000da0:	619a      	str	r2, [r3, #24]
		while(GPIOF->BSRR != 0){}
 8000da2:	bf00      	nop
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <DDS_Serial_Write+0x204>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1fb      	bne.n	8000da4 <DDS_Serial_Write+0x1ac>
		BitMask = BitMask << 1;
 8000dac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000db0:	eb12 0a02 	adds.w	sl, r2, r2
 8000db4:	eb43 0b03 	adc.w	fp, r3, r3
 8000db8:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
	for (int j = 0; j < 8; j++){
 8000dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8000dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc4:	2b07      	cmp	r3, #7
 8000dc6:	ddae      	ble.n	8000d26 <DDS_Serial_Write+0x12e>
	}
	GPIOE->BSRR = GPIO_BSRR_BS_13;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <DDS_Serial_Write+0x208>)
 8000dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dce:	619a      	str	r2, [r3, #24]
	while(GPIOE->BSRR != 0){}
 8000dd0:	bf00      	nop
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <DDS_Serial_Write+0x208>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1fb      	bne.n	8000dd2 <DDS_Serial_Write+0x1da>
	GPIOE->BSRR = GPIO_BSRR_BR_13;
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <DDS_Serial_Write+0x208>)
 8000ddc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000de0:	619a      	str	r2, [r3, #24]
	while(GPIOE->BSRR != 0){}
 8000de2:	bf00      	nop
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <DDS_Serial_Write+0x208>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1fb      	bne.n	8000de4 <DDS_Serial_Write+0x1ec>
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3754      	adds	r7, #84	; 0x54
 8000df2:	46bd      	mov	sp, r7
 8000df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df8:	40021800 	.word	0x40021800
 8000dfc:	40021400 	.word	0x40021400
 8000e00:	40021000 	.word	0x40021000
 8000e04:	ded71073 	.word	0xded71073
 8000e08:	4037dc65 	.word	0x4037dc65

08000e0c <CDC_start_check>:

void CDC_start_check(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
	uint32_t timeout = 1000;  // タイ?��?アウト時間をms単位で?��??��?
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	613b      	str	r3, [r7, #16]
	uint32_t start_time = HAL_GetTick();
 8000e18:	f000 fc6e 	bl	80016f8 <HAL_GetTick>
 8000e1c:	60f8      	str	r0, [r7, #12]
	unsigned char cdc_communication_start = false; //初期値
 8000e1e:	2300      	movs	r3, #0
 8000e20:	75fb      	strb	r3, [r7, #23]
	if(!cdc_communication_start){
 8000e22:	7dfb      	ldrb	r3, [r7, #23]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d10c      	bne.n	8000e42 <CDC_start_check+0x36>
		char *msg = "CDC_initializing\n\r";
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <CDC_start_check+0x6c>)
 8000e2a:	60bb      	str	r3, [r7, #8]
	    cdc_communication_start = CDC_Transmit_FS((uint8_t*)msg, sizeof(msg)) == USBD_OK;
 8000e2c:	2104      	movs	r1, #4
 8000e2e:	68b8      	ldr	r0, [r7, #8]
 8000e30:	f007 fa88 	bl	8008344 <CDC_Transmit_FS>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	bf0c      	ite	eq
 8000e3a:	2301      	moveq	r3, #1
 8000e3c:	2300      	movne	r3, #0
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	75fb      	strb	r3, [r7, #23]
	}
	if(cdc_communication_start == true){
 8000e42:	7dfb      	ldrb	r3, [r7, #23]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d113      	bne.n	8000e70 <CDC_start_check+0x64>
		char *msg = "CDC_initial_OK!\n\r";
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <CDC_start_check+0x70>)
 8000e4a:	607b      	str	r3, [r7, #4]
	    while (CDC_Transmit_FS((uint8_t*)msg, sizeof(msg)) == USBD_BUSY) {
 8000e4c:	e007      	b.n	8000e5e <CDC_start_check+0x52>
	        if (HAL_GetTick() - start_time > timeout) {
 8000e4e:	f000 fc53 	bl	80016f8 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d307      	bcc.n	8000e6e <CDC_start_check+0x62>
	    while (CDC_Transmit_FS((uint8_t*)msg, sizeof(msg)) == USBD_BUSY) {
 8000e5e:	2104      	movs	r1, #4
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f007 fa6f 	bl	8008344 <CDC_Transmit_FS>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d0f0      	beq.n	8000e4e <CDC_start_check+0x42>
	    }
	}else{
	    // そ�??��他�??��コードを実�?
	}

}
 8000e6c:	e000      	b.n	8000e70 <CDC_start_check+0x64>
	            break;
 8000e6e:	bf00      	nop
}
 8000e70:	bf00      	nop
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	08008f00 	.word	0x08008f00
 8000e7c:	08008f14 	.word	0x08008f14

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b098      	sub	sp, #96	; 0x60
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e86:	f000 fbe6 	bl	8001656 <HAL_Init>
  //ST7735_RegisterBusIO(&myST7735_handle, &myST7735_io);
  //myST7735_io.Init = &ST7735_IO_Init;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8a:	f000 f825 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8e:	f000 f975 	bl	800117c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e92:	f000 f943 	bl	800111c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000e96:	f007 f91b 	bl	80080d0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000e9a:	f000 f8b3 	bl	8001004 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000e9e:	f000 f8ef 	bl	8001080 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CDC_start_check();
 8000ea2:	f7ff ffb3 	bl	8000e0c <CDC_start_check>
  DDS_Serial_Init();
 8000ea6:	f7ff fe63 	bl	8000b70 <DDS_Serial_Init>
  DDS_CH1.freq = 80000000;		//80MHz
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <main+0x44>)
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <main+0x48>)
 8000eae:	601a      	str	r2, [r3, #0]
  DDS_CH2.freq = 110000000;	//110MHz
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <main+0x4c>)
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <main+0x50>)
 8000eb4:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //DDS_CH1.freq = receive.array;
	  DDS_Serial_Write(&DDS_CH1, &DDS_CH2);
 8000eb6:	4905      	ldr	r1, [pc, #20]	; (8000ecc <main+0x4c>)
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <main+0x44>)
 8000eba:	f7ff fe9d 	bl	8000bf8 <DDS_Serial_Write>
	  char *msg = "CDC_tick!\n\r";
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <main+0x54>)
 8000ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
  {
 8000ec2:	e7f8      	b.n	8000eb6 <main+0x36>
 8000ec4:	20000438 	.word	0x20000438
 8000ec8:	04c4b400 	.word	0x04c4b400
 8000ecc:	200004f0 	.word	0x200004f0
 8000ed0:	068e7780 	.word	0x068e7780
 8000ed4:	08008f28 	.word	0x08008f28

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0b4      	sub	sp, #208	; 0xd0
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ee2:	2230      	movs	r2, #48	; 0x30
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f007 ff20 	bl	8008d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f007 ff11 	bl	8008d2c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f0a:	f002 f89b 	bl	8003044 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	4b3a      	ldr	r3, [pc, #232]	; (8000ff8 <SystemClock_Config+0x120>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a39      	ldr	r2, [pc, #228]	; (8000ff8 <SystemClock_Config+0x120>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <SystemClock_Config+0x120>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f26:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <SystemClock_Config+0x124>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a34      	ldr	r2, [pc, #208]	; (8000ffc <SystemClock_Config+0x124>)
 8000f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <SystemClock_Config+0x124>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000f60:	23d8      	movs	r3, #216	; 0xd8
 8000f62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f66:	2302      	movs	r3, #2
 8000f68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f6c:	2309      	movs	r3, #9
 8000f6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 f8c4 	bl	8003104 <HAL_RCC_OscConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f82:	f000 f9f3 	bl	800136c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f86:	f002 f86d 	bl	8003064 <HAL_PWREx_EnableOverDrive>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000f90:	f000 f9ec 	bl	800136c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f94:	230f      	movs	r3, #15
 8000f96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fa6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000faa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fb6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fba:	2107      	movs	r1, #7
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f002 fb45 	bl	800364c <HAL_RCC_ClockConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000fc8:	f000 f9d0 	bl	800136c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <SystemClock_Config+0x128>)
 8000fce:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fd36 	bl	8003a50 <HAL_RCCEx_PeriphCLKConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000fea:	f000 f9bf 	bl	800136c <Error_Handler>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	37d0      	adds	r7, #208	; 0xd0
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000
 8001000:	00200100 	.word	0x00200100

08001004 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_SPI1_Init+0x74>)
 800100a:	4a1c      	ldr	r2, [pc, #112]	; (800107c <MX_SPI1_Init+0x78>)
 800100c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_SPI1_Init+0x74>)
 8001010:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001014:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_SPI1_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <MX_SPI1_Init+0x74>)
 800101e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001022:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_SPI1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <MX_SPI1_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_SPI1_Init+0x74>)
 8001032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001036:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_SPI1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_SPI1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_SPI1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_SPI1_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_SPI1_Init+0x74>)
 8001052:	2207      	movs	r2, #7
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <MX_SPI1_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_SPI1_Init+0x74>)
 800105e:	2208      	movs	r2, #8
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_SPI1_Init+0x74>)
 8001064:	f003 f83e 	bl	80040e4 <HAL_SPI_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800106e:	f000 f97d 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000440 	.word	0x20000440
 800107c:	40013000 	.word	0x40013000

08001080 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <MX_TIM2_Init+0x98>)
 80010a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <MX_TIM2_Init+0x98>)
 80010a8:	f642 2230 	movw	r2, #10800	; 0x2a30
 80010ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_TIM2_Init+0x98>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_TIM2_Init+0x98>)
 80010b6:	f04f 32ff 	mov.w	r2, #4294967295
 80010ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_TIM2_Init+0x98>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_TIM2_Init+0x98>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c8:	4813      	ldr	r0, [pc, #76]	; (8001118 <MX_TIM2_Init+0x98>)
 80010ca:	f003 f8b6 	bl	800423a <HAL_TIM_Base_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80010d4:	f000 f94a 	bl	800136c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	4619      	mov	r1, r3
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <MX_TIM2_Init+0x98>)
 80010e6:	f003 f8ff 	bl	80042e8 <HAL_TIM_ConfigClockSource>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80010f0:	f000 f93c 	bl	800136c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_TIM2_Init+0x98>)
 8001102:	f003 faf5 	bl	80046f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800110c:	f000 f92e 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200004a4 	.word	0x200004a4

0800111c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_USART3_UART_Init+0x58>)
 8001122:	4a15      	ldr	r2, [pc, #84]	; (8001178 <MX_USART3_UART_Init+0x5c>)
 8001124:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <MX_USART3_UART_Init+0x58>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_USART3_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_USART3_UART_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_USART3_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_USART3_UART_Init+0x58>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <MX_USART3_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_USART3_UART_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <MX_USART3_UART_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_USART3_UART_Init+0x58>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_USART3_UART_Init+0x58>)
 8001160:	f003 fb54 	bl	800480c <HAL_UART_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800116a:	f000 f8ff 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200003b4 	.word	0x200003b4
 8001178:	40004800 	.word	0x40004800

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08e      	sub	sp, #56	; 0x38
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b70      	ldr	r3, [pc, #448]	; (8001354 <MX_GPIO_Init+0x1d8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a6f      	ldr	r2, [pc, #444]	; (8001354 <MX_GPIO_Init+0x1d8>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b6d      	ldr	r3, [pc, #436]	; (8001354 <MX_GPIO_Init+0x1d8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	623b      	str	r3, [r7, #32]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011aa:	4b6a      	ldr	r3, [pc, #424]	; (8001354 <MX_GPIO_Init+0x1d8>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a69      	ldr	r2, [pc, #420]	; (8001354 <MX_GPIO_Init+0x1d8>)
 80011b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b67      	ldr	r3, [pc, #412]	; (8001354 <MX_GPIO_Init+0x1d8>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b64      	ldr	r3, [pc, #400]	; (8001354 <MX_GPIO_Init+0x1d8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a63      	ldr	r2, [pc, #396]	; (8001354 <MX_GPIO_Init+0x1d8>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b61      	ldr	r3, [pc, #388]	; (8001354 <MX_GPIO_Init+0x1d8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b5e      	ldr	r3, [pc, #376]	; (8001354 <MX_GPIO_Init+0x1d8>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a5d      	ldr	r2, [pc, #372]	; (8001354 <MX_GPIO_Init+0x1d8>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b5b      	ldr	r3, [pc, #364]	; (8001354 <MX_GPIO_Init+0x1d8>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f2:	4b58      	ldr	r3, [pc, #352]	; (8001354 <MX_GPIO_Init+0x1d8>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a57      	ldr	r2, [pc, #348]	; (8001354 <MX_GPIO_Init+0x1d8>)
 80011f8:	f043 0320 	orr.w	r3, r3, #32
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b55      	ldr	r3, [pc, #340]	; (8001354 <MX_GPIO_Init+0x1d8>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800120a:	4b52      	ldr	r3, [pc, #328]	; (8001354 <MX_GPIO_Init+0x1d8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a51      	ldr	r2, [pc, #324]	; (8001354 <MX_GPIO_Init+0x1d8>)
 8001210:	f043 0310 	orr.w	r3, r3, #16
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b4f      	ldr	r3, [pc, #316]	; (8001354 <MX_GPIO_Init+0x1d8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0310 	and.w	r3, r3, #16
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001222:	4b4c      	ldr	r3, [pc, #304]	; (8001354 <MX_GPIO_Init+0x1d8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a4b      	ldr	r2, [pc, #300]	; (8001354 <MX_GPIO_Init+0x1d8>)
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b49      	ldr	r3, [pc, #292]	; (8001354 <MX_GPIO_Init+0x1d8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800123a:	4b46      	ldr	r3, [pc, #280]	; (8001354 <MX_GPIO_Init+0x1d8>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a45      	ldr	r2, [pc, #276]	; (8001354 <MX_GPIO_Init+0x1d8>)
 8001240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b43      	ldr	r3, [pc, #268]	; (8001354 <MX_GPIO_Init+0x1d8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f244 0181 	movw	r1, #16513	; 0x4081
 8001258:	483f      	ldr	r0, [pc, #252]	; (8001358 <MX_GPIO_Init+0x1dc>)
 800125a:	f000 fd2b 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DDS_RST_Pin|DDS_CLK_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001264:	483d      	ldr	r0, [pc, #244]	; (800135c <MX_GPIO_Init+0x1e0>)
 8001266:	f000 fd25 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DDS_FQ_GPIO_Port, DDS_FQ_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001270:	483b      	ldr	r0, [pc, #236]	; (8001360 <MX_GPIO_Init+0x1e4>)
 8001272:	f000 fd1f 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|DDS_D1_Pin|DDS_D2_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f244 2140 	movw	r1, #16960	; 0x4240
 800127c:	4839      	ldr	r0, [pc, #228]	; (8001364 <MX_GPIO_Init+0x1e8>)
 800127e:	f000 fd19 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001282:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001288:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	4833      	ldr	r0, [pc, #204]	; (8001368 <MX_GPIO_Init+0x1ec>)
 800129a:	f000 fb6f 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800129e:	f244 0381 	movw	r3, #16513	; 0x4081
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	4619      	mov	r1, r3
 80012b6:	4828      	ldr	r0, [pc, #160]	; (8001358 <MX_GPIO_Init+0x1dc>)
 80012b8:	f000 fb60 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : DDS_RST_Pin DDS_CLK_Pin */
  GPIO_InitStruct.Pin = DDS_RST_Pin|DDS_CLK_Pin;
 80012bc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012c6:	2302      	movs	r3, #2
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d2:	4619      	mov	r1, r3
 80012d4:	4821      	ldr	r0, [pc, #132]	; (800135c <MX_GPIO_Init+0x1e0>)
 80012d6:	f000 fb51 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : DDS_FQ_Pin */
  GPIO_InitStruct.Pin = DDS_FQ_Pin;
 80012da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012e4:	2302      	movs	r3, #2
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DDS_FQ_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	481b      	ldr	r0, [pc, #108]	; (8001360 <MX_GPIO_Init+0x1e4>)
 80012f4:	f000 fb42 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012f8:	2340      	movs	r3, #64	; 0x40
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4815      	ldr	r0, [pc, #84]	; (8001364 <MX_GPIO_Init+0x1e8>)
 8001310:	f000 fb34 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	4619      	mov	r1, r3
 8001326:	480f      	ldr	r0, [pc, #60]	; (8001364 <MX_GPIO_Init+0x1e8>)
 8001328:	f000 fb28 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : DDS_D1_Pin DDS_D2_Pin */
  GPIO_InitStruct.Pin = DDS_D1_Pin|DDS_D2_Pin;
 800132c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001336:	2302      	movs	r3, #2
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800133e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001342:	4619      	mov	r1, r3
 8001344:	4807      	ldr	r0, [pc, #28]	; (8001364 <MX_GPIO_Init+0x1e8>)
 8001346:	f000 fb19 	bl	800197c <HAL_GPIO_Init>

}
 800134a:	bf00      	nop
 800134c:	3738      	adds	r7, #56	; 0x38
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40020400 	.word	0x40020400
 800135c:	40021400 	.word	0x40021400
 8001360:	40021000 	.word	0x40021000
 8001364:	40021800 	.word	0x40021800
 8001368:	40020800 	.word	0x40020800

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	e7fe      	b.n	8001374 <Error_Handler+0x8>
	...

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_MspInit+0x44>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_MspInit+0x44>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_MspInit+0x44>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_MspInit+0x44>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a08      	ldr	r2, [pc, #32]	; (80013bc <HAL_MspInit+0x44>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_MspInit+0x44>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_SPI_MspInit+0x7c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d127      	bne.n	8001432 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_SPI_MspInit+0x80>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a16      	ldr	r2, [pc, #88]	; (8001440 <HAL_SPI_MspInit+0x80>)
 80013e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <HAL_SPI_MspInit+0x80>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_SPI_MspInit+0x80>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a10      	ldr	r2, [pc, #64]	; (8001440 <HAL_SPI_MspInit+0x80>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_SPI_MspInit+0x80>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001412:	23a0      	movs	r3, #160	; 0xa0
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001422:	2305      	movs	r3, #5
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <HAL_SPI_MspInit+0x84>)
 800142e:	f000 faa5 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	; 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40013000 	.word	0x40013000
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000

08001448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001458:	d10b      	bne.n	8001472 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_TIM_Base_MspInit+0x38>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_TIM_Base_MspInit+0x38>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_TIM_Base_MspInit+0x38>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a17      	ldr	r2, [pc, #92]	; (8001500 <HAL_UART_MspInit+0x7c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d128      	bne.n	80014f8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_UART_MspInit+0x80>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a16      	ldr	r2, [pc, #88]	; (8001504 <HAL_UART_MspInit+0x80>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_UART_MspInit+0x80>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_UART_MspInit+0x80>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <HAL_UART_MspInit+0x80>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_UART_MspInit+0x80>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014e8:	2307      	movs	r3, #7
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <HAL_UART_MspInit+0x84>)
 80014f4:	f000 fa42 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40004800 	.word	0x40004800
 8001504:	40023800 	.word	0x40023800
 8001508:	40020c00 	.word	0x40020c00

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001558:	f000 f8ba 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <OTG_FS_IRQHandler+0x10>)
 8001566:	f000 fd04 	bl	8001f72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200019d0 	.word	0x200019d0

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f007 fb88 	bl	8008cb8 <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20040000 	.word	0x20040000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	20000210 	.word	0x20000210
 80015dc:	20001de8 	.word	0x20001de8

080015e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <SystemInit+0x20>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <SystemInit+0x20>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800160a:	490e      	ldr	r1, [pc, #56]	; (8001644 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001620:	4c0b      	ldr	r4, [pc, #44]	; (8001650 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800162e:	f7ff ffd7 	bl	80015e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001632:	f007 fb47 	bl	8008cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001636:	f7ff fc23 	bl	8000e80 <main>
  bx  lr    
 800163a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001648:	08008fdc 	.word	0x08008fdc
  ldr r2, =_sbss
 800164c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001650:	20001de4 	.word	0x20001de4

08001654 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC_IRQHandler>

08001656 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165a:	2003      	movs	r0, #3
 800165c:	f000 f94c 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001660:	2000      	movs	r0, #0
 8001662:	f000 f805 	bl	8001670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001666:	f7ff fe87 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_InitTick+0x54>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x58>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f967 	bl	8001962 <HAL_SYSTICK_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00e      	b.n	80016bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d80a      	bhi.n	80016ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f000 f92f 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <HAL_InitTick+0x5c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000008 	.word	0x20000008
 80016f4:	200004f8 	.word	0x200004f8

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200004f8 	.word	0x200004f8

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff ffee 	bl	80016f8 <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffde 	bl	80016f8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <__NVIC_SetPriorityGrouping+0x40>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 8001782:	4313      	orrs	r3, r2
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x40>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00
 800179c:	05fa0000 	.word	0x05fa0000

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4907      	ldr	r1, [pc, #28]	; (80017f4 <__NVIC_EnableIRQ+0x38>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff8e 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff29 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff3e 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff8e 	bl	800184c <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5d 	bl	80017f8 <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff31 	bl	80017bc <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa2 	bl	80018b4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	e169      	b.n	8001c70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800199c:	2201      	movs	r2, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f040 8158 	bne.w	8001c6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d005      	beq.n	80019d2 <HAL_GPIO_Init+0x56>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d130      	bne.n	8001a34 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 0201 	and.w	r2, r3, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d017      	beq.n	8001a70 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d123      	bne.n	8001ac4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	220f      	movs	r2, #15
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	69b9      	ldr	r1, [r7, #24]
 8001ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80b2 	beq.w	8001c6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	4b60      	ldr	r3, [pc, #384]	; (8001c88 <HAL_GPIO_Init+0x30c>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	4a5f      	ldr	r2, [pc, #380]	; (8001c88 <HAL_GPIO_Init+0x30c>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b10:	6453      	str	r3, [r2, #68]	; 0x44
 8001b12:	4b5d      	ldr	r3, [pc, #372]	; (8001c88 <HAL_GPIO_Init+0x30c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b1e:	4a5b      	ldr	r2, [pc, #364]	; (8001c8c <HAL_GPIO_Init+0x310>)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	3302      	adds	r3, #2
 8001b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a52      	ldr	r2, [pc, #328]	; (8001c90 <HAL_GPIO_Init+0x314>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d02b      	beq.n	8001ba2 <HAL_GPIO_Init+0x226>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a51      	ldr	r2, [pc, #324]	; (8001c94 <HAL_GPIO_Init+0x318>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d025      	beq.n	8001b9e <HAL_GPIO_Init+0x222>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a50      	ldr	r2, [pc, #320]	; (8001c98 <HAL_GPIO_Init+0x31c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d01f      	beq.n	8001b9a <HAL_GPIO_Init+0x21e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4f      	ldr	r2, [pc, #316]	; (8001c9c <HAL_GPIO_Init+0x320>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d019      	beq.n	8001b96 <HAL_GPIO_Init+0x21a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4e      	ldr	r2, [pc, #312]	; (8001ca0 <HAL_GPIO_Init+0x324>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_GPIO_Init+0x216>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ca4 <HAL_GPIO_Init+0x328>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00d      	beq.n	8001b8e <HAL_GPIO_Init+0x212>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4c      	ldr	r2, [pc, #304]	; (8001ca8 <HAL_GPIO_Init+0x32c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d007      	beq.n	8001b8a <HAL_GPIO_Init+0x20e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4b      	ldr	r2, [pc, #300]	; (8001cac <HAL_GPIO_Init+0x330>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d101      	bne.n	8001b86 <HAL_GPIO_Init+0x20a>
 8001b82:	2307      	movs	r3, #7
 8001b84:	e00e      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001b86:	2308      	movs	r3, #8
 8001b88:	e00c      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001b8a:	2306      	movs	r3, #6
 8001b8c:	e00a      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001b8e:	2305      	movs	r3, #5
 8001b90:	e008      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e004      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x228>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	f002 0203 	and.w	r2, r2, #3
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	4093      	lsls	r3, r2
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bb4:	4935      	ldr	r1, [pc, #212]	; (8001c8c <HAL_GPIO_Init+0x310>)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001be6:	4a32      	ldr	r2, [pc, #200]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bec:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c10:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c3a:	4a1d      	ldr	r2, [pc, #116]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b0f      	cmp	r3, #15
 8001c74:	f67f ae92 	bls.w	800199c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40013800 	.word	0x40013800
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40020400 	.word	0x40020400
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020c00 	.word	0x40020c00
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40021400 	.word	0x40021400
 8001ca8:	40021800 	.word	0x40021800
 8001cac:	40021c00 	.word	0x40021c00
 8001cb0:	40013c00 	.word	0x40013c00

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cd0:	e003      	b.n	8001cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cd2:	887b      	ldrh	r3, [r7, #2]
 8001cd4:	041a      	lsls	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	619a      	str	r2, [r3, #24]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce8:	b08f      	sub	sp, #60	; 0x3c
 8001cea:	af0a      	add	r7, sp, #40	; 0x28
 8001cec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e116      	b.n	8001f26 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f006 fc70 	bl	80085f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 faed 	bl	8005316 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	687e      	ldr	r6, [r7, #4]
 8001d44:	466d      	mov	r5, sp
 8001d46:	f106 0410 	add.w	r4, r6, #16
 8001d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d5a:	1d33      	adds	r3, r6, #4
 8001d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d5e:	6838      	ldr	r0, [r7, #0]
 8001d60:	f003 f99e 	bl	80050a0 <USB_CoreInit>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0d7      	b.n	8001f26 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 fadb 	bl	8005338 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	e04a      	b.n	8001e1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	333d      	adds	r3, #61	; 0x3d
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	333c      	adds	r3, #60	; 0x3c
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	b298      	uxth	r0, r3
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3342      	adds	r3, #66	; 0x42
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dc8:	7bfa      	ldrb	r2, [r7, #15]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	333f      	adds	r3, #63	; 0x3f
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	3344      	adds	r3, #68	; 0x44
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3348      	adds	r3, #72	; 0x48
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	3350      	adds	r3, #80	; 0x50
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d3af      	bcc.n	8001d88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73fb      	strb	r3, [r7, #15]
 8001e2c:	e044      	b.n	8001eb8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	1a9b      	subs	r3, r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d3b5      	bcc.n	8001e2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	687e      	ldr	r6, [r7, #4]
 8001eca:	466d      	mov	r5, sp
 8001ecc:	f106 0410 	add.w	r4, r6, #16
 8001ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001edc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ee0:	1d33      	adds	r3, r6, #4
 8001ee2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee4:	6838      	ldr	r0, [r7, #0]
 8001ee6:	f003 fa73 	bl	80053d0 <USB_DevInit>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e014      	b.n	8001f26 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d102      	bne.n	8001f1a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f001 f871 	bl	8002ffc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f004 fb1b 	bl	800655a <USB_DevDisconnect>

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f2e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_PCD_Start+0x16>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e012      	b.n	8001f6a <HAL_PCD_Start+0x3c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f003 f9cf 	bl	80052f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f004 fadc 	bl	8006518 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f72:	b590      	push	{r4, r7, lr}
 8001f74:	b08d      	sub	sp, #52	; 0x34
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f004 fb9a 	bl	80066c2 <USB_GetMode>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f040 83ba 	bne.w	800270a <HAL_PCD_IRQHandler+0x798>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 fafe 	bl	800659c <USB_ReadInterrupts>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 83b0 	beq.w	8002708 <HAL_PCD_IRQHandler+0x796>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f004 faf5 	bl	800659c <USB_ReadInterrupts>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d107      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f002 0202 	and.w	r2, r2, #2
 8001fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 fae3 	bl	800659c <USB_ReadInterrupts>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b10      	cmp	r3, #16
 8001fde:	d161      	bne.n	80020a4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0210 	bic.w	r2, r2, #16
 8001fee:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	f003 020f 	and.w	r2, r3, #15
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	3304      	adds	r3, #4
 800200e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	0c5b      	lsrs	r3, r3, #17
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	2b02      	cmp	r3, #2
 800201a:	d124      	bne.n	8002066 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d035      	beq.n	8002094 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	091b      	lsrs	r3, r3, #4
 8002030:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002036:	b29b      	uxth	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	6a38      	ldr	r0, [r7, #32]
 800203c:	f004 f91a 	bl	8006274 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800204c:	441a      	add	r2, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800205e:	441a      	add	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	619a      	str	r2, [r3, #24]
 8002064:	e016      	b.n	8002094 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	0c5b      	lsrs	r3, r3, #17
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	2b06      	cmp	r3, #6
 8002070:	d110      	bne.n	8002094 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002078:	2208      	movs	r2, #8
 800207a:	4619      	mov	r1, r3
 800207c:	6a38      	ldr	r0, [r7, #32]
 800207e:	f004 f8f9 	bl	8006274 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800208e:	441a      	add	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0210 	orr.w	r2, r2, #16
 80020a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f004 fa77 	bl	800659c <USB_ReadInterrupts>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020b8:	d16e      	bne.n	8002198 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f004 fa7d 	bl	80065c2 <USB_ReadDevAllOutEpInterrupt>
 80020c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020ca:	e062      	b.n	8002192 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d057      	beq.n	8002186 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f004 faa2 	bl	800662a <USB_ReadDevOutEPInterrupt>
 80020e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00c      	beq.n	800210c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fe:	461a      	mov	r2, r3
 8002100:	2301      	movs	r3, #1
 8002102:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fdce 	bl	8002ca8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00c      	beq.n	8002130 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	4413      	add	r3, r2
 800211e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002122:	461a      	mov	r2, r3
 8002124:	2308      	movs	r3, #8
 8002126:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fec8 	bl	8002ec0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	d008      	beq.n	800214c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002146:	461a      	mov	r2, r3
 8002148:	2310      	movs	r3, #16
 800214a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b00      	cmp	r3, #0
 8002154:	d008      	beq.n	8002168 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	4413      	add	r3, r2
 800215e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002162:	461a      	mov	r2, r3
 8002164:	2320      	movs	r3, #32
 8002166:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	4413      	add	r3, r2
 800217a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217e:	461a      	mov	r2, r3
 8002180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002184:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	3301      	adds	r3, #1
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218e:	085b      	lsrs	r3, r3, #1
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002194:	2b00      	cmp	r3, #0
 8002196:	d199      	bne.n	80020cc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f004 f9fd 	bl	800659c <USB_ReadInterrupts>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021ac:	f040 80c0 	bne.w	8002330 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f004 fa1e 	bl	80065f6 <USB_ReadDevAllInEpInterrupt>
 80021ba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021c0:	e0b2      	b.n	8002328 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80a7 	beq.w	800231c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f004 fa44 	bl	8006666 <USB_ReadDevInEPInterrupt>
 80021de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d057      	beq.n	800229a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	2201      	movs	r2, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43db      	mvns	r3, r3
 8002204:	69f9      	ldr	r1, [r7, #28]
 8002206:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800220a:	4013      	ands	r3, r2
 800220c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800221a:	461a      	mov	r2, r3
 800221c:	2301      	movs	r3, #1
 800221e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d132      	bne.n	800228e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	3348      	adds	r3, #72	; 0x48
 8002238:	6819      	ldr	r1, [r3, #0]
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4403      	add	r3, r0
 8002248:	3344      	adds	r3, #68	; 0x44
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4419      	add	r1, r3
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4403      	add	r3, r0
 800225c:	3348      	adds	r3, #72	; 0x48
 800225e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	2b00      	cmp	r3, #0
 8002264:	d113      	bne.n	800228e <HAL_PCD_IRQHandler+0x31c>
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	3350      	adds	r3, #80	; 0x50
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d108      	bne.n	800228e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002286:	461a      	mov	r2, r3
 8002288:	2101      	movs	r1, #1
 800228a:	f004 fa4d 	bl	8006728 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	b2db      	uxtb	r3, r3
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f006 fa40 	bl	800871a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b0:	461a      	mov	r2, r3
 80022b2:	2308      	movs	r3, #8
 80022b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022cc:	461a      	mov	r2, r3
 80022ce:	2310      	movs	r3, #16
 80022d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e8:	461a      	mov	r2, r3
 80022ea:	2340      	movs	r3, #64	; 0x40
 80022ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002304:	461a      	mov	r2, r3
 8002306:	2302      	movs	r3, #2
 8002308:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fc38 	bl	8002b8c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	3301      	adds	r3, #1
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002324:	085b      	lsrs	r3, r3, #1
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232a:	2b00      	cmp	r3, #0
 800232c:	f47f af49 	bne.w	80021c2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f004 f931 	bl	800659c <USB_ReadInterrupts>
 800233a:	4603      	mov	r3, r0
 800233c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002340:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002344:	d122      	bne.n	800238c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002360:	2b01      	cmp	r3, #1
 8002362:	d108      	bne.n	8002376 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800236c:	2100      	movs	r1, #0
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f006 fc22 	bl	8008bb8 <HAL_PCDEx_LPM_Callback>
 8002374:	e002      	b.n	800237c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f006 fa46 	bl	8008808 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800238a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f004 f903 	bl	800659c <USB_ReadInterrupts>
 8002396:	4603      	mov	r3, r0
 8002398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023a0:	d112      	bne.n	80023c8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d102      	bne.n	80023b8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f006 fa02 	bl	80087bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80023c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f004 f8e5 	bl	800659c <USB_ReadInterrupts>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023dc:	d121      	bne.n	8002422 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80023ec:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d111      	bne.n	800241c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	f003 020f 	and.w	r2, r3, #15
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002412:	2101      	movs	r1, #1
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f006 fbcf 	bl	8008bb8 <HAL_PCDEx_LPM_Callback>
 800241a:	e002      	b.n	8002422 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f006 f9cd 	bl	80087bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f004 f8b8 	bl	800659c <USB_ReadInterrupts>
 800242c:	4603      	mov	r3, r0
 800242e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002436:	f040 80b7 	bne.w	80025a8 <HAL_PCD_IRQHandler+0x636>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2110      	movs	r1, #16
 8002454:	4618      	mov	r0, r3
 8002456:	f003 f929 	bl	80056ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245a:	2300      	movs	r3, #0
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800245e:	e046      	b.n	80024ee <HAL_PCD_IRQHandler+0x57c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800246c:	461a      	mov	r2, r3
 800246e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002472:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	4413      	add	r3, r2
 800247c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002484:	0151      	lsls	r1, r2, #5
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	440a      	add	r2, r1
 800248a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800248e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002492:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	4413      	add	r3, r2
 800249c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a0:	461a      	mov	r2, r3
 80024a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b8:	0151      	lsls	r1, r2, #5
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	440a      	add	r2, r1
 80024be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d8:	0151      	lsls	r1, r2, #5
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	440a      	add	r2, r1
 80024de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ea:	3301      	adds	r3, #1
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d3b3      	bcc.n	8002460 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	69fa      	ldr	r2, [r7, #28]
 8002502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002506:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800250a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	2b00      	cmp	r3, #0
 8002512:	d016      	beq.n	8002542 <HAL_PCD_IRQHandler+0x5d0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800251a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002524:	f043 030b 	orr.w	r3, r3, #11
 8002528:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800253a:	f043 030b 	orr.w	r3, r3, #11
 800253e:	6453      	str	r3, [r2, #68]	; 0x44
 8002540:	e015      	b.n	800256e <HAL_PCD_IRQHandler+0x5fc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002550:	4619      	mov	r1, r3
 8002552:	f242 032b 	movw	r3, #8235	; 0x202b
 8002556:	4313      	orrs	r3, r2
 8002558:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002568:	f043 030b 	orr.w	r3, r3, #11
 800256c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800257c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002580:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002592:	461a      	mov	r2, r3
 8002594:	f004 f8c8 	bl	8006728 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 fff5 	bl	800659c <USB_ReadInterrupts>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025bc:	d124      	bne.n	8002608 <HAL_PCD_IRQHandler+0x696>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f004 f88c 	bl	80066e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 f8e6 	bl	800579e <USB_GetDevSpeed>
 80025d2:	4603      	mov	r3, r0
 80025d4:	461a      	mov	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681c      	ldr	r4, [r3, #0]
 80025de:	f001 fa03 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 80025e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	4620      	mov	r0, r4
 80025ee:	f002 fddf 	bl	80051b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f006 f8b9 	bl	800876a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002606:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f003 ffc5 	bl	800659c <USB_ReadInterrupts>
 8002612:	4603      	mov	r3, r0
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b08      	cmp	r3, #8
 800261a:	d10a      	bne.n	8002632 <HAL_PCD_IRQHandler+0x6c0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f006 f896 	bl	800874e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f002 0208 	and.w	r2, r2, #8
 8002630:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f003 ffb0 	bl	800659c <USB_ReadInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002646:	d10f      	bne.n	8002668 <HAL_PCD_IRQHandler+0x6f6>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	b2db      	uxtb	r3, r3
 8002650:	4619      	mov	r1, r3
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f006 f8f8 	bl	8008848 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f003 ff95 	bl	800659c <USB_ReadInterrupts>
 8002672:	4603      	mov	r3, r0
 8002674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002678:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800267c:	d10f      	bne.n	800269e <HAL_PCD_IRQHandler+0x72c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	b2db      	uxtb	r3, r3
 8002686:	4619      	mov	r1, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f006 f8cb 	bl	8008824 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800269c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 ff7a 	bl	800659c <USB_ReadInterrupts>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b2:	d10a      	bne.n	80026ca <HAL_PCD_IRQHandler+0x758>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f006 f8d9 	bl	800886c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 ff64 	bl	800659c <USB_ReadInterrupts>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d115      	bne.n	800270a <HAL_PCD_IRQHandler+0x798>
    {
      temp = hpcd->Instance->GOTGINT;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <HAL_PCD_IRQHandler+0x784>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f006 f8c9 	bl	8008888 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	e000      	b.n	800270a <HAL_PCD_IRQHandler+0x798>
      return;
 8002708:	bf00      	nop
    }
  }
}
 800270a:	3734      	adds	r7, #52	; 0x34
 800270c:	46bd      	mov	sp, r7
 800270e:	bd90      	pop	{r4, r7, pc}

08002710 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_PCD_SetAddress+0x1a>
 8002726:	2302      	movs	r3, #2
 8002728:	e013      	b.n	8002752 <HAL_PCD_SetAddress+0x42>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fec2 	bl	80064cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	4608      	mov	r0, r1
 8002764:	4611      	mov	r1, r2
 8002766:	461a      	mov	r2, r3
 8002768:	4603      	mov	r3, r0
 800276a:	70fb      	strb	r3, [r7, #3]
 800276c:	460b      	mov	r3, r1
 800276e:	803b      	strh	r3, [r7, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800277c:	2b00      	cmp	r3, #0
 800277e:	da0f      	bge.n	80027a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	f003 020f 	and.w	r2, r3, #15
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	3338      	adds	r3, #56	; 0x38
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	3304      	adds	r3, #4
 8002796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	705a      	strb	r2, [r3, #1]
 800279e:	e00f      	b.n	80027c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	f003 020f 	and.w	r2, r3, #15
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	3304      	adds	r3, #4
 80027b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027cc:	883a      	ldrh	r2, [r7, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	78ba      	ldrb	r2, [r7, #2]
 80027d6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	785b      	ldrb	r3, [r3, #1]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027ea:	78bb      	ldrb	r3, [r7, #2]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d102      	bne.n	80027f6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_PCD_EP_Open+0xaa>
 8002800:	2302      	movs	r3, #2
 8002802:	e00e      	b.n	8002822 <HAL_PCD_EP_Open+0xc8>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68f9      	ldr	r1, [r7, #12]
 8002812:	4618      	mov	r0, r3
 8002814:	f002 ffe8 	bl	80057e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002820:	7afb      	ldrb	r3, [r7, #11]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800283a:	2b00      	cmp	r3, #0
 800283c:	da0f      	bge.n	800285e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	f003 020f 	and.w	r2, r3, #15
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	3338      	adds	r3, #56	; 0x38
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	3304      	adds	r3, #4
 8002854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	705a      	strb	r2, [r3, #1]
 800285c:	e00f      	b.n	800287e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	f003 020f 	and.w	r2, r3, #15
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4413      	add	r3, r2
 8002874:	3304      	adds	r3, #4
 8002876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	b2da      	uxtb	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_PCD_EP_Close+0x6e>
 8002894:	2302      	movs	r3, #2
 8002896:	e00e      	b.n	80028b6 <HAL_PCD_EP_Close+0x8c>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68f9      	ldr	r1, [r7, #12]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 f826 	bl	80058f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
 80028ca:	460b      	mov	r3, r1
 80028cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ce:	7afb      	ldrb	r3, [r7, #11]
 80028d0:	f003 020f 	and.w	r2, r3, #15
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	3304      	adds	r3, #4
 80028e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2200      	movs	r2, #0
 80028f8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2200      	movs	r2, #0
 80028fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002900:	7afb      	ldrb	r3, [r7, #11]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	b2da      	uxtb	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d102      	bne.n	800291a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800291a:	7afb      	ldrb	r3, [r7, #11]
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	6979      	ldr	r1, [r7, #20]
 8002932:	f003 fb09 	bl	8005f48 <USB_EP0StartXfer>
 8002936:	e008      	b.n	800294a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	6979      	ldr	r1, [r7, #20]
 8002946:	f003 f8b3 	bl	8005ab0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	f003 020f 	and.w	r2, r3, #15
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	460b      	mov	r3, r1
 8002992:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002994:	7afb      	ldrb	r3, [r7, #11]
 8002996:	f003 020f 	and.w	r2, r3, #15
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	3338      	adds	r3, #56	; 0x38
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	3304      	adds	r3, #4
 80029aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2200      	movs	r2, #0
 80029bc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2201      	movs	r2, #1
 80029c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029c4:	7afb      	ldrb	r3, [r7, #11]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d102      	bne.n	80029de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029de:	7afb      	ldrb	r3, [r7, #11]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d109      	bne.n	80029fc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	6979      	ldr	r1, [r7, #20]
 80029f6:	f003 faa7 	bl	8005f48 <USB_EP0StartXfer>
 80029fa:	e008      	b.n	8002a0e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	6979      	ldr	r1, [r7, #20]
 8002a0a:	f003 f851 	bl	8005ab0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	f003 020f 	and.w	r2, r3, #15
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d901      	bls.n	8002a36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e050      	b.n	8002ad8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	da0f      	bge.n	8002a5e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a3e:	78fb      	ldrb	r3, [r7, #3]
 8002a40:	f003 020f 	and.w	r2, r3, #15
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	3338      	adds	r3, #56	; 0x38
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	3304      	adds	r3, #4
 8002a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	705a      	strb	r2, [r3, #1]
 8002a5c:	e00d      	b.n	8002a7a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	3304      	adds	r3, #4
 8002a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_PCD_EP_SetStall+0x82>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e01e      	b.n	8002ad8 <HAL_PCD_EP_SetStall+0xc0>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68f9      	ldr	r1, [r7, #12]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 fc3b 	bl	8006324 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10a      	bne.n	8002ace <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	b2d9      	uxtb	r1, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f003 fe2d 	bl	8006728 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	f003 020f 	and.w	r2, r3, #15
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d901      	bls.n	8002afe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e042      	b.n	8002b84 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	da0f      	bge.n	8002b26 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	f003 020f 	and.w	r2, r3, #15
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	3338      	adds	r3, #56	; 0x38
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	705a      	strb	r2, [r3, #1]
 8002b24:	e00f      	b.n	8002b46 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	f003 020f 	and.w	r2, r3, #15
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_PCD_EP_ClrStall+0x86>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e00e      	b.n	8002b84 <HAL_PCD_EP_ClrStall+0xa4>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68f9      	ldr	r1, [r7, #12]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f003 fc43 	bl	8006400 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	3338      	adds	r3, #56	; 0x38
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	4413      	add	r3, r2
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d901      	bls.n	8002bc4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e06c      	b.n	8002c9e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d902      	bls.n	8002be0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	3303      	adds	r3, #3
 8002be4:	089b      	lsrs	r3, r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002be8:	e02b      	b.n	8002c42 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d902      	bls.n	8002c06 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3303      	adds	r3, #3
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	68d9      	ldr	r1, [r3, #12]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	4603      	mov	r3, r0
 8002c24:	6978      	ldr	r0, [r7, #20]
 8002c26:	f003 fae7 	bl	80061f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	441a      	add	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	441a      	add	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d809      	bhi.n	8002c6c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	699a      	ldr	r2, [r3, #24]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d203      	bcs.n	8002c6c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1be      	bne.n	8002bea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d811      	bhi.n	8002c9c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	2201      	movs	r2, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	6939      	ldr	r1, [r7, #16]
 8002c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c98:	4013      	ands	r3, r2
 8002c9a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3720      	adds	r7, #32
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	333c      	adds	r3, #60	; 0x3c
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	f040 80a0 	bne.w	8002e20 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d015      	beq.n	8002d16 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a72      	ldr	r2, [pc, #456]	; (8002eb8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	f240 80dd 	bls.w	8002eae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80d7 	beq.w	8002eae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d12:	6093      	str	r3, [r2, #8]
 8002d14:	e0cb      	b.n	8002eae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2320      	movs	r3, #32
 8002d30:	6093      	str	r3, [r2, #8]
 8002d32:	e0bc      	b.n	8002eae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 80b7 	bne.w	8002eae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4a5d      	ldr	r2, [pc, #372]	; (8002eb8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d90f      	bls.n	8002d68 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d64:	6093      	str	r3, [r2, #8]
 8002d66:	e0a2      	b.n	8002eae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d7a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	0159      	lsls	r1, r3, #5
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	440b      	add	r3, r1
 8002d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002d8e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4403      	add	r3, r0
 8002d9e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002da2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002db6:	6819      	ldr	r1, [r3, #0]
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4403      	add	r3, r0
 8002dc6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4419      	add	r1, r3
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4403      	add	r3, r0
 8002ddc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002de0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d114      	bne.n	8002e12 <PCD_EP_OutXfrComplete_int+0x16a>
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d108      	bne.n	8002e12 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	f003 fc8b 	bl	8006728 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	4619      	mov	r1, r3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f005 fc63 	bl	80086e4 <HAL_PCD_DataOutStageCallback>
 8002e1e:	e046      	b.n	8002eae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <PCD_EP_OutXfrComplete_int+0x214>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d124      	bne.n	8002e72 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e44:	6093      	str	r3, [r2, #8]
 8002e46:	e032      	b.n	8002eae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2320      	movs	r3, #32
 8002e62:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f005 fc3a 	bl	80086e4 <HAL_PCD_DataOutStageCallback>
 8002e70:	e01d      	b.n	8002eae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d114      	bne.n	8002ea2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d108      	bne.n	8002ea2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	f003 fc43 	bl	8006728 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f005 fc1b 	bl	80086e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	4f54300a 	.word	0x4f54300a
 8002ebc:	4f54310a 	.word	0x4f54310a

08002ec0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	333c      	adds	r3, #60	; 0x3c
 8002ed8:	3304      	adds	r3, #4
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d90e      	bls.n	8002f14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d009      	beq.n	8002f14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f005 fbd3 	bl	80086c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d90c      	bls.n	8002f3c <PCD_EP_OutSetupPacket_int+0x7c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d108      	bne.n	8002f3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f34:	461a      	mov	r2, r3
 8002f36:	2101      	movs	r1, #1
 8002f38:	f003 fbf6 	bl	8006728 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	4f54300a 	.word	0x4f54300a

08002f4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	70fb      	strb	r3, [r7, #3]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d107      	bne.n	8002f7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f6a:	883b      	ldrh	r3, [r7, #0]
 8002f6c:	0419      	lsls	r1, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
 8002f78:	e028      	b.n	8002fcc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	0c1b      	lsrs	r3, r3, #16
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	4413      	add	r3, r2
 8002f86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]
 8002f8c:	e00d      	b.n	8002faa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	3340      	adds	r3, #64	; 0x40
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	0c1b      	lsrs	r3, r3, #16
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
 8002faa:	7bfa      	ldrb	r2, [r7, #15]
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d3ec      	bcc.n	8002f8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fb4:	883b      	ldrh	r3, [r7, #0]
 8002fb6:	0418      	lsls	r0, r3, #16
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6819      	ldr	r1, [r3, #0]
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	4302      	orrs	r2, r0
 8002fc4:	3340      	adds	r3, #64	; 0x40
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <HAL_PCDEx_ActivateLPM+0x44>)
 800302c:	4313      	orrs	r3, r2
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	10000003 	.word	0x10000003

08003044 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a04      	ldr	r2, [pc, #16]	; (8003060 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800304e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003052:	6013      	str	r3, [r2, #0]
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40007000 	.word	0x40007000

08003064 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	4b23      	ldr	r3, [pc, #140]	; (80030fc <HAL_PWREx_EnableOverDrive+0x98>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	4a22      	ldr	r2, [pc, #136]	; (80030fc <HAL_PWREx_EnableOverDrive+0x98>)
 8003074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003078:	6413      	str	r3, [r2, #64]	; 0x40
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_PWREx_EnableOverDrive+0x98>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003086:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <HAL_PWREx_EnableOverDrive+0x9c>)
 800308c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003090:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003092:	f7fe fb31 	bl	80016f8 <HAL_GetTick>
 8003096:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003098:	e009      	b.n	80030ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800309a:	f7fe fb2d 	bl	80016f8 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030a8:	d901      	bls.n	80030ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e022      	b.n	80030f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ba:	d1ee      	bne.n	800309a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030bc:	4b10      	ldr	r3, [pc, #64]	; (8003100 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0f      	ldr	r2, [pc, #60]	; (8003100 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030c8:	f7fe fb16 	bl	80016f8 <HAL_GetTick>
 80030cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030ce:	e009      	b.n	80030e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030d0:	f7fe fb12 	bl	80016f8 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030de:	d901      	bls.n	80030e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e007      	b.n	80030f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030f0:	d1ee      	bne.n	80030d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40023800 	.word	0x40023800
 8003100:	40007000 	.word	0x40007000

08003104 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800310c:	2300      	movs	r3, #0
 800310e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e291      	b.n	800363e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8087 	beq.w	8003236 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003128:	4b96      	ldr	r3, [pc, #600]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b04      	cmp	r3, #4
 8003132:	d00c      	beq.n	800314e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003134:	4b93      	ldr	r3, [pc, #588]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	d112      	bne.n	8003166 <HAL_RCC_OscConfig+0x62>
 8003140:	4b90      	ldr	r3, [pc, #576]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800314c:	d10b      	bne.n	8003166 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314e:	4b8d      	ldr	r3, [pc, #564]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d06c      	beq.n	8003234 <HAL_RCC_OscConfig+0x130>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d168      	bne.n	8003234 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e26b      	b.n	800363e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x7a>
 8003170:	4b84      	ldr	r3, [pc, #528]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a83      	ldr	r2, [pc, #524]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	e02e      	b.n	80031dc <HAL_RCC_OscConfig+0xd8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x9c>
 8003186:	4b7f      	ldr	r3, [pc, #508]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a7e      	ldr	r2, [pc, #504]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 800318c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	4b7c      	ldr	r3, [pc, #496]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a7b      	ldr	r2, [pc, #492]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e01d      	b.n	80031dc <HAL_RCC_OscConfig+0xd8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0xc0>
 80031aa:	4b76      	ldr	r3, [pc, #472]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a75      	ldr	r2, [pc, #468]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b73      	ldr	r3, [pc, #460]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a72      	ldr	r2, [pc, #456]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0xd8>
 80031c4:	4b6f      	ldr	r3, [pc, #444]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a6e      	ldr	r2, [pc, #440]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b6c      	ldr	r3, [pc, #432]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a6b      	ldr	r2, [pc, #428]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe fa88 	bl	80016f8 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe fa84 	bl	80016f8 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e21f      	b.n	800363e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b61      	ldr	r3, [pc, #388]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0xe8>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fe fa74 	bl	80016f8 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe fa70 	bl	80016f8 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e20b      	b.n	800363e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	4b57      	ldr	r3, [pc, #348]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x110>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d069      	beq.n	8003316 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003242:	4b50      	ldr	r3, [pc, #320]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324e:	4b4d      	ldr	r3, [pc, #308]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b08      	cmp	r3, #8
 8003258:	d11c      	bne.n	8003294 <HAL_RCC_OscConfig+0x190>
 800325a:	4b4a      	ldr	r3, [pc, #296]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d116      	bne.n	8003294 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	4b47      	ldr	r3, [pc, #284]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_RCC_OscConfig+0x17a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d001      	beq.n	800327e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e1df      	b.n	800363e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327e:	4b41      	ldr	r3, [pc, #260]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	493d      	ldr	r1, [pc, #244]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	e040      	b.n	8003316 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d023      	beq.n	80032e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800329c:	4b39      	ldr	r3, [pc, #228]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a38      	ldr	r2, [pc, #224]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fe fa26 	bl	80016f8 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b0:	f7fe fa22 	bl	80016f8 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e1bd      	b.n	800363e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	4b30      	ldr	r3, [pc, #192]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ce:	4b2d      	ldr	r3, [pc, #180]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4929      	ldr	r1, [pc, #164]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]
 80032e2:	e018      	b.n	8003316 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a26      	ldr	r2, [pc, #152]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fe fa02 	bl	80016f8 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f8:	f7fe f9fe 	bl	80016f8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e199      	b.n	800363e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330a:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d038      	beq.n	8003394 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d019      	beq.n	800335e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332a:	4b16      	ldr	r3, [pc, #88]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 800332c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332e:	4a15      	ldr	r2, [pc, #84]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003336:	f7fe f9df 	bl	80016f8 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333e:	f7fe f9db 	bl	80016f8 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e176      	b.n	800363e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x23a>
 800335c:	e01a      	b.n	8003394 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335e:	4b09      	ldr	r3, [pc, #36]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003362:	4a08      	ldr	r2, [pc, #32]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fe f9c5 	bl	80016f8 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003372:	f7fe f9c1 	bl	80016f8 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d903      	bls.n	8003388 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e15c      	b.n	800363e <HAL_RCC_OscConfig+0x53a>
 8003384:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	4b91      	ldr	r3, [pc, #580]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 800338a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ee      	bne.n	8003372 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80a4 	beq.w	80034ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a2:	4b8b      	ldr	r3, [pc, #556]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10d      	bne.n	80033ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	4b88      	ldr	r3, [pc, #544]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	4a87      	ldr	r2, [pc, #540]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ba:	4b85      	ldr	r3, [pc, #532]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ca:	4b82      	ldr	r3, [pc, #520]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d118      	bne.n	8003408 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033d6:	4b7f      	ldr	r3, [pc, #508]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7e      	ldr	r2, [pc, #504]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e2:	f7fe f989 	bl	80016f8 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7fe f985 	bl	80016f8 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b64      	cmp	r3, #100	; 0x64
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e120      	b.n	800363e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033fc:	4b75      	ldr	r3, [pc, #468]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x31a>
 8003410:	4b6f      	ldr	r3, [pc, #444]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	4a6e      	ldr	r2, [pc, #440]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6713      	str	r3, [r2, #112]	; 0x70
 800341c:	e02d      	b.n	800347a <HAL_RCC_OscConfig+0x376>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x33c>
 8003426:	4b6a      	ldr	r3, [pc, #424]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	4a69      	ldr	r2, [pc, #420]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6713      	str	r3, [r2, #112]	; 0x70
 8003432:	4b67      	ldr	r3, [pc, #412]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a66      	ldr	r2, [pc, #408]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
 800343e:	e01c      	b.n	800347a <HAL_RCC_OscConfig+0x376>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d10c      	bne.n	8003462 <HAL_RCC_OscConfig+0x35e>
 8003448:	4b61      	ldr	r3, [pc, #388]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	4a60      	ldr	r2, [pc, #384]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	6713      	str	r3, [r2, #112]	; 0x70
 8003454:	4b5e      	ldr	r3, [pc, #376]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	4a5d      	ldr	r2, [pc, #372]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	; 0x70
 8003460:	e00b      	b.n	800347a <HAL_RCC_OscConfig+0x376>
 8003462:	4b5b      	ldr	r3, [pc, #364]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	4a5a      	ldr	r2, [pc, #360]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	6713      	str	r3, [r2, #112]	; 0x70
 800346e:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	4a57      	ldr	r2, [pc, #348]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003474:	f023 0304 	bic.w	r3, r3, #4
 8003478:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d015      	beq.n	80034ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fe f939 	bl	80016f8 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe f935 	bl	80016f8 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0ce      	b.n	800363e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	4b4b      	ldr	r3, [pc, #300]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ee      	beq.n	800348a <HAL_RCC_OscConfig+0x386>
 80034ac:	e014      	b.n	80034d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ae:	f7fe f923 	bl	80016f8 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b4:	e00a      	b.n	80034cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fe f91f 	bl	80016f8 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e0b8      	b.n	800363e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034cc:	4b40      	ldr	r3, [pc, #256]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ee      	bne.n	80034b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034de:	4b3c      	ldr	r3, [pc, #240]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	4a3b      	ldr	r2, [pc, #236]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 80034e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80a4 	beq.w	800363c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f4:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d06b      	beq.n	80035d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d149      	bne.n	800359c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003508:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a30      	ldr	r2, [pc, #192]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 800350e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe f8f0 	bl	80016f8 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe f8ec 	bl	80016f8 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e087      	b.n	800363e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	019b      	lsls	r3, r3, #6
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	3b01      	subs	r3, #1
 8003554:	041b      	lsls	r3, r3, #16
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	061b      	lsls	r3, r3, #24
 800355e:	4313      	orrs	r3, r2
 8003560:	4a1b      	ldr	r2, [pc, #108]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003562:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003566:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003568:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a18      	ldr	r2, [pc, #96]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 800356e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fe f8c0 	bl	80016f8 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357c:	f7fe f8bc 	bl	80016f8 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e057      	b.n	800363e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358e:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0x478>
 800359a:	e04f      	b.n	800363c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0b      	ldr	r2, [pc, #44]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 80035a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe f8a6 	bl	80016f8 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fe f8a2 	bl	80016f8 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e03d      	b.n	800363e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	4b03      	ldr	r3, [pc, #12]	; (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x4ac>
 80035ce:	e035      	b.n	800363c <HAL_RCC_OscConfig+0x538>
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_RCC_OscConfig+0x544>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d028      	beq.n	8003638 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d121      	bne.n	8003638 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fe:	429a      	cmp	r2, r3
 8003600:	d11a      	bne.n	8003638 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003608:	4013      	ands	r3, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800360e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003610:	4293      	cmp	r3, r2
 8003612:	d111      	bne.n	8003638 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	3b01      	subs	r3, #1
 8003622:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d107      	bne.n	8003638 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800

0800364c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0d0      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003664:	4b6a      	ldr	r3, [pc, #424]	; (8003810 <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d910      	bls.n	8003694 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b67      	ldr	r3, [pc, #412]	; (8003810 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 020f 	bic.w	r2, r3, #15
 800367a:	4965      	ldr	r1, [pc, #404]	; (8003810 <HAL_RCC_ClockConfig+0x1c4>)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b63      	ldr	r3, [pc, #396]	; (8003810 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0b8      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d020      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ac:	4b59      	ldr	r3, [pc, #356]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a58      	ldr	r2, [pc, #352]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80036b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036c4:	4b53      	ldr	r3, [pc, #332]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4a52      	ldr	r2, [pc, #328]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80036ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d0:	4b50      	ldr	r3, [pc, #320]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	494d      	ldr	r1, [pc, #308]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d040      	beq.n	8003770 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	4b47      	ldr	r3, [pc, #284]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d115      	bne.n	800372e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e07f      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d107      	bne.n	800371e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370e:	4b41      	ldr	r3, [pc, #260]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e073      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371e:	4b3d      	ldr	r3, [pc, #244]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e06b      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800372e:	4b39      	ldr	r3, [pc, #228]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f023 0203 	bic.w	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4936      	ldr	r1, [pc, #216]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 800373c:	4313      	orrs	r3, r2
 800373e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003740:	f7fd ffda 	bl	80016f8 <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	e00a      	b.n	800375e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003748:	f7fd ffd6 	bl	80016f8 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	; 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e053      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375e:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 020c 	and.w	r2, r3, #12
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	429a      	cmp	r2, r3
 800376e:	d1eb      	bne.n	8003748 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003770:	4b27      	ldr	r3, [pc, #156]	; (8003810 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d210      	bcs.n	80037a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 020f 	bic.w	r2, r3, #15
 8003786:	4922      	ldr	r1, [pc, #136]	; (8003810 <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b20      	ldr	r3, [pc, #128]	; (8003810 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e032      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ac:	4b19      	ldr	r3, [pc, #100]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4916      	ldr	r1, [pc, #88]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	490e      	ldr	r1, [pc, #56]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037de:	f000 f821 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 80037e2:	4602      	mov	r2, r0
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	490a      	ldr	r1, [pc, #40]	; (8003818 <HAL_RCC_ClockConfig+0x1cc>)
 80037f0:	5ccb      	ldrb	r3, [r1, r3]
 80037f2:	fa22 f303 	lsr.w	r3, r2, r3
 80037f6:	4a09      	ldr	r2, [pc, #36]	; (800381c <HAL_RCC_ClockConfig+0x1d0>)
 80037f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_ClockConfig+0x1d4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd ff36 	bl	8001670 <HAL_InitTick>

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023c00 	.word	0x40023c00
 8003814:	40023800 	.word	0x40023800
 8003818:	08008fb4 	.word	0x08008fb4
 800381c:	20000000 	.word	0x20000000
 8003820:	20000004 	.word	0x20000004

08003824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003824:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	607b      	str	r3, [r7, #4]
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	2300      	movs	r3, #0
 8003836:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800383c:	4b67      	ldr	r3, [pc, #412]	; (80039dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b08      	cmp	r3, #8
 8003846:	d00d      	beq.n	8003864 <HAL_RCC_GetSysClockFreq+0x40>
 8003848:	2b08      	cmp	r3, #8
 800384a:	f200 80bd 	bhi.w	80039c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_RCC_GetSysClockFreq+0x34>
 8003852:	2b04      	cmp	r3, #4
 8003854:	d003      	beq.n	800385e <HAL_RCC_GetSysClockFreq+0x3a>
 8003856:	e0b7      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003858:	4b61      	ldr	r3, [pc, #388]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800385a:	60bb      	str	r3, [r7, #8]
      break;
 800385c:	e0b7      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800385e:	4b61      	ldr	r3, [pc, #388]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003860:	60bb      	str	r3, [r7, #8]
      break;
 8003862:	e0b4      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003864:	4b5d      	ldr	r3, [pc, #372]	; (80039dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800386c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800386e:	4b5b      	ldr	r3, [pc, #364]	; (80039dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d04d      	beq.n	8003916 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800387a:	4b58      	ldr	r3, [pc, #352]	; (80039dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	099b      	lsrs	r3, r3, #6
 8003880:	461a      	mov	r2, r3
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	f240 10ff 	movw	r0, #511	; 0x1ff
 800388a:	f04f 0100 	mov.w	r1, #0
 800388e:	ea02 0800 	and.w	r8, r2, r0
 8003892:	ea03 0901 	and.w	r9, r3, r1
 8003896:	4640      	mov	r0, r8
 8003898:	4649      	mov	r1, r9
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	014b      	lsls	r3, r1, #5
 80038a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038a8:	0142      	lsls	r2, r0, #5
 80038aa:	4610      	mov	r0, r2
 80038ac:	4619      	mov	r1, r3
 80038ae:	ebb0 0008 	subs.w	r0, r0, r8
 80038b2:	eb61 0109 	sbc.w	r1, r1, r9
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	018b      	lsls	r3, r1, #6
 80038c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038c4:	0182      	lsls	r2, r0, #6
 80038c6:	1a12      	subs	r2, r2, r0
 80038c8:	eb63 0301 	sbc.w	r3, r3, r1
 80038cc:	f04f 0000 	mov.w	r0, #0
 80038d0:	f04f 0100 	mov.w	r1, #0
 80038d4:	00d9      	lsls	r1, r3, #3
 80038d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038da:	00d0      	lsls	r0, r2, #3
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	eb12 0208 	adds.w	r2, r2, r8
 80038e4:	eb43 0309 	adc.w	r3, r3, r9
 80038e8:	f04f 0000 	mov.w	r0, #0
 80038ec:	f04f 0100 	mov.w	r1, #0
 80038f0:	0259      	lsls	r1, r3, #9
 80038f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80038f6:	0250      	lsls	r0, r2, #9
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	461a      	mov	r2, r3
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	f7fc ff78 	bl	80007fc <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4613      	mov	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	e04a      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003916:	4b31      	ldr	r3, [pc, #196]	; (80039dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	099b      	lsrs	r3, r3, #6
 800391c:	461a      	mov	r2, r3
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003926:	f04f 0100 	mov.w	r1, #0
 800392a:	ea02 0400 	and.w	r4, r2, r0
 800392e:	ea03 0501 	and.w	r5, r3, r1
 8003932:	4620      	mov	r0, r4
 8003934:	4629      	mov	r1, r5
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	014b      	lsls	r3, r1, #5
 8003940:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003944:	0142      	lsls	r2, r0, #5
 8003946:	4610      	mov	r0, r2
 8003948:	4619      	mov	r1, r3
 800394a:	1b00      	subs	r0, r0, r4
 800394c:	eb61 0105 	sbc.w	r1, r1, r5
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	018b      	lsls	r3, r1, #6
 800395a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800395e:	0182      	lsls	r2, r0, #6
 8003960:	1a12      	subs	r2, r2, r0
 8003962:	eb63 0301 	sbc.w	r3, r3, r1
 8003966:	f04f 0000 	mov.w	r0, #0
 800396a:	f04f 0100 	mov.w	r1, #0
 800396e:	00d9      	lsls	r1, r3, #3
 8003970:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003974:	00d0      	lsls	r0, r2, #3
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	1912      	adds	r2, r2, r4
 800397c:	eb45 0303 	adc.w	r3, r5, r3
 8003980:	f04f 0000 	mov.w	r0, #0
 8003984:	f04f 0100 	mov.w	r1, #0
 8003988:	0299      	lsls	r1, r3, #10
 800398a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800398e:	0290      	lsls	r0, r2, #10
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4610      	mov	r0, r2
 8003996:	4619      	mov	r1, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	461a      	mov	r2, r3
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	f7fc ff2c 	bl	80007fc <__aeabi_uldivmod>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4613      	mov	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	3301      	adds	r3, #1
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	60bb      	str	r3, [r7, #8]
      break;
 80039c6:	e002      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039ca:	60bb      	str	r3, [r7, #8]
      break;
 80039cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ce:	68bb      	ldr	r3, [r7, #8]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800
 80039e0:	00f42400 	.word	0x00f42400
 80039e4:	007a1200 	.word	0x007a1200

080039e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ec:	4b03      	ldr	r3, [pc, #12]	; (80039fc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20000000 	.word	0x20000000

08003a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a04:	f7ff fff0 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	0a9b      	lsrs	r3, r3, #10
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	4903      	ldr	r1, [pc, #12]	; (8003a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40023800 	.word	0x40023800
 8003a24:	08008fc4 	.word	0x08008fc4

08003a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a2c:	f7ff ffdc 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0b5b      	lsrs	r3, r3, #13
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4903      	ldr	r1, [pc, #12]	; (8003a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	08008fc4 	.word	0x08008fc4

08003a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d012      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a74:	4b65      	ldr	r3, [pc, #404]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a64      	ldr	r2, [pc, #400]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a7e:	6093      	str	r3, [r2, #8]
 8003a80:	4b62      	ldr	r3, [pc, #392]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	4960      	ldr	r1, [pc, #384]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8003a96:	2301      	movs	r3, #1
 8003a98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d017      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aa6:	4b59      	ldr	r3, [pc, #356]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab4:	4955      	ldr	r1, [pc, #340]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac4:	d101      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d017      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	4946      	ldr	r1, [pc, #280]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b00:	d101      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8003b02:	2301      	movs	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 808b 	beq.w	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b20:	4b3a      	ldr	r3, [pc, #232]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	4a39      	ldr	r2, [pc, #228]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2c:	4b37      	ldr	r3, [pc, #220]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b38:	4b35      	ldr	r3, [pc, #212]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a34      	ldr	r2, [pc, #208]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b44:	f7fd fdd8 	bl	80016f8 <HAL_GetTick>
 8003b48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4c:	f7fd fdd4 	bl	80016f8 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e2bc      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b5e:	4b2c      	ldr	r3, [pc, #176]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b6a:	4b28      	ldr	r3, [pc, #160]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d035      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d02e      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b88:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b92:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	4a1d      	ldr	r2, [pc, #116]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003baa:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bb0:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d114      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fd fd9c 	bl	80016f8 <HAL_GetTick>
 8003bc0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc2:	e00a      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc4:	f7fd fd98 	bl	80016f8 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e27e      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bda:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0ee      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf2:	d111      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003c00:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c02:	400b      	ands	r3, r1
 8003c04:	4901      	ldr	r1, [pc, #4]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40007000 	.word	0x40007000
 8003c14:	0ffffcff 	.word	0x0ffffcff
 8003c18:	4ba4      	ldr	r3, [pc, #656]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4aa3      	ldr	r2, [pc, #652]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003c1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c22:	6093      	str	r3, [r2, #8]
 8003c24:	4ba1      	ldr	r3, [pc, #644]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003c26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c30:	499e      	ldr	r1, [pc, #632]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d010      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c42:	4b9a      	ldr	r3, [pc, #616]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c48:	4a98      	ldr	r2, [pc, #608]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c52:	4b96      	ldr	r3, [pc, #600]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003c54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	4993      	ldr	r1, [pc, #588]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c70:	4b8e      	ldr	r3, [pc, #568]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	498b      	ldr	r1, [pc, #556]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c92:	4b86      	ldr	r3, [pc, #536]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca0:	4982      	ldr	r1, [pc, #520]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cb4:	4b7d      	ldr	r3, [pc, #500]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cc2:	497a      	ldr	r1, [pc, #488]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd6:	4b75      	ldr	r3, [pc, #468]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f023 0203 	bic.w	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	4971      	ldr	r1, [pc, #452]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cf8:	4b6c      	ldr	r3, [pc, #432]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f023 020c 	bic.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4969      	ldr	r1, [pc, #420]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d1a:	4b64      	ldr	r3, [pc, #400]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d28:	4960      	ldr	r1, [pc, #384]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d3c:	4b5b      	ldr	r3, [pc, #364]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4a:	4958      	ldr	r1, [pc, #352]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d5e:	4b53      	ldr	r3, [pc, #332]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6c:	494f      	ldr	r1, [pc, #316]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d80:	4b4a      	ldr	r3, [pc, #296]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8e:	4947      	ldr	r1, [pc, #284]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003da2:	4b42      	ldr	r3, [pc, #264]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	493e      	ldr	r1, [pc, #248]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003dc4:	4b39      	ldr	r3, [pc, #228]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd2:	4936      	ldr	r1, [pc, #216]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d011      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003de6:	4b31      	ldr	r3, [pc, #196]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df4:	492d      	ldr	r1, [pc, #180]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e04:	d101      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8003e06:	2301      	movs	r3, #1
 8003e08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e16:	4b25      	ldr	r3, [pc, #148]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e24:	4921      	ldr	r1, [pc, #132]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e38:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e46:	4919      	ldr	r1, [pc, #100]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e5a:	4b14      	ldr	r3, [pc, #80]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e68:	4910      	ldr	r1, [pc, #64]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d006      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 809d 	beq.w	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e84:	4b09      	ldr	r3, [pc, #36]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a08      	ldr	r2, [pc, #32]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e90:	f7fd fc32 	bl	80016f8 <HAL_GetTick>
 8003e94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e98:	f7fd fc2e 	bl	80016f8 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	; 0x64
 8003ea4:	d904      	bls.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e116      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eb0:	4b8b      	ldr	r3, [pc, #556]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1ed      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d017      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d113      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ed0:	4b83      	ldr	r3, [pc, #524]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed6:	0e1b      	lsrs	r3, r3, #24
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	019a      	lsls	r2, r3, #6
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	061b      	lsls	r3, r3, #24
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	071b      	lsls	r3, r3, #28
 8003ef0:	497b      	ldr	r1, [pc, #492]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d004      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d024      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f22:	d11f      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f24:	4b6e      	ldr	r3, [pc, #440]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2a:	0f1b      	lsrs	r3, r3, #28
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	019a      	lsls	r2, r3, #6
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	071b      	lsls	r3, r3, #28
 8003f44:	4966      	ldr	r1, [pc, #408]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f4c:	4b64      	ldr	r3, [pc, #400]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f52:	f023 021f 	bic.w	r2, r3, #31
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	4960      	ldr	r1, [pc, #384]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00d      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	019a      	lsls	r2, r3, #6
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	061b      	lsls	r3, r3, #24
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	071b      	lsls	r3, r3, #28
 8003f84:	4956      	ldr	r1, [pc, #344]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f8c:	4b54      	ldr	r3, [pc, #336]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a53      	ldr	r2, [pc, #332]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003f92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f98:	f7fd fbae 	bl	80016f8 <HAL_GetTick>
 8003f9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fa0:	f7fd fbaa 	bl	80016f8 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	; 0x64
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e092      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fb2:	4b4b      	ldr	r3, [pc, #300]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	f040 8088 	bne.w	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fc6:	4b46      	ldr	r3, [pc, #280]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a45      	ldr	r2, [pc, #276]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd2:	f7fd fb91 	bl	80016f8 <HAL_GetTick>
 8003fd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fda:	f7fd fb8d 	bl	80016f8 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b64      	cmp	r3, #100	; 0x64
 8003fe6:	d901      	bls.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e075      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fec:	4b3c      	ldr	r3, [pc, #240]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff8:	d0ef      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004016:	2b00      	cmp	r3, #0
 8004018:	d024      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	2b00      	cmp	r3, #0
 8004020:	d120      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004022:	4b2f      	ldr	r3, [pc, #188]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	019a      	lsls	r2, r3, #6
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	041b      	lsls	r3, r3, #16
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	4927      	ldr	r1, [pc, #156]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800404a:	4b25      	ldr	r3, [pc, #148]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800404c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004050:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	3b01      	subs	r3, #1
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	4920      	ldr	r1, [pc, #128]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d018      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004078:	d113      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800407a:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004080:	0e1b      	lsrs	r3, r3, #24
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	019a      	lsls	r2, r3, #6
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	431a      	orrs	r2, r3
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	061b      	lsls	r3, r3, #24
 800409a:	4911      	ldr	r1, [pc, #68]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040a2:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a0e      	ldr	r2, [pc, #56]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80040a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ae:	f7fd fb23 	bl	80016f8 <HAL_GetTick>
 80040b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040b4:	e008      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040b6:	f7fd fb1f 	bl	80016f8 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b64      	cmp	r3, #100	; 0x64
 80040c2:	d901      	bls.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e007      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d4:	d1ef      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40023800 	.word	0x40023800

080040e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e09d      	b.n	8004232 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d108      	bne.n	8004110 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004106:	d009      	beq.n	800411c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	61da      	str	r2, [r3, #28]
 800410e:	e005      	b.n	800411c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fd f942 	bl	80013c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004152:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800415c:	d902      	bls.n	8004164 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e002      	b.n	800416a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004168:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004172:	d007      	beq.n	8004184 <HAL_SPI_Init+0xa0>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800417c:	d002      	beq.n	8004184 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	ea42 0103 	orr.w	r1, r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	0c1b      	lsrs	r3, r3, #16
 80041e0:	f003 0204 	and.w	r2, r3, #4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004200:	ea42 0103 	orr.w	r1, r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004220:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e049      	b.n	80042e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d106      	bne.n	8004266 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7fd f8f1 	bl	8001448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3304      	adds	r3, #4
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f000 f8ff 	bl	800447c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_TIM_ConfigClockSource+0x1c>
 8004300:	2302      	movs	r3, #2
 8004302:	e0b4      	b.n	800446e <HAL_TIM_ConfigClockSource+0x186>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	4b56      	ldr	r3, [pc, #344]	; (8004478 <HAL_TIM_ConfigClockSource+0x190>)
 8004320:	4013      	ands	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800432a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800433c:	d03e      	beq.n	80043bc <HAL_TIM_ConfigClockSource+0xd4>
 800433e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004342:	f200 8087 	bhi.w	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 8004346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434a:	f000 8086 	beq.w	800445a <HAL_TIM_ConfigClockSource+0x172>
 800434e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004352:	d87f      	bhi.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b70      	cmp	r3, #112	; 0x70
 8004356:	d01a      	beq.n	800438e <HAL_TIM_ConfigClockSource+0xa6>
 8004358:	2b70      	cmp	r3, #112	; 0x70
 800435a:	d87b      	bhi.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b60      	cmp	r3, #96	; 0x60
 800435e:	d050      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0x11a>
 8004360:	2b60      	cmp	r3, #96	; 0x60
 8004362:	d877      	bhi.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b50      	cmp	r3, #80	; 0x50
 8004366:	d03c      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0xfa>
 8004368:	2b50      	cmp	r3, #80	; 0x50
 800436a:	d873      	bhi.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b40      	cmp	r3, #64	; 0x40
 800436e:	d058      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0x13a>
 8004370:	2b40      	cmp	r3, #64	; 0x40
 8004372:	d86f      	bhi.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b30      	cmp	r3, #48	; 0x30
 8004376:	d064      	beq.n	8004442 <HAL_TIM_ConfigClockSource+0x15a>
 8004378:	2b30      	cmp	r3, #48	; 0x30
 800437a:	d86b      	bhi.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 800437c:	2b20      	cmp	r3, #32
 800437e:	d060      	beq.n	8004442 <HAL_TIM_ConfigClockSource+0x15a>
 8004380:	2b20      	cmp	r3, #32
 8004382:	d867      	bhi.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d05c      	beq.n	8004442 <HAL_TIM_ConfigClockSource+0x15a>
 8004388:	2b10      	cmp	r3, #16
 800438a:	d05a      	beq.n	8004442 <HAL_TIM_ConfigClockSource+0x15a>
 800438c:	e062      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6899      	ldr	r1, [r3, #8]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f000 f987 	bl	80046b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	609a      	str	r2, [r3, #8]
      break;
 80043ba:	e04f      	b.n	800445c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6899      	ldr	r1, [r3, #8]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f000 f970 	bl	80046b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043de:	609a      	str	r2, [r3, #8]
      break;
 80043e0:	e03c      	b.n	800445c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6859      	ldr	r1, [r3, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	461a      	mov	r2, r3
 80043f0:	f000 f8e4 	bl	80045bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2150      	movs	r1, #80	; 0x50
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f93d 	bl	800467a <TIM_ITRx_SetConfig>
      break;
 8004400:	e02c      	b.n	800445c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6859      	ldr	r1, [r3, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	461a      	mov	r2, r3
 8004410:	f000 f903 	bl	800461a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2160      	movs	r1, #96	; 0x60
 800441a:	4618      	mov	r0, r3
 800441c:	f000 f92d 	bl	800467a <TIM_ITRx_SetConfig>
      break;
 8004420:	e01c      	b.n	800445c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6859      	ldr	r1, [r3, #4]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	461a      	mov	r2, r3
 8004430:	f000 f8c4 	bl	80045bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2140      	movs	r1, #64	; 0x40
 800443a:	4618      	mov	r0, r3
 800443c:	f000 f91d 	bl	800467a <TIM_ITRx_SetConfig>
      break;
 8004440:	e00c      	b.n	800445c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4619      	mov	r1, r3
 800444c:	4610      	mov	r0, r2
 800444e:	f000 f914 	bl	800467a <TIM_ITRx_SetConfig>
      break;
 8004452:	e003      	b.n	800445c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
      break;
 8004458:	e000      	b.n	800445c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800445a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800446c:	7bfb      	ldrb	r3, [r7, #15]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	fffeff88 	.word	0xfffeff88

0800447c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a40      	ldr	r2, [pc, #256]	; (8004590 <TIM_Base_SetConfig+0x114>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449a:	d00f      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3d      	ldr	r2, [pc, #244]	; (8004594 <TIM_Base_SetConfig+0x118>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00b      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a3c      	ldr	r2, [pc, #240]	; (8004598 <TIM_Base_SetConfig+0x11c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a3b      	ldr	r2, [pc, #236]	; (800459c <TIM_Base_SetConfig+0x120>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a3a      	ldr	r2, [pc, #232]	; (80045a0 <TIM_Base_SetConfig+0x124>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d108      	bne.n	80044ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2f      	ldr	r2, [pc, #188]	; (8004590 <TIM_Base_SetConfig+0x114>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d02b      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044dc:	d027      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2c      	ldr	r2, [pc, #176]	; (8004594 <TIM_Base_SetConfig+0x118>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d023      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a2b      	ldr	r2, [pc, #172]	; (8004598 <TIM_Base_SetConfig+0x11c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01f      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a2a      	ldr	r2, [pc, #168]	; (800459c <TIM_Base_SetConfig+0x120>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01b      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a29      	ldr	r2, [pc, #164]	; (80045a0 <TIM_Base_SetConfig+0x124>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d017      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a28      	ldr	r2, [pc, #160]	; (80045a4 <TIM_Base_SetConfig+0x128>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a27      	ldr	r2, [pc, #156]	; (80045a8 <TIM_Base_SetConfig+0x12c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00f      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a26      	ldr	r2, [pc, #152]	; (80045ac <TIM_Base_SetConfig+0x130>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00b      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a25      	ldr	r2, [pc, #148]	; (80045b0 <TIM_Base_SetConfig+0x134>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d007      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a24      	ldr	r2, [pc, #144]	; (80045b4 <TIM_Base_SetConfig+0x138>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d003      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a23      	ldr	r2, [pc, #140]	; (80045b8 <TIM_Base_SetConfig+0x13c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d108      	bne.n	8004540 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <TIM_Base_SetConfig+0x114>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_Base_SetConfig+0xf8>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a0c      	ldr	r2, [pc, #48]	; (80045a0 <TIM_Base_SetConfig+0x124>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d103      	bne.n	800457c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	615a      	str	r2, [r3, #20]
}
 8004582:	bf00      	nop
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000
 8004594:	40000400 	.word	0x40000400
 8004598:	40000800 	.word	0x40000800
 800459c:	40000c00 	.word	0x40000c00
 80045a0:	40010400 	.word	0x40010400
 80045a4:	40014000 	.word	0x40014000
 80045a8:	40014400 	.word	0x40014400
 80045ac:	40014800 	.word	0x40014800
 80045b0:	40001800 	.word	0x40001800
 80045b4:	40001c00 	.word	0x40001c00
 80045b8:	40002000 	.word	0x40002000

080045bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f023 0201 	bic.w	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f023 030a 	bic.w	r3, r3, #10
 80045f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800461a:	b480      	push	{r7}
 800461c:	b087      	sub	sp, #28
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f023 0210 	bic.w	r2, r3, #16
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004644:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	031b      	lsls	r3, r3, #12
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004656:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800467a:	b480      	push	{r7}
 800467c:	b085      	sub	sp, #20
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	f043 0307 	orr.w	r3, r3, #7
 800469c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	609a      	str	r2, [r3, #8]
}
 80046a4:	bf00      	nop
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	021a      	lsls	r2, r3, #8
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	609a      	str	r2, [r3, #8]
}
 80046e4:	bf00      	nop
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004704:	2302      	movs	r3, #2
 8004706:	e06d      	b.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a30      	ldr	r2, [pc, #192]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d004      	beq.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a2f      	ldr	r2, [pc, #188]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d108      	bne.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004742:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4313      	orrs	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a20      	ldr	r2, [pc, #128]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d022      	beq.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477a:	d01d      	beq.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1d      	ldr	r2, [pc, #116]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d018      	beq.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1c      	ldr	r2, [pc, #112]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d013      	beq.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1a      	ldr	r2, [pc, #104]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00e      	beq.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a15      	ldr	r2, [pc, #84]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d009      	beq.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a16      	ldr	r2, [pc, #88]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d004      	beq.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a15      	ldr	r2, [pc, #84]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d10c      	bne.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40010400 	.word	0x40010400
 80047f8:	40000400 	.word	0x40000400
 80047fc:	40000800 	.word	0x40000800
 8004800:	40000c00 	.word	0x40000c00
 8004804:	40014000 	.word	0x40014000
 8004808:	40001800 	.word	0x40001800

0800480c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e040      	b.n	80048a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fc fe28 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2224      	movs	r2, #36	; 0x24
 8004838:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0201 	bic.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f82c 	bl	80048a8 <UART_SetConfig>
 8004850:	4603      	mov	r3, r0
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e022      	b.n	80048a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fa82 	bl	8004d6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fb09 	bl	8004eb0 <UART_CheckIdleState>
 800489e:	4603      	mov	r3, r0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4ba7      	ldr	r3, [pc, #668]	; (8004b70 <UART_SetConfig+0x2c8>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	6979      	ldr	r1, [r7, #20]
 80048dc:	430b      	orrs	r3, r1
 80048de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	430a      	orrs	r2, r1
 8004918:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a95      	ldr	r2, [pc, #596]	; (8004b74 <UART_SetConfig+0x2cc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d120      	bne.n	8004966 <UART_SetConfig+0xbe>
 8004924:	4b94      	ldr	r3, [pc, #592]	; (8004b78 <UART_SetConfig+0x2d0>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b03      	cmp	r3, #3
 8004930:	d816      	bhi.n	8004960 <UART_SetConfig+0xb8>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <UART_SetConfig+0x90>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	08004949 	.word	0x08004949
 800493c:	08004955 	.word	0x08004955
 8004940:	0800494f 	.word	0x0800494f
 8004944:	0800495b 	.word	0x0800495b
 8004948:	2301      	movs	r3, #1
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e14f      	b.n	8004bee <UART_SetConfig+0x346>
 800494e:	2302      	movs	r3, #2
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e14c      	b.n	8004bee <UART_SetConfig+0x346>
 8004954:	2304      	movs	r3, #4
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e149      	b.n	8004bee <UART_SetConfig+0x346>
 800495a:	2308      	movs	r3, #8
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e146      	b.n	8004bee <UART_SetConfig+0x346>
 8004960:	2310      	movs	r3, #16
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e143      	b.n	8004bee <UART_SetConfig+0x346>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a84      	ldr	r2, [pc, #528]	; (8004b7c <UART_SetConfig+0x2d4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d132      	bne.n	80049d6 <UART_SetConfig+0x12e>
 8004970:	4b81      	ldr	r3, [pc, #516]	; (8004b78 <UART_SetConfig+0x2d0>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	2b0c      	cmp	r3, #12
 800497c:	d828      	bhi.n	80049d0 <UART_SetConfig+0x128>
 800497e:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0xdc>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049b9 	.word	0x080049b9
 8004988:	080049d1 	.word	0x080049d1
 800498c:	080049d1 	.word	0x080049d1
 8004990:	080049d1 	.word	0x080049d1
 8004994:	080049c5 	.word	0x080049c5
 8004998:	080049d1 	.word	0x080049d1
 800499c:	080049d1 	.word	0x080049d1
 80049a0:	080049d1 	.word	0x080049d1
 80049a4:	080049bf 	.word	0x080049bf
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	080049d1 	.word	0x080049d1
 80049b4:	080049cb 	.word	0x080049cb
 80049b8:	2300      	movs	r3, #0
 80049ba:	77fb      	strb	r3, [r7, #31]
 80049bc:	e117      	b.n	8004bee <UART_SetConfig+0x346>
 80049be:	2302      	movs	r3, #2
 80049c0:	77fb      	strb	r3, [r7, #31]
 80049c2:	e114      	b.n	8004bee <UART_SetConfig+0x346>
 80049c4:	2304      	movs	r3, #4
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	e111      	b.n	8004bee <UART_SetConfig+0x346>
 80049ca:	2308      	movs	r3, #8
 80049cc:	77fb      	strb	r3, [r7, #31]
 80049ce:	e10e      	b.n	8004bee <UART_SetConfig+0x346>
 80049d0:	2310      	movs	r3, #16
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e10b      	b.n	8004bee <UART_SetConfig+0x346>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a69      	ldr	r2, [pc, #420]	; (8004b80 <UART_SetConfig+0x2d8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d120      	bne.n	8004a22 <UART_SetConfig+0x17a>
 80049e0:	4b65      	ldr	r3, [pc, #404]	; (8004b78 <UART_SetConfig+0x2d0>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049ea:	2b30      	cmp	r3, #48	; 0x30
 80049ec:	d013      	beq.n	8004a16 <UART_SetConfig+0x16e>
 80049ee:	2b30      	cmp	r3, #48	; 0x30
 80049f0:	d814      	bhi.n	8004a1c <UART_SetConfig+0x174>
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d009      	beq.n	8004a0a <UART_SetConfig+0x162>
 80049f6:	2b20      	cmp	r3, #32
 80049f8:	d810      	bhi.n	8004a1c <UART_SetConfig+0x174>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <UART_SetConfig+0x15c>
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d006      	beq.n	8004a10 <UART_SetConfig+0x168>
 8004a02:	e00b      	b.n	8004a1c <UART_SetConfig+0x174>
 8004a04:	2300      	movs	r3, #0
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e0f1      	b.n	8004bee <UART_SetConfig+0x346>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e0ee      	b.n	8004bee <UART_SetConfig+0x346>
 8004a10:	2304      	movs	r3, #4
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	e0eb      	b.n	8004bee <UART_SetConfig+0x346>
 8004a16:	2308      	movs	r3, #8
 8004a18:	77fb      	strb	r3, [r7, #31]
 8004a1a:	e0e8      	b.n	8004bee <UART_SetConfig+0x346>
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	77fb      	strb	r3, [r7, #31]
 8004a20:	e0e5      	b.n	8004bee <UART_SetConfig+0x346>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a57      	ldr	r2, [pc, #348]	; (8004b84 <UART_SetConfig+0x2dc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d120      	bne.n	8004a6e <UART_SetConfig+0x1c6>
 8004a2c:	4b52      	ldr	r3, [pc, #328]	; (8004b78 <UART_SetConfig+0x2d0>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a36:	2bc0      	cmp	r3, #192	; 0xc0
 8004a38:	d013      	beq.n	8004a62 <UART_SetConfig+0x1ba>
 8004a3a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a3c:	d814      	bhi.n	8004a68 <UART_SetConfig+0x1c0>
 8004a3e:	2b80      	cmp	r3, #128	; 0x80
 8004a40:	d009      	beq.n	8004a56 <UART_SetConfig+0x1ae>
 8004a42:	2b80      	cmp	r3, #128	; 0x80
 8004a44:	d810      	bhi.n	8004a68 <UART_SetConfig+0x1c0>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <UART_SetConfig+0x1a8>
 8004a4a:	2b40      	cmp	r3, #64	; 0x40
 8004a4c:	d006      	beq.n	8004a5c <UART_SetConfig+0x1b4>
 8004a4e:	e00b      	b.n	8004a68 <UART_SetConfig+0x1c0>
 8004a50:	2300      	movs	r3, #0
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e0cb      	b.n	8004bee <UART_SetConfig+0x346>
 8004a56:	2302      	movs	r3, #2
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	e0c8      	b.n	8004bee <UART_SetConfig+0x346>
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	77fb      	strb	r3, [r7, #31]
 8004a60:	e0c5      	b.n	8004bee <UART_SetConfig+0x346>
 8004a62:	2308      	movs	r3, #8
 8004a64:	77fb      	strb	r3, [r7, #31]
 8004a66:	e0c2      	b.n	8004bee <UART_SetConfig+0x346>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e0bf      	b.n	8004bee <UART_SetConfig+0x346>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a45      	ldr	r2, [pc, #276]	; (8004b88 <UART_SetConfig+0x2e0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d125      	bne.n	8004ac4 <UART_SetConfig+0x21c>
 8004a78:	4b3f      	ldr	r3, [pc, #252]	; (8004b78 <UART_SetConfig+0x2d0>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a86:	d017      	beq.n	8004ab8 <UART_SetConfig+0x210>
 8004a88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a8c:	d817      	bhi.n	8004abe <UART_SetConfig+0x216>
 8004a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a92:	d00b      	beq.n	8004aac <UART_SetConfig+0x204>
 8004a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a98:	d811      	bhi.n	8004abe <UART_SetConfig+0x216>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <UART_SetConfig+0x1fe>
 8004a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa2:	d006      	beq.n	8004ab2 <UART_SetConfig+0x20a>
 8004aa4:	e00b      	b.n	8004abe <UART_SetConfig+0x216>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e0a0      	b.n	8004bee <UART_SetConfig+0x346>
 8004aac:	2302      	movs	r3, #2
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e09d      	b.n	8004bee <UART_SetConfig+0x346>
 8004ab2:	2304      	movs	r3, #4
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e09a      	b.n	8004bee <UART_SetConfig+0x346>
 8004ab8:	2308      	movs	r3, #8
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	e097      	b.n	8004bee <UART_SetConfig+0x346>
 8004abe:	2310      	movs	r3, #16
 8004ac0:	77fb      	strb	r3, [r7, #31]
 8004ac2:	e094      	b.n	8004bee <UART_SetConfig+0x346>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a30      	ldr	r2, [pc, #192]	; (8004b8c <UART_SetConfig+0x2e4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d125      	bne.n	8004b1a <UART_SetConfig+0x272>
 8004ace:	4b2a      	ldr	r3, [pc, #168]	; (8004b78 <UART_SetConfig+0x2d0>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ad8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004adc:	d017      	beq.n	8004b0e <UART_SetConfig+0x266>
 8004ade:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ae2:	d817      	bhi.n	8004b14 <UART_SetConfig+0x26c>
 8004ae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae8:	d00b      	beq.n	8004b02 <UART_SetConfig+0x25a>
 8004aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aee:	d811      	bhi.n	8004b14 <UART_SetConfig+0x26c>
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <UART_SetConfig+0x254>
 8004af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af8:	d006      	beq.n	8004b08 <UART_SetConfig+0x260>
 8004afa:	e00b      	b.n	8004b14 <UART_SetConfig+0x26c>
 8004afc:	2301      	movs	r3, #1
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e075      	b.n	8004bee <UART_SetConfig+0x346>
 8004b02:	2302      	movs	r3, #2
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e072      	b.n	8004bee <UART_SetConfig+0x346>
 8004b08:	2304      	movs	r3, #4
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e06f      	b.n	8004bee <UART_SetConfig+0x346>
 8004b0e:	2308      	movs	r3, #8
 8004b10:	77fb      	strb	r3, [r7, #31]
 8004b12:	e06c      	b.n	8004bee <UART_SetConfig+0x346>
 8004b14:	2310      	movs	r3, #16
 8004b16:	77fb      	strb	r3, [r7, #31]
 8004b18:	e069      	b.n	8004bee <UART_SetConfig+0x346>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1c      	ldr	r2, [pc, #112]	; (8004b90 <UART_SetConfig+0x2e8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d137      	bne.n	8004b94 <UART_SetConfig+0x2ec>
 8004b24:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <UART_SetConfig+0x2d0>)
 8004b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b32:	d017      	beq.n	8004b64 <UART_SetConfig+0x2bc>
 8004b34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b38:	d817      	bhi.n	8004b6a <UART_SetConfig+0x2c2>
 8004b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3e:	d00b      	beq.n	8004b58 <UART_SetConfig+0x2b0>
 8004b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b44:	d811      	bhi.n	8004b6a <UART_SetConfig+0x2c2>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <UART_SetConfig+0x2aa>
 8004b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4e:	d006      	beq.n	8004b5e <UART_SetConfig+0x2b6>
 8004b50:	e00b      	b.n	8004b6a <UART_SetConfig+0x2c2>
 8004b52:	2300      	movs	r3, #0
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e04a      	b.n	8004bee <UART_SetConfig+0x346>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e047      	b.n	8004bee <UART_SetConfig+0x346>
 8004b5e:	2304      	movs	r3, #4
 8004b60:	77fb      	strb	r3, [r7, #31]
 8004b62:	e044      	b.n	8004bee <UART_SetConfig+0x346>
 8004b64:	2308      	movs	r3, #8
 8004b66:	77fb      	strb	r3, [r7, #31]
 8004b68:	e041      	b.n	8004bee <UART_SetConfig+0x346>
 8004b6a:	2310      	movs	r3, #16
 8004b6c:	77fb      	strb	r3, [r7, #31]
 8004b6e:	e03e      	b.n	8004bee <UART_SetConfig+0x346>
 8004b70:	efff69f3 	.word	0xefff69f3
 8004b74:	40011000 	.word	0x40011000
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40004400 	.word	0x40004400
 8004b80:	40004800 	.word	0x40004800
 8004b84:	40004c00 	.word	0x40004c00
 8004b88:	40005000 	.word	0x40005000
 8004b8c:	40011400 	.word	0x40011400
 8004b90:	40007800 	.word	0x40007800
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a71      	ldr	r2, [pc, #452]	; (8004d60 <UART_SetConfig+0x4b8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d125      	bne.n	8004bea <UART_SetConfig+0x342>
 8004b9e:	4b71      	ldr	r3, [pc, #452]	; (8004d64 <UART_SetConfig+0x4bc>)
 8004ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ba8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bac:	d017      	beq.n	8004bde <UART_SetConfig+0x336>
 8004bae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bb2:	d817      	bhi.n	8004be4 <UART_SetConfig+0x33c>
 8004bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb8:	d00b      	beq.n	8004bd2 <UART_SetConfig+0x32a>
 8004bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bbe:	d811      	bhi.n	8004be4 <UART_SetConfig+0x33c>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <UART_SetConfig+0x324>
 8004bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc8:	d006      	beq.n	8004bd8 <UART_SetConfig+0x330>
 8004bca:	e00b      	b.n	8004be4 <UART_SetConfig+0x33c>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e00d      	b.n	8004bee <UART_SetConfig+0x346>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e00a      	b.n	8004bee <UART_SetConfig+0x346>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e007      	b.n	8004bee <UART_SetConfig+0x346>
 8004bde:	2308      	movs	r3, #8
 8004be0:	77fb      	strb	r3, [r7, #31]
 8004be2:	e004      	b.n	8004bee <UART_SetConfig+0x346>
 8004be4:	2310      	movs	r3, #16
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e001      	b.n	8004bee <UART_SetConfig+0x346>
 8004bea:	2310      	movs	r3, #16
 8004bec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf6:	d15a      	bne.n	8004cae <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004bf8:	7ffb      	ldrb	r3, [r7, #31]
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d827      	bhi.n	8004c4e <UART_SetConfig+0x3a6>
 8004bfe:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <UART_SetConfig+0x35c>)
 8004c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004c31 	.word	0x08004c31
 8004c0c:	08004c39 	.word	0x08004c39
 8004c10:	08004c4f 	.word	0x08004c4f
 8004c14:	08004c3f 	.word	0x08004c3f
 8004c18:	08004c4f 	.word	0x08004c4f
 8004c1c:	08004c4f 	.word	0x08004c4f
 8004c20:	08004c4f 	.word	0x08004c4f
 8004c24:	08004c47 	.word	0x08004c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c28:	f7fe feea 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 8004c2c:	61b8      	str	r0, [r7, #24]
        break;
 8004c2e:	e013      	b.n	8004c58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c30:	f7fe fefa 	bl	8003a28 <HAL_RCC_GetPCLK2Freq>
 8004c34:	61b8      	str	r0, [r7, #24]
        break;
 8004c36:	e00f      	b.n	8004c58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c38:	4b4b      	ldr	r3, [pc, #300]	; (8004d68 <UART_SetConfig+0x4c0>)
 8004c3a:	61bb      	str	r3, [r7, #24]
        break;
 8004c3c:	e00c      	b.n	8004c58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c3e:	f7fe fdf1 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 8004c42:	61b8      	str	r0, [r7, #24]
        break;
 8004c44:	e008      	b.n	8004c58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c4a:	61bb      	str	r3, [r7, #24]
        break;
 8004c4c:	e004      	b.n	8004c58 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	77bb      	strb	r3, [r7, #30]
        break;
 8004c56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d074      	beq.n	8004d48 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	005a      	lsls	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	441a      	add	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b0f      	cmp	r3, #15
 8004c78:	d916      	bls.n	8004ca8 <UART_SetConfig+0x400>
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c80:	d212      	bcs.n	8004ca8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f023 030f 	bic.w	r3, r3, #15
 8004c8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	89fb      	ldrh	r3, [r7, #14]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	89fa      	ldrh	r2, [r7, #14]
 8004ca4:	60da      	str	r2, [r3, #12]
 8004ca6:	e04f      	b.n	8004d48 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	77bb      	strb	r3, [r7, #30]
 8004cac:	e04c      	b.n	8004d48 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cae:	7ffb      	ldrb	r3, [r7, #31]
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d828      	bhi.n	8004d06 <UART_SetConfig+0x45e>
 8004cb4:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <UART_SetConfig+0x414>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004ce1 	.word	0x08004ce1
 8004cc0:	08004ce9 	.word	0x08004ce9
 8004cc4:	08004cf1 	.word	0x08004cf1
 8004cc8:	08004d07 	.word	0x08004d07
 8004ccc:	08004cf7 	.word	0x08004cf7
 8004cd0:	08004d07 	.word	0x08004d07
 8004cd4:	08004d07 	.word	0x08004d07
 8004cd8:	08004d07 	.word	0x08004d07
 8004cdc:	08004cff 	.word	0x08004cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce0:	f7fe fe8e 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 8004ce4:	61b8      	str	r0, [r7, #24]
        break;
 8004ce6:	e013      	b.n	8004d10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce8:	f7fe fe9e 	bl	8003a28 <HAL_RCC_GetPCLK2Freq>
 8004cec:	61b8      	str	r0, [r7, #24]
        break;
 8004cee:	e00f      	b.n	8004d10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf0:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <UART_SetConfig+0x4c0>)
 8004cf2:	61bb      	str	r3, [r7, #24]
        break;
 8004cf4:	e00c      	b.n	8004d10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf6:	f7fe fd95 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 8004cfa:	61b8      	str	r0, [r7, #24]
        break;
 8004cfc:	e008      	b.n	8004d10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d02:	61bb      	str	r3, [r7, #24]
        break;
 8004d04:	e004      	b.n	8004d10 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d0e:	bf00      	nop
    }

    if (pclk != 0U)
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d018      	beq.n	8004d48 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	085a      	lsrs	r2, r3, #1
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	441a      	add	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b0f      	cmp	r3, #15
 8004d2e:	d909      	bls.n	8004d44 <UART_SetConfig+0x49c>
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d36:	d205      	bcs.n	8004d44 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	e001      	b.n	8004d48 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d54:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40007c00 	.word	0x40007c00
 8004d64:	40023800 	.word	0x40023800
 8004d68:	00f42400 	.word	0x00f42400

08004d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01a      	beq.n	8004e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e6a:	d10a      	bne.n	8004e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ec0:	f7fc fc1a 	bl	80016f8 <HAL_GetTick>
 8004ec4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d10e      	bne.n	8004ef2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f817 	bl	8004f16 <UART_WaitOnFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e00d      	b.n	8004f0e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2220      	movs	r2, #32
 8004efc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b09c      	sub	sp, #112	; 0x70
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	603b      	str	r3, [r7, #0]
 8004f22:	4613      	mov	r3, r2
 8004f24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f26:	e0a5      	b.n	8005074 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	f000 80a1 	beq.w	8005074 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f32:	f7fc fbe1 	bl	80016f8 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d302      	bcc.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d13e      	bne.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f50:	e853 3f00 	ldrex	r3, [r3]
 8004f54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e6      	bne.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3308      	adds	r3, #8
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	663b      	str	r3, [r7, #96]	; 0x60
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3308      	adds	r3, #8
 8004f98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e5      	bne.n	8004f7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e067      	b.n	8005096 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d04f      	beq.n	8005074 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fe2:	d147      	bne.n	8005074 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005002:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500c:	637b      	str	r3, [r7, #52]	; 0x34
 800500e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e6      	bne.n	8004fee <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3308      	adds	r3, #8
 8005026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	613b      	str	r3, [r7, #16]
   return(result);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f023 0301 	bic.w	r3, r3, #1
 8005036:	66bb      	str	r3, [r7, #104]	; 0x68
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3308      	adds	r3, #8
 800503e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005040:	623a      	str	r2, [r7, #32]
 8005042:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	69f9      	ldr	r1, [r7, #28]
 8005046:	6a3a      	ldr	r2, [r7, #32]
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	61bb      	str	r3, [r7, #24]
   return(result);
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e5      	bne.n	8005020 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e010      	b.n	8005096 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69da      	ldr	r2, [r3, #28]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4013      	ands	r3, r2
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	bf0c      	ite	eq
 8005084:	2301      	moveq	r3, #1
 8005086:	2300      	movne	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	429a      	cmp	r2, r3
 8005090:	f43f af4a 	beq.w	8004f28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3770      	adds	r7, #112	; 0x70
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050a0:	b084      	sub	sp, #16
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	f107 001c 	add.w	r0, r7, #28
 80050ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d126      	bne.n	8005106 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	4b38      	ldr	r3, [pc, #224]	; (80051ac <USB_CoreInit+0x10c>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f043 0210 	orr.w	r2, r3, #16
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d105      	bne.n	80050fa <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f001 fb72 	bl	80067e4 <USB_CoreReset>
 8005100:	4603      	mov	r3, r0
 8005102:	73fb      	strb	r3, [r7, #15]
 8005104:	e03a      	b.n	800517c <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	2b03      	cmp	r3, #3
 800510a:	d126      	bne.n	800515a <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	4b23      	ldr	r3, [pc, #140]	; (80051ac <USB_CoreInit+0x10c>)
 800511e:	4013      	ands	r3, r2
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f023 0210 	bic.w	r2, r3, #16
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800513c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800513e:	2b01      	cmp	r3, #1
 8005140:	d105      	bne.n	800514e <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f001 fb48 	bl	80067e4 <USB_CoreReset>
 8005154:	4603      	mov	r3, r0
 8005156:	73fb      	strb	r3, [r7, #15]
 8005158:	e010      	b.n	800517c <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f001 fb3c 	bl	80067e4 <USB_CoreReset>
 800516c:	4603      	mov	r3, r0
 800516e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10b      	bne.n	800519a <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f043 0206 	orr.w	r2, r3, #6
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800519a:	7bfb      	ldrb	r3, [r7, #15]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051a6:	b004      	add	sp, #16
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	ffbdffbf 	.word	0xffbdffbf

080051b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d165      	bne.n	8005290 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4a41      	ldr	r2, [pc, #260]	; (80052cc <USB_SetTurnaroundTime+0x11c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d906      	bls.n	80051da <USB_SetTurnaroundTime+0x2a>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4a40      	ldr	r2, [pc, #256]	; (80052d0 <USB_SetTurnaroundTime+0x120>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d202      	bcs.n	80051da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051d4:	230f      	movs	r3, #15
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e062      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4a3c      	ldr	r2, [pc, #240]	; (80052d0 <USB_SetTurnaroundTime+0x120>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d306      	bcc.n	80051f0 <USB_SetTurnaroundTime+0x40>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4a3b      	ldr	r2, [pc, #236]	; (80052d4 <USB_SetTurnaroundTime+0x124>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d202      	bcs.n	80051f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051ea:	230e      	movs	r3, #14
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	e057      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4a38      	ldr	r2, [pc, #224]	; (80052d4 <USB_SetTurnaroundTime+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d306      	bcc.n	8005206 <USB_SetTurnaroundTime+0x56>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4a37      	ldr	r2, [pc, #220]	; (80052d8 <USB_SetTurnaroundTime+0x128>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d202      	bcs.n	8005206 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005200:	230d      	movs	r3, #13
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	e04c      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4a33      	ldr	r2, [pc, #204]	; (80052d8 <USB_SetTurnaroundTime+0x128>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d306      	bcc.n	800521c <USB_SetTurnaroundTime+0x6c>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4a32      	ldr	r2, [pc, #200]	; (80052dc <USB_SetTurnaroundTime+0x12c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d802      	bhi.n	800521c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005216:	230c      	movs	r3, #12
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	e041      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4a2f      	ldr	r2, [pc, #188]	; (80052dc <USB_SetTurnaroundTime+0x12c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d906      	bls.n	8005232 <USB_SetTurnaroundTime+0x82>
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4a2e      	ldr	r2, [pc, #184]	; (80052e0 <USB_SetTurnaroundTime+0x130>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d802      	bhi.n	8005232 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800522c:	230b      	movs	r3, #11
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	e036      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4a2a      	ldr	r2, [pc, #168]	; (80052e0 <USB_SetTurnaroundTime+0x130>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d906      	bls.n	8005248 <USB_SetTurnaroundTime+0x98>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	4a29      	ldr	r2, [pc, #164]	; (80052e4 <USB_SetTurnaroundTime+0x134>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d802      	bhi.n	8005248 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005242:	230a      	movs	r3, #10
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	e02b      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4a26      	ldr	r2, [pc, #152]	; (80052e4 <USB_SetTurnaroundTime+0x134>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d906      	bls.n	800525e <USB_SetTurnaroundTime+0xae>
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	4a25      	ldr	r2, [pc, #148]	; (80052e8 <USB_SetTurnaroundTime+0x138>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d202      	bcs.n	800525e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005258:	2309      	movs	r3, #9
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e020      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4a21      	ldr	r2, [pc, #132]	; (80052e8 <USB_SetTurnaroundTime+0x138>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d306      	bcc.n	8005274 <USB_SetTurnaroundTime+0xc4>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	4a20      	ldr	r2, [pc, #128]	; (80052ec <USB_SetTurnaroundTime+0x13c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d802      	bhi.n	8005274 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800526e:	2308      	movs	r3, #8
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	e015      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4a1d      	ldr	r2, [pc, #116]	; (80052ec <USB_SetTurnaroundTime+0x13c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d906      	bls.n	800528a <USB_SetTurnaroundTime+0xda>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4a1c      	ldr	r2, [pc, #112]	; (80052f0 <USB_SetTurnaroundTime+0x140>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d202      	bcs.n	800528a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005284:	2307      	movs	r3, #7
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	e00a      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800528a:	2306      	movs	r3, #6
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e007      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d102      	bne.n	800529c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005296:	2309      	movs	r3, #9
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	e001      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800529c:	2309      	movs	r3, #9
 800529e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	029b      	lsls	r3, r3, #10
 80052b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80052b8:	431a      	orrs	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	00d8acbf 	.word	0x00d8acbf
 80052d0:	00e4e1c0 	.word	0x00e4e1c0
 80052d4:	00f42400 	.word	0x00f42400
 80052d8:	01067380 	.word	0x01067380
 80052dc:	011a499f 	.word	0x011a499f
 80052e0:	01312cff 	.word	0x01312cff
 80052e4:	014ca43f 	.word	0x014ca43f
 80052e8:	016e3600 	.word	0x016e3600
 80052ec:	01a6ab1f 	.word	0x01a6ab1f
 80052f0:	01e84800 	.word	0x01e84800

080052f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f043 0201 	orr.w	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f023 0201 	bic.w	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d115      	bne.n	8005386 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005366:	2001      	movs	r0, #1
 8005368:	f7fc f9d2 	bl	8001710 <HAL_Delay>
      ms++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f001 f9a5 	bl	80066c2 <USB_GetMode>
 8005378:	4603      	mov	r3, r0
 800537a:	2b01      	cmp	r3, #1
 800537c:	d01e      	beq.n	80053bc <USB_SetCurrentMode+0x84>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b31      	cmp	r3, #49	; 0x31
 8005382:	d9f0      	bls.n	8005366 <USB_SetCurrentMode+0x2e>
 8005384:	e01a      	b.n	80053bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005386:	78fb      	ldrb	r3, [r7, #3]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d115      	bne.n	80053b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005398:	2001      	movs	r0, #1
 800539a:	f7fc f9b9 	bl	8001710 <HAL_Delay>
      ms++;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3301      	adds	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f001 f98c 	bl	80066c2 <USB_GetMode>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <USB_SetCurrentMode+0x84>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b31      	cmp	r3, #49	; 0x31
 80053b4:	d9f0      	bls.n	8005398 <USB_SetCurrentMode+0x60>
 80053b6:	e001      	b.n	80053bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e005      	b.n	80053c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b32      	cmp	r3, #50	; 0x32
 80053c0:	d101      	bne.n	80053c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053d0:	b084      	sub	sp, #16
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b086      	sub	sp, #24
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053ea:	2300      	movs	r3, #0
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	e009      	b.n	8005404 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	3340      	adds	r3, #64	; 0x40
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	2200      	movs	r2, #0
 80053fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	3301      	adds	r3, #1
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	2b0e      	cmp	r3, #14
 8005408:	d9f2      	bls.n	80053f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800540a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d11c      	bne.n	800544a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800541e:	f043 0302 	orr.w	r3, r3, #2
 8005422:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	e005      	b.n	8005456 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800545c:	461a      	mov	r2, r3
 800545e:	2300      	movs	r3, #0
 8005460:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005468:	4619      	mov	r1, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005470:	461a      	mov	r2, r3
 8005472:	680b      	ldr	r3, [r1, #0]
 8005474:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	2b01      	cmp	r3, #1
 800547a:	d10c      	bne.n	8005496 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d104      	bne.n	800548c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005482:	2100      	movs	r1, #0
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f971 	bl	800576c <USB_SetDevSpeed>
 800548a:	e018      	b.n	80054be <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800548c:	2101      	movs	r1, #1
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f96c 	bl	800576c <USB_SetDevSpeed>
 8005494:	e013      	b.n	80054be <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	2b03      	cmp	r3, #3
 800549a:	d10c      	bne.n	80054b6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d104      	bne.n	80054ac <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054a2:	2100      	movs	r1, #0
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f961 	bl	800576c <USB_SetDevSpeed>
 80054aa:	e008      	b.n	80054be <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054ac:	2101      	movs	r1, #1
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f95c 	bl	800576c <USB_SetDevSpeed>
 80054b4:	e003      	b.n	80054be <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054b6:	2103      	movs	r1, #3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f957 	bl	800576c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054be:	2110      	movs	r1, #16
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f8f3 	bl	80056ac <USB_FlushTxFifo>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f91d 	bl	8005710 <USB_FlushRxFifo>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e6:	461a      	mov	r2, r3
 80054e8:	2300      	movs	r3, #0
 80054ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f2:	461a      	mov	r2, r3
 80054f4:	2300      	movs	r3, #0
 80054f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fe:	461a      	mov	r2, r3
 8005500:	2300      	movs	r3, #0
 8005502:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005504:	2300      	movs	r3, #0
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	e043      	b.n	8005592 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800551c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005520:	d118      	bne.n	8005554 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10a      	bne.n	800553e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	461a      	mov	r2, r3
 8005536:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	e013      	b.n	8005566 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554a:	461a      	mov	r2, r3
 800554c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	e008      	b.n	8005566 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	461a      	mov	r2, r3
 8005562:	2300      	movs	r3, #0
 8005564:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005572:	461a      	mov	r2, r3
 8005574:	2300      	movs	r3, #0
 8005576:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005584:	461a      	mov	r2, r3
 8005586:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800558a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	3301      	adds	r3, #1
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	429a      	cmp	r2, r3
 8005598:	d3b7      	bcc.n	800550a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800559a:	2300      	movs	r3, #0
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	e043      	b.n	8005628 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055b6:	d118      	bne.n	80055ea <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ca:	461a      	mov	r2, r3
 80055cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	e013      	b.n	80055fc <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	461a      	mov	r2, r3
 80055e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	e008      	b.n	80055fc <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	461a      	mov	r2, r3
 80055f8:	2300      	movs	r3, #0
 80055fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005608:	461a      	mov	r2, r3
 800560a:	2300      	movs	r3, #0
 800560c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561a:	461a      	mov	r2, r3
 800561c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005620:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	3301      	adds	r3, #1
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	429a      	cmp	r2, r3
 800562e:	d3b7      	bcc.n	80055a0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800563e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005642:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005650:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	2b00      	cmp	r3, #0
 8005656:	d105      	bne.n	8005664 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f043 0210 	orr.w	r2, r3, #16
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699a      	ldr	r2, [r3, #24]
 8005668:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <USB_DevInit+0x2d4>)
 800566a:	4313      	orrs	r3, r2
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f043 0208 	orr.w	r2, r3, #8
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005684:	2b01      	cmp	r3, #1
 8005686:	d105      	bne.n	8005694 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <USB_DevInit+0x2d8>)
 800568e:	4313      	orrs	r3, r2
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005694:	7dfb      	ldrb	r3, [r7, #23]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056a0:	b004      	add	sp, #16
 80056a2:	4770      	bx	lr
 80056a4:	803c3800 	.word	0x803c3800
 80056a8:	40000004 	.word	0x40000004

080056ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3301      	adds	r3, #1
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	4a12      	ldr	r2, [pc, #72]	; (800570c <USB_FlushTxFifo+0x60>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e01a      	b.n	8005700 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	daf3      	bge.n	80056ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	019b      	lsls	r3, r3, #6
 80056da:	f043 0220 	orr.w	r2, r3, #32
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3301      	adds	r3, #1
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	4a08      	ldr	r2, [pc, #32]	; (800570c <USB_FlushTxFifo+0x60>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e006      	b.n	8005700 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d0f1      	beq.n	80056e2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	00030d40 	.word	0x00030d40

08005710 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3301      	adds	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	4a11      	ldr	r2, [pc, #68]	; (8005768 <USB_FlushRxFifo+0x58>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d901      	bls.n	800572c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e017      	b.n	800575c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	daf3      	bge.n	800571c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2210      	movs	r2, #16
 800573c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3301      	adds	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	4a08      	ldr	r2, [pc, #32]	; (8005768 <USB_FlushRxFifo+0x58>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e006      	b.n	800575c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	2b10      	cmp	r3, #16
 8005758:	d0f1      	beq.n	800573e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	00030d40 	.word	0x00030d40

0800576c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	68f9      	ldr	r1, [r7, #12]
 8005788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800578c:	4313      	orrs	r3, r2
 800578e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800579e:	b480      	push	{r7}
 80057a0:	b087      	sub	sp, #28
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0306 	and.w	r3, r3, #6
 80057b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80057be:	2300      	movs	r3, #0
 80057c0:	75fb      	strb	r3, [r7, #23]
 80057c2:	e00a      	b.n	80057da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d002      	beq.n	80057d0 <USB_GetDevSpeed+0x32>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b06      	cmp	r3, #6
 80057ce:	d102      	bne.n	80057d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80057d0:	2302      	movs	r3, #2
 80057d2:	75fb      	strb	r3, [r7, #23]
 80057d4:	e001      	b.n	80057da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80057d6:	230f      	movs	r3, #15
 80057d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80057da:	7dfb      	ldrb	r3, [r7, #23]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d139      	bne.n	8005878 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580a:	69da      	ldr	r2, [r3, #28]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	2101      	movs	r1, #1
 8005816:	fa01 f303 	lsl.w	r3, r1, r3
 800581a:	b29b      	uxth	r3, r3
 800581c:	68f9      	ldr	r1, [r7, #12]
 800581e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005822:	4313      	orrs	r3, r2
 8005824:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d153      	bne.n	80058e4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	78db      	ldrb	r3, [r3, #3]
 8005856:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005858:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	059b      	lsls	r3, r3, #22
 800585e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005860:	431a      	orrs	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	0159      	lsls	r1, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	440b      	add	r3, r1
 800586a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586e:	4619      	mov	r1, r3
 8005870:	4b20      	ldr	r3, [pc, #128]	; (80058f4 <USB_ActivateEndpoint+0x10c>)
 8005872:	4313      	orrs	r3, r2
 8005874:	600b      	str	r3, [r1, #0]
 8005876:	e035      	b.n	80058e4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	2101      	movs	r1, #1
 800588a:	fa01 f303 	lsl.w	r3, r1, r3
 800588e:	041b      	lsls	r3, r3, #16
 8005890:	68f9      	ldr	r1, [r7, #12]
 8005892:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005896:	4313      	orrs	r3, r2
 8005898:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d119      	bne.n	80058e4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	78db      	ldrb	r3, [r3, #3]
 80058ca:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058cc:	430b      	orrs	r3, r1
 80058ce:	431a      	orrs	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	0159      	lsls	r1, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	440b      	add	r3, r1
 80058d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058dc:	4619      	mov	r1, r3
 80058de:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <USB_ActivateEndpoint+0x10c>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	10008000 	.word	0x10008000

080058f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	785b      	ldrb	r3, [r3, #1]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d161      	bne.n	80059d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800592a:	d11f      	bne.n	800596c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005946:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800594a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	0151      	lsls	r1, r2, #5
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	440a      	add	r2, r1
 8005962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005966:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800596a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	2101      	movs	r1, #1
 800597e:	fa01 f303 	lsl.w	r3, r1, r3
 8005982:	b29b      	uxth	r3, r3
 8005984:	43db      	mvns	r3, r3
 8005986:	68f9      	ldr	r1, [r7, #12]
 8005988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800598c:	4013      	ands	r3, r2
 800598e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	2101      	movs	r1, #1
 80059a2:	fa01 f303 	lsl.w	r3, r1, r3
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	43db      	mvns	r3, r3
 80059aa:	68f9      	ldr	r1, [r7, #12]
 80059ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b0:	4013      	ands	r3, r2
 80059b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	0159      	lsls	r1, r3, #5
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	440b      	add	r3, r1
 80059ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ce:	4619      	mov	r1, r3
 80059d0:	4b35      	ldr	r3, [pc, #212]	; (8005aa8 <USB_DeactivateEndpoint+0x1b0>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]
 80059d6:	e060      	b.n	8005a9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ee:	d11f      	bne.n	8005a30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	2101      	movs	r1, #1
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	041b      	lsls	r3, r3, #16
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	68f9      	ldr	r1, [r7, #12]
 8005a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a50:	4013      	ands	r3, r2
 8005a52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	f003 030f 	and.w	r3, r3, #15
 8005a64:	2101      	movs	r1, #1
 8005a66:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6a:	041b      	lsls	r3, r3, #16
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	68f9      	ldr	r1, [r7, #12]
 8005a70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a74:	4013      	ands	r3, r2
 8005a76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	0159      	lsls	r1, r3, #5
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	440b      	add	r3, r1
 8005a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a92:	4619      	mov	r1, r3
 8005a94:	4b05      	ldr	r3, [pc, #20]	; (8005aac <USB_DeactivateEndpoint+0x1b4>)
 8005a96:	4013      	ands	r3, r2
 8005a98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	ec337800 	.word	0xec337800
 8005aac:	eff37800 	.word	0xeff37800

08005ab0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08a      	sub	sp, #40	; 0x28
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	4613      	mov	r3, r2
 8005abc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	f040 8163 	bne.w	8005d98 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d132      	bne.n	8005b40 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	0159      	lsls	r1, r3, #5
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	440b      	add	r3, r1
 8005af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af4:	4619      	mov	r1, r3
 8005af6:	4ba5      	ldr	r3, [pc, #660]	; (8005d8c <USB_EPStartXfer+0x2dc>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	0151      	lsls	r1, r2, #5
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	440a      	add	r2, r1
 8005b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	0159      	lsls	r1, r3, #5
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	440b      	add	r3, r1
 8005b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b36:	4619      	mov	r1, r3
 8005b38:	4b95      	ldr	r3, [pc, #596]	; (8005d90 <USB_EPStartXfer+0x2e0>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	610b      	str	r3, [r1, #16]
 8005b3e:	e074      	b.n	8005c2a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4c:	691a      	ldr	r2, [r3, #16]
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	0159      	lsls	r1, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	440b      	add	r3, r1
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4b8c      	ldr	r3, [pc, #560]	; (8005d90 <USB_EPStartXfer+0x2e0>)
 8005b5e:	4013      	ands	r3, r2
 8005b60:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	0159      	lsls	r1, r3, #5
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	440b      	add	r3, r1
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4b83      	ldr	r3, [pc, #524]	; (8005d8c <USB_EPStartXfer+0x2dc>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b90:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6959      	ldr	r1, [r3, #20]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	440b      	add	r3, r1
 8005b9c:	1e59      	subs	r1, r3, #1
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ba6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ba8:	4b7a      	ldr	r3, [pc, #488]	; (8005d94 <USB_EPStartXfer+0x2e4>)
 8005baa:	400b      	ands	r3, r1
 8005bac:	69b9      	ldr	r1, [r7, #24]
 8005bae:	0148      	lsls	r0, r1, #5
 8005bb0:	69f9      	ldr	r1, [r7, #28]
 8005bb2:	4401      	add	r1, r0
 8005bb4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bd2:	69b9      	ldr	r1, [r7, #24]
 8005bd4:	0148      	lsls	r0, r1, #5
 8005bd6:	69f9      	ldr	r1, [r7, #28]
 8005bd8:	4401      	add	r1, r0
 8005bda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bde:	4313      	orrs	r3, r2
 8005be0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	78db      	ldrb	r3, [r3, #3]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d11f      	bne.n	8005c2a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c28:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d14b      	bne.n	8005cc8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d009      	beq.n	8005c4c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c44:	461a      	mov	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	78db      	ldrb	r3, [r3, #3]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d128      	bne.n	8005ca6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d110      	bne.n	8005c86 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	e00f      	b.n	8005ca6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	0151      	lsls	r1, r2, #5
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	e133      	b.n	8005f30 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	0151      	lsls	r1, r2, #5
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	440a      	add	r2, r1
 8005cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ce6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	78db      	ldrb	r3, [r3, #3]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d015      	beq.n	8005d1c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 811b 	beq.w	8005f30 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d10:	69f9      	ldr	r1, [r7, #28]
 8005d12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d16:	4313      	orrs	r3, r2
 8005d18:	634b      	str	r3, [r1, #52]	; 0x34
 8005d1a:	e109      	b.n	8005f30 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d110      	bne.n	8005d4e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	e00f      	b.n	8005d6e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	68d9      	ldr	r1, [r3, #12]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	781a      	ldrb	r2, [r3, #0]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	b298      	uxth	r0, r3
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	4603      	mov	r3, r0
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 fa38 	bl	80061f8 <USB_WritePacket>
 8005d88:	e0d2      	b.n	8005f30 <USB_EPStartXfer+0x480>
 8005d8a:	bf00      	nop
 8005d8c:	e007ffff 	.word	0xe007ffff
 8005d90:	fff80000 	.word	0xfff80000
 8005d94:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	0159      	lsls	r1, r3, #5
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	440b      	add	r3, r1
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	4619      	mov	r1, r3
 8005db4:	4b61      	ldr	r3, [pc, #388]	; (8005f3c <USB_EPStartXfer+0x48c>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	0159      	lsls	r1, r3, #5
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	440b      	add	r3, r1
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4b5a      	ldr	r3, [pc, #360]	; (8005f40 <USB_EPStartXfer+0x490>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d123      	bne.n	8005e2c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dfa:	69b9      	ldr	r1, [r7, #24]
 8005dfc:	0148      	lsls	r0, r1, #5
 8005dfe:	69f9      	ldr	r1, [r7, #28]
 8005e00:	4401      	add	r1, r0
 8005e02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e06:	4313      	orrs	r3, r2
 8005e08:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e28:	6113      	str	r3, [r2, #16]
 8005e2a:	e033      	b.n	8005e94 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	695a      	ldr	r2, [r3, #20]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	4413      	add	r3, r2
 8005e36:	1e5a      	subs	r2, r3, #1
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e40:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	8afb      	ldrh	r3, [r7, #22]
 8005e52:	04d9      	lsls	r1, r3, #19
 8005e54:	4b3b      	ldr	r3, [pc, #236]	; (8005f44 <USB_EPStartXfer+0x494>)
 8005e56:	400b      	ands	r3, r1
 8005e58:	69b9      	ldr	r1, [r7, #24]
 8005e5a:	0148      	lsls	r0, r1, #5
 8005e5c:	69f9      	ldr	r1, [r7, #28]
 8005e5e:	4401      	add	r1, r0
 8005e60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e64:	4313      	orrs	r3, r2
 8005e66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	8af9      	ldrh	r1, [r7, #22]
 8005e7c:	fb01 f303 	mul.w	r3, r1, r3
 8005e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e84:	69b9      	ldr	r1, [r7, #24]
 8005e86:	0148      	lsls	r0, r1, #5
 8005e88:	69f9      	ldr	r1, [r7, #28]
 8005e8a:	4401      	add	r1, r0
 8005e8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e90:	4313      	orrs	r3, r2
 8005e92:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d10d      	bne.n	8005eb6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	68d9      	ldr	r1, [r3, #12]
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb2:	460a      	mov	r2, r1
 8005eb4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	78db      	ldrb	r3, [r3, #3]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d128      	bne.n	8005f10 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d110      	bne.n	8005ef0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	e00f      	b.n	8005f10 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3720      	adds	r7, #32
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	fff80000 	.word	0xfff80000
 8005f40:	e007ffff 	.word	0xe007ffff
 8005f44:	1ff80000 	.word	0x1ff80000

08005f48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	4613      	mov	r3, r2
 8005f54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	785b      	ldrb	r3, [r3, #1]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	f040 80cd 	bne.w	8006104 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d132      	bne.n	8005fd8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	0159      	lsls	r1, r3, #5
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	440b      	add	r3, r1
 8005f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4b98      	ldr	r3, [pc, #608]	; (80061f0 <USB_EP0StartXfer+0x2a8>)
 8005f90:	4013      	ands	r3, r2
 8005f92:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	0151      	lsls	r1, r2, #5
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	440a      	add	r2, r1
 8005faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	0159      	lsls	r1, r3, #5
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	440b      	add	r3, r1
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4b88      	ldr	r3, [pc, #544]	; (80061f4 <USB_EP0StartXfer+0x2ac>)
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	610b      	str	r3, [r1, #16]
 8005fd6:	e04e      	b.n	8006076 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	0159      	lsls	r1, r3, #5
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	440b      	add	r3, r1
 8005fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4b7f      	ldr	r3, [pc, #508]	; (80061f4 <USB_EP0StartXfer+0x2ac>)
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	0159      	lsls	r1, r3, #5
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	440b      	add	r3, r1
 8006010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006014:	4619      	mov	r1, r3
 8006016:	4b76      	ldr	r3, [pc, #472]	; (80061f0 <USB_EP0StartXfer+0x2a8>)
 8006018:	4013      	ands	r3, r2
 800601a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	695a      	ldr	r2, [r3, #20]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	429a      	cmp	r2, r3
 8006026:	d903      	bls.n	8006030 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	440a      	add	r2, r1
 8006046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800604e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006066:	6939      	ldr	r1, [r7, #16]
 8006068:	0148      	lsls	r0, r1, #5
 800606a:	6979      	ldr	r1, [r7, #20]
 800606c:	4401      	add	r1, r0
 800606e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006072:	4313      	orrs	r3, r2
 8006074:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d11e      	bne.n	80060ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d009      	beq.n	8006098 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006090:	461a      	mov	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	e092      	b.n	80061e0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	0151      	lsls	r1, r2, #5
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	440a      	add	r2, r1
 80060d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d07e      	beq.n	80061e0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	2101      	movs	r1, #1
 80060f4:	fa01 f303 	lsl.w	r3, r1, r3
 80060f8:	6979      	ldr	r1, [r7, #20]
 80060fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060fe:	4313      	orrs	r3, r2
 8006100:	634b      	str	r3, [r1, #52]	; 0x34
 8006102:	e06d      	b.n	80061e0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006110:	691a      	ldr	r2, [r3, #16]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	0159      	lsls	r1, r3, #5
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	440b      	add	r3, r1
 800611a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611e:	4619      	mov	r1, r3
 8006120:	4b34      	ldr	r3, [pc, #208]	; (80061f4 <USB_EP0StartXfer+0x2ac>)
 8006122:	4013      	ands	r3, r2
 8006124:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006132:	691a      	ldr	r2, [r3, #16]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	0159      	lsls	r1, r3, #5
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	440b      	add	r3, r1
 800613c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006140:	4619      	mov	r1, r3
 8006142:	4b2b      	ldr	r3, [pc, #172]	; (80061f0 <USB_EP0StartXfer+0x2a8>)
 8006144:	4013      	ands	r3, r2
 8006146:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006172:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006176:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800618e:	6939      	ldr	r1, [r7, #16]
 8006190:	0148      	lsls	r0, r1, #5
 8006192:	6979      	ldr	r1, [r7, #20]
 8006194:	4401      	add	r1, r0
 8006196:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800619a:	4313      	orrs	r3, r2
 800619c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d10d      	bne.n	80061c0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d009      	beq.n	80061c0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	68d9      	ldr	r1, [r3, #12]
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061bc:	460a      	mov	r2, r1
 80061be:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	0151      	lsls	r1, r2, #5
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	440a      	add	r2, r1
 80061d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	e007ffff 	.word	0xe007ffff
 80061f4:	fff80000 	.word	0xfff80000

080061f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b089      	sub	sp, #36	; 0x24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	4611      	mov	r1, r2
 8006204:	461a      	mov	r2, r3
 8006206:	460b      	mov	r3, r1
 8006208:	71fb      	strb	r3, [r7, #7]
 800620a:	4613      	mov	r3, r2
 800620c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006216:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800621a:	2b00      	cmp	r3, #0
 800621c:	d123      	bne.n	8006266 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800621e:	88bb      	ldrh	r3, [r7, #4]
 8006220:	3303      	adds	r3, #3
 8006222:	089b      	lsrs	r3, r3, #2
 8006224:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006226:	2300      	movs	r3, #0
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	e018      	b.n	800625e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800622c:	79fb      	ldrb	r3, [r7, #7]
 800622e:	031a      	lsls	r2, r3, #12
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	4413      	add	r3, r2
 8006234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006238:	461a      	mov	r2, r3
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	3301      	adds	r3, #1
 8006244:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	3301      	adds	r3, #1
 800624a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	3301      	adds	r3, #1
 8006250:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	3301      	adds	r3, #1
 8006256:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	3301      	adds	r3, #1
 800625c:	61bb      	str	r3, [r7, #24]
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	429a      	cmp	r2, r3
 8006264:	d3e2      	bcc.n	800622c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3724      	adds	r7, #36	; 0x24
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006274:	b480      	push	{r7}
 8006276:	b08b      	sub	sp, #44	; 0x2c
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	4613      	mov	r3, r2
 8006280:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	089b      	lsrs	r3, r3, #2
 800628e:	b29b      	uxth	r3, r3
 8006290:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006292:	88fb      	ldrh	r3, [r7, #6]
 8006294:	f003 0303 	and.w	r3, r3, #3
 8006298:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800629a:	2300      	movs	r3, #0
 800629c:	623b      	str	r3, [r7, #32]
 800629e:	e014      	b.n	80062ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	3301      	adds	r3, #1
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	3301      	adds	r3, #1
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	3301      	adds	r3, #1
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	3301      	adds	r3, #1
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	3301      	adds	r3, #1
 80062c8:	623b      	str	r3, [r7, #32]
 80062ca:	6a3a      	ldr	r2, [r7, #32]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d3e6      	bcc.n	80062a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062d2:	8bfb      	ldrh	r3, [r7, #30]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01e      	beq.n	8006316 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e2:	461a      	mov	r2, r3
 80062e4:	f107 0310 	add.w	r3, r7, #16
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	701a      	strb	r2, [r3, #0]
      i++;
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	3301      	adds	r3, #1
 8006302:	623b      	str	r3, [r7, #32]
      pDest++;
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	3301      	adds	r3, #1
 8006308:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800630a:	8bfb      	ldrh	r3, [r7, #30]
 800630c:	3b01      	subs	r3, #1
 800630e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006310:	8bfb      	ldrh	r3, [r7, #30]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1ea      	bne.n	80062ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006318:	4618      	mov	r0, r3
 800631a:	372c      	adds	r7, #44	; 0x2c
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d12c      	bne.n	800639a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	db12      	blt.n	8006378 <USB_EPSetStall+0x54>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00f      	beq.n	8006378 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	0151      	lsls	r1, r2, #5
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	440a      	add	r2, r1
 800636e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006372:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006376:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	440a      	add	r2, r1
 800638e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	e02b      	b.n	80063f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	db12      	blt.n	80063d2 <USB_EPSetStall+0xae>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00f      	beq.n	80063d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	0151      	lsls	r1, r2, #5
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	440a      	add	r2, r1
 80063c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	0151      	lsls	r1, r2, #5
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	440a      	add	r2, r1
 80063e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	785b      	ldrb	r3, [r3, #1]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d128      	bne.n	800646e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	0151      	lsls	r1, r2, #5
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	440a      	add	r2, r1
 8006432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006436:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800643a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	78db      	ldrb	r3, [r3, #3]
 8006440:	2b03      	cmp	r3, #3
 8006442:	d003      	beq.n	800644c <USB_EPClearStall+0x4c>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	78db      	ldrb	r3, [r3, #3]
 8006448:	2b02      	cmp	r3, #2
 800644a:	d138      	bne.n	80064be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	0151      	lsls	r1, r2, #5
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	440a      	add	r2, r1
 8006462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	e027      	b.n	80064be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006488:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800648c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	78db      	ldrb	r3, [r3, #3]
 8006492:	2b03      	cmp	r3, #3
 8006494:	d003      	beq.n	800649e <USB_EPClearStall+0x9e>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	78db      	ldrb	r3, [r3, #3]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d10f      	bne.n	80064be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	0151      	lsls	r1, r2, #5
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	440a      	add	r2, r1
 80064b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	011b      	lsls	r3, r3, #4
 80064fc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006500:	68f9      	ldr	r1, [r7, #12]
 8006502:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006506:	4313      	orrs	r3, r2
 8006508:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006532:	f023 0303 	bic.w	r3, r3, #3
 8006536:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006546:	f023 0302 	bic.w	r3, r3, #2
 800654a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800655a:	b480      	push	{r7}
 800655c:	b085      	sub	sp, #20
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006574:	f023 0303 	bic.w	r3, r3, #3
 8006578:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006588:	f043 0302 	orr.w	r3, r3, #2
 800658c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4013      	ands	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065b4:	68fb      	ldr	r3, [r7, #12]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	4013      	ands	r3, r2
 80065e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	0c1b      	lsrs	r3, r3, #16
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	4013      	ands	r3, r2
 8006618:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	b29b      	uxth	r3, r3
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	460b      	mov	r3, r1
 8006634:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	4013      	ands	r3, r2
 8006656:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006658:	68bb      	ldr	r3, [r7, #8]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006666:	b480      	push	{r7}
 8006668:	b087      	sub	sp, #28
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	460b      	mov	r3, r1
 8006670:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006688:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	f003 030f 	and.w	r3, r3, #15
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	fa22 f303 	lsr.w	r3, r2, r3
 8006696:	01db      	lsls	r3, r3, #7
 8006698:	b2db      	uxtb	r3, r3
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4013      	ands	r3, r2
 80066b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066b4:	68bb      	ldr	r3, [r7, #8]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f003 0301 	and.w	r3, r3, #1
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
	...

080066e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fa:	4619      	mov	r1, r3
 80066fc:	4b09      	ldr	r3, [pc, #36]	; (8006724 <USB_ActivateSetup+0x44>)
 80066fe:	4013      	ands	r3, r2
 8006700:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006714:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	fffff800 	.word	0xfffff800

08006728 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	460b      	mov	r3, r1
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	333c      	adds	r3, #60	; 0x3c
 800673e:	3304      	adds	r3, #4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	4a26      	ldr	r2, [pc, #152]	; (80067e0 <USB_EP0_OutStart+0xb8>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d90a      	bls.n	8006762 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800675c:	d101      	bne.n	8006762 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	e037      	b.n	80067d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006768:	461a      	mov	r2, r3
 800676a:	2300      	movs	r3, #0
 800676c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800677c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006780:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006790:	f043 0318 	orr.w	r3, r3, #24
 8006794:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80067a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80067aa:	7afb      	ldrb	r3, [r7, #11]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d10f      	bne.n	80067d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b6:	461a      	mov	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80067ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	4f54300a 	.word	0x4f54300a

080067e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3301      	adds	r3, #1
 80067f4:	60fb      	str	r3, [r7, #12]
 80067f6:	4a13      	ldr	r2, [pc, #76]	; (8006844 <USB_CoreReset+0x60>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d901      	bls.n	8006800 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e01a      	b.n	8006836 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	daf3      	bge.n	80067f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	f043 0201 	orr.w	r2, r3, #1
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	4a09      	ldr	r2, [pc, #36]	; (8006844 <USB_CoreReset+0x60>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d901      	bls.n	8006828 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e006      	b.n	8006836 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b01      	cmp	r3, #1
 8006832:	d0f1      	beq.n	8006818 <USB_CoreReset+0x34>

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	00030d40 	.word	0x00030d40

08006848 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006854:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006858:	f002 fa58 	bl	8008d0c <malloc>
 800685c:	4603      	mov	r3, r0
 800685e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d105      	bne.n	8006872 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800686e:	2302      	movs	r3, #2
 8006870:	e066      	b.n	8006940 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	7c1b      	ldrb	r3, [r3, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d119      	bne.n	80068b6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006886:	2202      	movs	r2, #2
 8006888:	2181      	movs	r1, #129	; 0x81
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f002 f871 	bl	8008972 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800689a:	2202      	movs	r2, #2
 800689c:	2101      	movs	r1, #1
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f002 f867 	bl	8008972 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2210      	movs	r2, #16
 80068b0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80068b4:	e016      	b.n	80068e4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068b6:	2340      	movs	r3, #64	; 0x40
 80068b8:	2202      	movs	r2, #2
 80068ba:	2181      	movs	r1, #129	; 0x81
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f002 f858 	bl	8008972 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068c8:	2340      	movs	r3, #64	; 0x40
 80068ca:	2202      	movs	r2, #2
 80068cc:	2101      	movs	r1, #1
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f002 f84f 	bl	8008972 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2210      	movs	r2, #16
 80068e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068e4:	2308      	movs	r3, #8
 80068e6:	2203      	movs	r2, #3
 80068e8:	2182      	movs	r1, #130	; 0x82
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f002 f841 	bl	8008972 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	7c1b      	ldrb	r3, [r3, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d109      	bne.n	800692e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006924:	2101      	movs	r1, #1
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f002 f912 	bl	8008b50 <USBD_LL_PrepareReceive>
 800692c:	e007      	b.n	800693e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006934:	2340      	movs	r3, #64	; 0x40
 8006936:	2101      	movs	r1, #1
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f002 f909 	bl	8008b50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006958:	2181      	movs	r1, #129	; 0x81
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f002 f82f 	bl	80089be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006966:	2101      	movs	r1, #1
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f002 f828 	bl	80089be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006976:	2182      	movs	r1, #130	; 0x82
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f002 f820 	bl	80089be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00e      	beq.n	80069b6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a8:	4618      	mov	r0, r3
 80069aa:	f002 f9b7 	bl	8008d1c <free>
    pdev->pClassData = NULL;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069d0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d03a      	beq.n	8006a60 <USBD_CDC_Setup+0xa0>
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	f040 8097 	bne.w	8006b1e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	88db      	ldrh	r3, [r3, #6]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d029      	beq.n	8006a4c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	b25b      	sxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	da11      	bge.n	8006a26 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006a0e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	88d2      	ldrh	r2, [r2, #6]
 8006a14:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006a16:	6939      	ldr	r1, [r7, #16]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	88db      	ldrh	r3, [r3, #6]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 fad6 	bl	8007fd0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006a24:	e082      	b.n	8006b2c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	785a      	ldrb	r2, [r3, #1]
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	88db      	ldrh	r3, [r3, #6]
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006a3c:	6939      	ldr	r1, [r7, #16]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	88db      	ldrh	r3, [r3, #6]
 8006a42:	461a      	mov	r2, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 faef 	bl	8008028 <USBD_CtlPrepareRx>
    break;
 8006a4a:	e06f      	b.n	8006b2c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	7850      	ldrb	r0, [r2, #1]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	4798      	blx	r3
    break;
 8006a5e:	e065      	b.n	8006b2c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	785b      	ldrb	r3, [r3, #1]
 8006a64:	2b0b      	cmp	r3, #11
 8006a66:	d84f      	bhi.n	8006b08 <USBD_CDC_Setup+0x148>
 8006a68:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <USBD_CDC_Setup+0xb0>)
 8006a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6e:	bf00      	nop
 8006a70:	08006aa1 	.word	0x08006aa1
 8006a74:	08006b17 	.word	0x08006b17
 8006a78:	08006b09 	.word	0x08006b09
 8006a7c:	08006b09 	.word	0x08006b09
 8006a80:	08006b09 	.word	0x08006b09
 8006a84:	08006b09 	.word	0x08006b09
 8006a88:	08006b09 	.word	0x08006b09
 8006a8c:	08006b09 	.word	0x08006b09
 8006a90:	08006b09 	.word	0x08006b09
 8006a94:	08006b09 	.word	0x08006b09
 8006a98:	08006ac9 	.word	0x08006ac9
 8006a9c:	08006af1 	.word	0x08006af1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d107      	bne.n	8006aba <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006aaa:	f107 030c 	add.w	r3, r7, #12
 8006aae:	2202      	movs	r2, #2
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 fa8c 	bl	8007fd0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006ab8:	e030      	b.n	8006b1c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 fa16 	bl	8007eee <USBD_CtlError>
        ret = USBD_FAIL;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac6:	e029      	b.n	8006b1c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d107      	bne.n	8006ae2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ad2:	f107 030f 	add.w	r3, r7, #15
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 fa78 	bl	8007fd0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006ae0:	e01c      	b.n	8006b1c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 fa02 	bl	8007eee <USBD_CtlError>
        ret = USBD_FAIL;
 8006aea:	2303      	movs	r3, #3
 8006aec:	75fb      	strb	r3, [r7, #23]
      break;
 8006aee:	e015      	b.n	8006b1c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d00f      	beq.n	8006b1a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 f9f6 	bl	8007eee <USBD_CtlError>
        ret = USBD_FAIL;
 8006b02:	2303      	movs	r3, #3
 8006b04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006b06:	e008      	b.n	8006b1a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 f9ef 	bl	8007eee <USBD_CtlError>
      ret = USBD_FAIL;
 8006b10:	2303      	movs	r3, #3
 8006b12:	75fb      	strb	r3, [r7, #23]
      break;
 8006b14:	e002      	b.n	8006b1c <USBD_CDC_Setup+0x15c>
      break;
 8006b16:	bf00      	nop
 8006b18:	e008      	b.n	8006b2c <USBD_CDC_Setup+0x16c>
      break;
 8006b1a:	bf00      	nop
    }
    break;
 8006b1c:	e006      	b.n	8006b2c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 f9e4 	bl	8007eee <USBD_CtlError>
    ret = USBD_FAIL;
 8006b26:	2303      	movs	r3, #3
 8006b28:	75fb      	strb	r3, [r7, #23]
    break;
 8006b2a:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop

08006b38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e049      	b.n	8006bee <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b60:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006b62:	78fa      	ldrb	r2, [r7, #3]
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	4613      	mov	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	440b      	add	r3, r1
 8006b70:	3318      	adds	r3, #24
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d029      	beq.n	8006bcc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b78:	78fa      	ldrb	r2, [r7, #3]
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	440b      	add	r3, r1
 8006b86:	3318      	adds	r3, #24
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	78f9      	ldrb	r1, [r7, #3]
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	1a5b      	subs	r3, r3, r1
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4403      	add	r3, r0
 8006b98:	3344      	adds	r3, #68	; 0x44
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ba0:	fb03 f301 	mul.w	r3, r3, r1
 8006ba4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d110      	bne.n	8006bcc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006baa:	78fa      	ldrb	r2, [r7, #3]
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	3318      	adds	r3, #24
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bbe:	78f9      	ldrb	r1, [r7, #3]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 ffa2 	bl	8008b0e <USBD_LL_Transmit>
 8006bca:	e00f      	b.n	8006bec <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006be8:	78fa      	ldrb	r2, [r7, #3]
 8006bea:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e015      	b.n	8006c44 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c18:	78fb      	ldrb	r3, [r7, #3]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 ffb8 	bl	8008b92 <USBD_LL_GetRxDataSize>
 8006c22:	4602      	mov	r2, r0
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c3e:	4611      	mov	r1, r2
 8006c40:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c5a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d015      	beq.n	8006c92 <USBD_CDC_EP0_RxReady+0x46>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c6c:	2bff      	cmp	r3, #255	; 0xff
 8006c6e:	d010      	beq.n	8006c92 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006c7e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c86:	b292      	uxth	r2, r2
 8006c88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	22ff      	movs	r2, #255	; 0xff
 8006c8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2243      	movs	r2, #67	; 0x43
 8006ca8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006caa:	4b03      	ldr	r3, [pc, #12]	; (8006cb8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	20000094 	.word	0x20000094

08006cbc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2243      	movs	r2, #67	; 0x43
 8006cc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006cca:	4b03      	ldr	r3, [pc, #12]	; (8006cd8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	20000050 	.word	0x20000050

08006cdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2243      	movs	r2, #67	; 0x43
 8006ce8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006cea:	4b03      	ldr	r3, [pc, #12]	; (8006cf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	200000d8 	.word	0x200000d8

08006cfc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	220a      	movs	r2, #10
 8006d08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d0a:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	2000000c 	.word	0x2000000c

08006d1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e004      	b.n	8006d3a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b087      	sub	sp, #28
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d58:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d88:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006db0:	2301      	movs	r3, #1
 8006db2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e01a      	b.n	8006df8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d114      	bne.n	8006df6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006dea:	2181      	movs	r1, #129	; 0x81
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fe8e 	bl	8008b0e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e016      	b.n	8006e4c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	7c1b      	ldrb	r3, [r3, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d109      	bne.n	8006e3a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e30:	2101      	movs	r1, #1
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 fe8c 	bl	8008b50 <USBD_LL_PrepareReceive>
 8006e38:	e007      	b.n	8006e4a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e40:	2340      	movs	r3, #64	; 0x40
 8006e42:	2101      	movs	r1, #1
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 fe83 	bl	8008b50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e025      	b.n	8006eb8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	79fa      	ldrb	r2, [r7, #7]
 8006eaa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f001 fcf9 	bl	80088a4 <USBD_LL_Init>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e010      	b.n	8006efa <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee8:	f107 020e 	add.w	r2, r7, #14
 8006eec:	4610      	mov	r0, r2
 8006eee:	4798      	blx	r3
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 fd16 	bl	800893c <USBD_LL_Start>
 8006f10:	4603      	mov	r3, r0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d009      	beq.n	8006f5e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	78fa      	ldrb	r2, [r7, #3]
 8006f54:	4611      	mov	r1, r2
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	4798      	blx	r3
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d007      	beq.n	8006f8e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	78fa      	ldrb	r2, [r7, #3]
 8006f88:	4611      	mov	r1, r2
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	4798      	blx	r3
  }

  return USBD_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 ff65 	bl	8007e7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d01a      	beq.n	800700a <USBD_LL_SetupStage+0x72>
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d822      	bhi.n	800701e <USBD_LL_SetupStage+0x86>
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <USBD_LL_SetupStage+0x4a>
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d00a      	beq.n	8006ff6 <USBD_LL_SetupStage+0x5e>
 8006fe0:	e01d      	b.n	800701e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fa18 	bl	8007420 <USBD_StdDevReq>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff4:	e020      	b.n	8007038 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fa7c 	bl	80074fc <USBD_StdItfReq>
 8007004:	4603      	mov	r3, r0
 8007006:	73fb      	strb	r3, [r7, #15]
      break;
 8007008:	e016      	b.n	8007038 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 faba 	bl	800758c <USBD_StdEPReq>
 8007018:	4603      	mov	r3, r0
 800701a:	73fb      	strb	r3, [r7, #15]
      break;
 800701c:	e00c      	b.n	8007038 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007024:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007028:	b2db      	uxtb	r3, r3
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 fce5 	bl	80089fc <USBD_LL_StallEP>
 8007032:	4603      	mov	r3, r0
 8007034:	73fb      	strb	r3, [r7, #15]
      break;
 8007036:	bf00      	nop
  }

  return ret;
 8007038:	7bfb      	ldrb	r3, [r7, #15]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b086      	sub	sp, #24
 8007046:	af00      	add	r7, sp, #0
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	460b      	mov	r3, r1
 800704c:	607a      	str	r2, [r7, #4]
 800704e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007050:	7afb      	ldrb	r3, [r7, #11]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d137      	bne.n	80070c6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800705c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007064:	2b03      	cmp	r3, #3
 8007066:	d14a      	bne.n	80070fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	429a      	cmp	r2, r3
 8007072:	d913      	bls.n	800709c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	1ad2      	subs	r2, r2, r3
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	4293      	cmp	r3, r2
 800708c:	bf28      	it	cs
 800708e:	4613      	movcs	r3, r2
 8007090:	461a      	mov	r2, r3
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 ffe4 	bl	8008062 <USBD_CtlContinueRx>
 800709a:	e030      	b.n	80070fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d105      	bne.n	80070be <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 ffe0 	bl	8008084 <USBD_CtlSendStatus>
 80070c4:	e01b      	b.n	80070fe <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d013      	beq.n	80070fa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80070d8:	2b03      	cmp	r3, #3
 80070da:	d10e      	bne.n	80070fa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	7afa      	ldrb	r2, [r7, #11]
 80070e6:	4611      	mov	r1, r2
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	4798      	blx	r3
 80070ec:	4603      	mov	r3, r0
 80070ee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	e002      	b.n	8007100 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e000      	b.n	8007100 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	460b      	mov	r3, r1
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007116:	7afb      	ldrb	r3, [r7, #11]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d16a      	bne.n	80071f2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	3314      	adds	r3, #20
 8007120:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007128:	2b02      	cmp	r3, #2
 800712a:	d155      	bne.n	80071d8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	429a      	cmp	r2, r3
 8007136:	d914      	bls.n	8007162 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	1ad2      	subs	r2, r2, r3
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	461a      	mov	r2, r3
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 ff59 	bl	8008006 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007154:	2300      	movs	r3, #0
 8007156:	2200      	movs	r2, #0
 8007158:	2100      	movs	r1, #0
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f001 fcf8 	bl	8008b50 <USBD_LL_PrepareReceive>
 8007160:	e03a      	b.n	80071d8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	429a      	cmp	r2, r3
 800716c:	d11c      	bne.n	80071a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007176:	429a      	cmp	r2, r3
 8007178:	d316      	bcc.n	80071a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007184:	429a      	cmp	r2, r3
 8007186:	d20f      	bcs.n	80071a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007188:	2200      	movs	r2, #0
 800718a:	2100      	movs	r1, #0
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 ff3a 	bl	8008006 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800719a:	2300      	movs	r3, #0
 800719c:	2200      	movs	r2, #0
 800719e:	2100      	movs	r1, #0
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f001 fcd5 	bl	8008b50 <USBD_LL_PrepareReceive>
 80071a6:	e017      	b.n	80071d8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00a      	beq.n	80071ca <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d105      	bne.n	80071ca <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071ca:	2180      	movs	r1, #128	; 0x80
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f001 fc15 	bl	80089fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 ff69 	bl	80080aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d123      	bne.n	800722a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f7ff fe99 	bl	8006f1a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071f0:	e01b      	b.n	800722a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d013      	beq.n	8007226 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007204:	2b03      	cmp	r3, #3
 8007206:	d10e      	bne.n	8007226 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	7afa      	ldrb	r2, [r7, #11]
 8007212:	4611      	mov	r1, r2
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	4798      	blx	r3
 8007218:	4603      	mov	r3, r0
 800721a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007222:	7dfb      	ldrb	r3, [r7, #23]
 8007224:	e002      	b.n	800722c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007226:	2303      	movs	r3, #3
 8007228:	e000      	b.n	800722c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007260:	2b00      	cmp	r3, #0
 8007262:	d009      	beq.n	8007278 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6852      	ldr	r2, [r2, #4]
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	4611      	mov	r1, r2
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007278:	2340      	movs	r3, #64	; 0x40
 800727a:	2200      	movs	r2, #0
 800727c:	2100      	movs	r1, #0
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 fb77 	bl	8008972 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2240      	movs	r2, #64	; 0x40
 8007290:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007294:	2340      	movs	r3, #64	; 0x40
 8007296:	2200      	movs	r2, #0
 8007298:	2180      	movs	r1, #128	; 0x80
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f001 fb69 	bl	8008972 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2240      	movs	r2, #64	; 0x40
 80072aa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	460b      	mov	r3, r1
 80072c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	78fa      	ldrb	r2, [r7, #3]
 80072c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b083      	sub	sp, #12
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2204      	movs	r2, #4
 80072ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730e:	2b04      	cmp	r3, #4
 8007310:	d105      	bne.n	800731e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733a:	2b03      	cmp	r3, #3
 800733c:	d10b      	bne.n	8007356 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d005      	beq.n	8007356 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	460b      	mov	r3, r1
 8007384:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b082      	sub	sp, #8
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d009      	beq.n	80073d8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	6852      	ldr	r2, [r2, #4]
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	4611      	mov	r1, r2
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	4798      	blx	r3
  }

  return USBD_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b087      	sub	sp, #28
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	3301      	adds	r3, #1
 80073f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007400:	8a3b      	ldrh	r3, [r7, #16]
 8007402:	021b      	lsls	r3, r3, #8
 8007404:	b21a      	sxth	r2, r3
 8007406:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800740a:	4313      	orrs	r3, r2
 800740c:	b21b      	sxth	r3, r3
 800740e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007410:	89fb      	ldrh	r3, [r7, #14]
}
 8007412:	4618      	mov	r0, r3
 8007414:	371c      	adds	r7, #28
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
	...

08007420 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007436:	2b40      	cmp	r3, #64	; 0x40
 8007438:	d005      	beq.n	8007446 <USBD_StdDevReq+0x26>
 800743a:	2b40      	cmp	r3, #64	; 0x40
 800743c:	d853      	bhi.n	80074e6 <USBD_StdDevReq+0xc6>
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00b      	beq.n	800745a <USBD_StdDevReq+0x3a>
 8007442:	2b20      	cmp	r3, #32
 8007444:	d14f      	bne.n	80074e6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	4798      	blx	r3
 8007454:	4603      	mov	r3, r0
 8007456:	73fb      	strb	r3, [r7, #15]
    break;
 8007458:	e04a      	b.n	80074f0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	785b      	ldrb	r3, [r3, #1]
 800745e:	2b09      	cmp	r3, #9
 8007460:	d83b      	bhi.n	80074da <USBD_StdDevReq+0xba>
 8007462:	a201      	add	r2, pc, #4	; (adr r2, 8007468 <USBD_StdDevReq+0x48>)
 8007464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007468:	080074bd 	.word	0x080074bd
 800746c:	080074d1 	.word	0x080074d1
 8007470:	080074db 	.word	0x080074db
 8007474:	080074c7 	.word	0x080074c7
 8007478:	080074db 	.word	0x080074db
 800747c:	0800749b 	.word	0x0800749b
 8007480:	08007491 	.word	0x08007491
 8007484:	080074db 	.word	0x080074db
 8007488:	080074b3 	.word	0x080074b3
 800748c:	080074a5 	.word	0x080074a5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f9d8 	bl	8007848 <USBD_GetDescriptor>
      break;
 8007498:	e024      	b.n	80074e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fb67 	bl	8007b70 <USBD_SetAddress>
      break;
 80074a2:	e01f      	b.n	80074e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fba6 	bl	8007bf8 <USBD_SetConfig>
 80074ac:	4603      	mov	r3, r0
 80074ae:	73fb      	strb	r3, [r7, #15]
      break;
 80074b0:	e018      	b.n	80074e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fc43 	bl	8007d40 <USBD_GetConfig>
      break;
 80074ba:	e013      	b.n	80074e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fc73 	bl	8007daa <USBD_GetStatus>
      break;
 80074c4:	e00e      	b.n	80074e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fca1 	bl	8007e10 <USBD_SetFeature>
      break;
 80074ce:	e009      	b.n	80074e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fcb0 	bl	8007e38 <USBD_ClrFeature>
      break;
 80074d8:	e004      	b.n	80074e4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fd06 	bl	8007eee <USBD_CtlError>
      break;
 80074e2:	bf00      	nop
    }
    break;
 80074e4:	e004      	b.n	80074f0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fd00 	bl	8007eee <USBD_CtlError>
    break;
 80074ee:	bf00      	nop
  }

  return ret;
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop

080074fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007512:	2b40      	cmp	r3, #64	; 0x40
 8007514:	d005      	beq.n	8007522 <USBD_StdItfReq+0x26>
 8007516:	2b40      	cmp	r3, #64	; 0x40
 8007518:	d82e      	bhi.n	8007578 <USBD_StdItfReq+0x7c>
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <USBD_StdItfReq+0x26>
 800751e:	2b20      	cmp	r3, #32
 8007520:	d12a      	bne.n	8007578 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007528:	3b01      	subs	r3, #1
 800752a:	2b02      	cmp	r3, #2
 800752c:	d81d      	bhi.n	800756a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	889b      	ldrh	r3, [r3, #4]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b01      	cmp	r3, #1
 8007536:	d813      	bhi.n	8007560 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	4798      	blx	r3
 8007546:	4603      	mov	r3, r0
 8007548:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	88db      	ldrh	r3, [r3, #6]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d110      	bne.n	8007574 <USBD_StdItfReq+0x78>
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10d      	bne.n	8007574 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fd93 	bl	8008084 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800755e:	e009      	b.n	8007574 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fcc3 	bl	8007eee <USBD_CtlError>
      break;
 8007568:	e004      	b.n	8007574 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fcbe 	bl	8007eee <USBD_CtlError>
      break;
 8007572:	e000      	b.n	8007576 <USBD_StdItfReq+0x7a>
      break;
 8007574:	bf00      	nop
    }
    break;
 8007576:	e004      	b.n	8007582 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fcb7 	bl	8007eee <USBD_CtlError>
    break;
 8007580:	bf00      	nop
  }

  return ret;
 8007582:	7bfb      	ldrb	r3, [r7, #15]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	889b      	ldrh	r3, [r3, #4]
 800759e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075a8:	2b40      	cmp	r3, #64	; 0x40
 80075aa:	d007      	beq.n	80075bc <USBD_StdEPReq+0x30>
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	f200 8140 	bhi.w	8007832 <USBD_StdEPReq+0x2a6>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00c      	beq.n	80075d0 <USBD_StdEPReq+0x44>
 80075b6:	2b20      	cmp	r3, #32
 80075b8:	f040 813b 	bne.w	8007832 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	4798      	blx	r3
 80075ca:	4603      	mov	r3, r0
 80075cc:	73fb      	strb	r3, [r7, #15]
    break;
 80075ce:	e135      	b.n	800783c <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	785b      	ldrb	r3, [r3, #1]
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d007      	beq.n	80075e8 <USBD_StdEPReq+0x5c>
 80075d8:	2b03      	cmp	r3, #3
 80075da:	f300 8124 	bgt.w	8007826 <USBD_StdEPReq+0x29a>
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d07b      	beq.n	80076da <USBD_StdEPReq+0x14e>
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d03b      	beq.n	800765e <USBD_StdEPReq+0xd2>
 80075e6:	e11e      	b.n	8007826 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d002      	beq.n	80075f8 <USBD_StdEPReq+0x6c>
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d016      	beq.n	8007624 <USBD_StdEPReq+0x98>
 80075f6:	e02c      	b.n	8007652 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00d      	beq.n	800761a <USBD_StdEPReq+0x8e>
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
 8007600:	2b80      	cmp	r3, #128	; 0x80
 8007602:	d00a      	beq.n	800761a <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007604:	7bbb      	ldrb	r3, [r7, #14]
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 f9f7 	bl	80089fc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800760e:	2180      	movs	r1, #128	; 0x80
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 f9f3 	bl	80089fc <USBD_LL_StallEP>
 8007616:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007618:	e020      	b.n	800765c <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800761a:	6839      	ldr	r1, [r7, #0]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fc66 	bl	8007eee <USBD_CtlError>
        break;
 8007622:	e01b      	b.n	800765c <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	885b      	ldrh	r3, [r3, #2]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10e      	bne.n	800764a <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800762c:	7bbb      	ldrb	r3, [r7, #14]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00b      	beq.n	800764a <USBD_StdEPReq+0xbe>
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	2b80      	cmp	r3, #128	; 0x80
 8007636:	d008      	beq.n	800764a <USBD_StdEPReq+0xbe>
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	88db      	ldrh	r3, [r3, #6]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d104      	bne.n	800764a <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 f9d9 	bl	80089fc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fd1a 	bl	8008084 <USBD_CtlSendStatus>

        break;
 8007650:	e004      	b.n	800765c <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fc4a 	bl	8007eee <USBD_CtlError>
        break;
 800765a:	bf00      	nop
      }
      break;
 800765c:	e0e8      	b.n	8007830 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007664:	2b02      	cmp	r3, #2
 8007666:	d002      	beq.n	800766e <USBD_StdEPReq+0xe2>
 8007668:	2b03      	cmp	r3, #3
 800766a:	d016      	beq.n	800769a <USBD_StdEPReq+0x10e>
 800766c:	e02e      	b.n	80076cc <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800766e:	7bbb      	ldrb	r3, [r7, #14]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00d      	beq.n	8007690 <USBD_StdEPReq+0x104>
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	2b80      	cmp	r3, #128	; 0x80
 8007678:	d00a      	beq.n	8007690 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 f9bc 	bl	80089fc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007684:	2180      	movs	r1, #128	; 0x80
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 f9b8 	bl	80089fc <USBD_LL_StallEP>
 800768c:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800768e:	e023      	b.n	80076d8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fc2b 	bl	8007eee <USBD_CtlError>
        break;
 8007698:	e01e      	b.n	80076d8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	885b      	ldrh	r3, [r3, #2]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d119      	bne.n	80076d6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d004      	beq.n	80076b6 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 f9c2 	bl	8008a3a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fce4 	bl	8008084 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	4798      	blx	r3
        }
        break;
 80076ca:	e004      	b.n	80076d6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fc0d 	bl	8007eee <USBD_CtlError>
        break;
 80076d4:	e000      	b.n	80076d8 <USBD_StdEPReq+0x14c>
        break;
 80076d6:	bf00      	nop
      }
      break;
 80076d8:	e0aa      	b.n	8007830 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d002      	beq.n	80076ea <USBD_StdEPReq+0x15e>
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d032      	beq.n	800774e <USBD_StdEPReq+0x1c2>
 80076e8:	e097      	b.n	800781a <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d007      	beq.n	8007700 <USBD_StdEPReq+0x174>
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	2b80      	cmp	r3, #128	; 0x80
 80076f4:	d004      	beq.n	8007700 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fbf8 	bl	8007eee <USBD_CtlError>
          break;
 80076fe:	e091      	b.n	8007824 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007704:	2b00      	cmp	r3, #0
 8007706:	da0b      	bge.n	8007720 <USBD_StdEPReq+0x194>
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	3310      	adds	r3, #16
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	4413      	add	r3, r2
 800771c:	3304      	adds	r3, #4
 800771e:	e00b      	b.n	8007738 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007726:	4613      	mov	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	4413      	add	r3, r2
 8007736:	3304      	adds	r3, #4
 8007738:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2202      	movs	r2, #2
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fc42 	bl	8007fd0 <USBD_CtlSendData>
        break;
 800774c:	e06a      	b.n	8007824 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800774e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007752:	2b00      	cmp	r3, #0
 8007754:	da11      	bge.n	800777a <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	f003 020f 	and.w	r2, r3, #15
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	4613      	mov	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	440b      	add	r3, r1
 8007768:	3324      	adds	r3, #36	; 0x24
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d117      	bne.n	80077a0 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fbbb 	bl	8007eee <USBD_CtlError>
            break;
 8007778:	e054      	b.n	8007824 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800777a:	7bbb      	ldrb	r3, [r7, #14]
 800777c:	f003 020f 	and.w	r2, r3, #15
 8007780:	6879      	ldr	r1, [r7, #4]
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	440b      	add	r3, r1
 800778c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d104      	bne.n	80077a0 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fba8 	bl	8007eee <USBD_CtlError>
            break;
 800779e:	e041      	b.n	8007824 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	da0b      	bge.n	80077c0 <USBD_StdEPReq+0x234>
 80077a8:	7bbb      	ldrb	r3, [r7, #14]
 80077aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077ae:	4613      	mov	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	3310      	adds	r3, #16
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	4413      	add	r3, r2
 80077bc:	3304      	adds	r3, #4
 80077be:	e00b      	b.n	80077d8 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077c6:	4613      	mov	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	4413      	add	r3, r2
 80077d6:	3304      	adds	r3, #4
 80077d8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <USBD_StdEPReq+0x25a>
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	2b80      	cmp	r3, #128	; 0x80
 80077e4:	d103      	bne.n	80077ee <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]
 80077ec:	e00e      	b.n	800780c <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 f940 	bl	8008a78 <USBD_LL_IsStallEP>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2201      	movs	r2, #1
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	e002      	b.n	800780c <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2202      	movs	r2, #2
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fbdc 	bl	8007fd0 <USBD_CtlSendData>
          break;
 8007818:	e004      	b.n	8007824 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fb66 	bl	8007eee <USBD_CtlError>
        break;
 8007822:	bf00      	nop
      }
      break;
 8007824:	e004      	b.n	8007830 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fb60 	bl	8007eee <USBD_CtlError>
      break;
 800782e:	bf00      	nop
    }
    break;
 8007830:	e004      	b.n	800783c <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fb5a 	bl	8007eee <USBD_CtlError>
    break;
 800783a:	bf00      	nop
  }

  return ret;
 800783c:	7bfb      	ldrb	r3, [r7, #15]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007856:	2300      	movs	r3, #0
 8007858:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	885b      	ldrh	r3, [r3, #2]
 8007862:	0a1b      	lsrs	r3, r3, #8
 8007864:	b29b      	uxth	r3, r3
 8007866:	3b01      	subs	r3, #1
 8007868:	2b0e      	cmp	r3, #14
 800786a:	f200 8152 	bhi.w	8007b12 <USBD_GetDescriptor+0x2ca>
 800786e:	a201      	add	r2, pc, #4	; (adr r2, 8007874 <USBD_GetDescriptor+0x2c>)
 8007870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007874:	080078e5 	.word	0x080078e5
 8007878:	080078fd 	.word	0x080078fd
 800787c:	0800793d 	.word	0x0800793d
 8007880:	08007b13 	.word	0x08007b13
 8007884:	08007b13 	.word	0x08007b13
 8007888:	08007ab3 	.word	0x08007ab3
 800788c:	08007adf 	.word	0x08007adf
 8007890:	08007b13 	.word	0x08007b13
 8007894:	08007b13 	.word	0x08007b13
 8007898:	08007b13 	.word	0x08007b13
 800789c:	08007b13 	.word	0x08007b13
 80078a0:	08007b13 	.word	0x08007b13
 80078a4:	08007b13 	.word	0x08007b13
 80078a8:	08007b13 	.word	0x08007b13
 80078ac:	080078b1 	.word	0x080078b1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00b      	beq.n	80078d4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	7c12      	ldrb	r2, [r2, #16]
 80078c8:	f107 0108 	add.w	r1, r7, #8
 80078cc:	4610      	mov	r0, r2
 80078ce:	4798      	blx	r3
 80078d0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80078d2:	e126      	b.n	8007b22 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fb09 	bl	8007eee <USBD_CtlError>
      err++;
 80078dc:	7afb      	ldrb	r3, [r7, #11]
 80078de:	3301      	adds	r3, #1
 80078e0:	72fb      	strb	r3, [r7, #11]
    break;
 80078e2:	e11e      	b.n	8007b22 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	7c12      	ldrb	r2, [r2, #16]
 80078f0:	f107 0108 	add.w	r1, r7, #8
 80078f4:	4610      	mov	r0, r2
 80078f6:	4798      	blx	r3
 80078f8:	60f8      	str	r0, [r7, #12]
    break;
 80078fa:	e112      	b.n	8007b22 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	7c1b      	ldrb	r3, [r3, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10d      	bne.n	8007920 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790c:	f107 0208 	add.w	r2, r7, #8
 8007910:	4610      	mov	r0, r2
 8007912:	4798      	blx	r3
 8007914:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3301      	adds	r3, #1
 800791a:	2202      	movs	r2, #2
 800791c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800791e:	e100      	b.n	8007b22 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	f107 0208 	add.w	r2, r7, #8
 800792c:	4610      	mov	r0, r2
 800792e:	4798      	blx	r3
 8007930:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3301      	adds	r3, #1
 8007936:	2202      	movs	r2, #2
 8007938:	701a      	strb	r2, [r3, #0]
    break;
 800793a:	e0f2      	b.n	8007b22 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	885b      	ldrh	r3, [r3, #2]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b05      	cmp	r3, #5
 8007944:	f200 80ac 	bhi.w	8007aa0 <USBD_GetDescriptor+0x258>
 8007948:	a201      	add	r2, pc, #4	; (adr r2, 8007950 <USBD_GetDescriptor+0x108>)
 800794a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794e:	bf00      	nop
 8007950:	08007969 	.word	0x08007969
 8007954:	0800799d 	.word	0x0800799d
 8007958:	080079d1 	.word	0x080079d1
 800795c:	08007a05 	.word	0x08007a05
 8007960:	08007a39 	.word	0x08007a39
 8007964:	08007a6d 	.word	0x08007a6d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00b      	beq.n	800798c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	7c12      	ldrb	r2, [r2, #16]
 8007980:	f107 0108 	add.w	r1, r7, #8
 8007984:	4610      	mov	r0, r2
 8007986:	4798      	blx	r3
 8007988:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800798a:	e091      	b.n	8007ab0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 faad 	bl	8007eee <USBD_CtlError>
        err++;
 8007994:	7afb      	ldrb	r3, [r7, #11]
 8007996:	3301      	adds	r3, #1
 8007998:	72fb      	strb	r3, [r7, #11]
      break;
 800799a:	e089      	b.n	8007ab0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00b      	beq.n	80079c0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	7c12      	ldrb	r2, [r2, #16]
 80079b4:	f107 0108 	add.w	r1, r7, #8
 80079b8:	4610      	mov	r0, r2
 80079ba:	4798      	blx	r3
 80079bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079be:	e077      	b.n	8007ab0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa93 	bl	8007eee <USBD_CtlError>
        err++;
 80079c8:	7afb      	ldrb	r3, [r7, #11]
 80079ca:	3301      	adds	r3, #1
 80079cc:	72fb      	strb	r3, [r7, #11]
      break;
 80079ce:	e06f      	b.n	8007ab0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00b      	beq.n	80079f4 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	7c12      	ldrb	r2, [r2, #16]
 80079e8:	f107 0108 	add.w	r1, r7, #8
 80079ec:	4610      	mov	r0, r2
 80079ee:	4798      	blx	r3
 80079f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079f2:	e05d      	b.n	8007ab0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fa79 	bl	8007eee <USBD_CtlError>
        err++;
 80079fc:	7afb      	ldrb	r3, [r7, #11]
 80079fe:	3301      	adds	r3, #1
 8007a00:	72fb      	strb	r3, [r7, #11]
      break;
 8007a02:	e055      	b.n	8007ab0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00b      	beq.n	8007a28 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	7c12      	ldrb	r2, [r2, #16]
 8007a1c:	f107 0108 	add.w	r1, r7, #8
 8007a20:	4610      	mov	r0, r2
 8007a22:	4798      	blx	r3
 8007a24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a26:	e043      	b.n	8007ab0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fa5f 	bl	8007eee <USBD_CtlError>
        err++;
 8007a30:	7afb      	ldrb	r3, [r7, #11]
 8007a32:	3301      	adds	r3, #1
 8007a34:	72fb      	strb	r3, [r7, #11]
      break;
 8007a36:	e03b      	b.n	8007ab0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	7c12      	ldrb	r2, [r2, #16]
 8007a50:	f107 0108 	add.w	r1, r7, #8
 8007a54:	4610      	mov	r0, r2
 8007a56:	4798      	blx	r3
 8007a58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a5a:	e029      	b.n	8007ab0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fa45 	bl	8007eee <USBD_CtlError>
        err++;
 8007a64:	7afb      	ldrb	r3, [r7, #11]
 8007a66:	3301      	adds	r3, #1
 8007a68:	72fb      	strb	r3, [r7, #11]
      break;
 8007a6a:	e021      	b.n	8007ab0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00b      	beq.n	8007a90 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	7c12      	ldrb	r2, [r2, #16]
 8007a84:	f107 0108 	add.w	r1, r7, #8
 8007a88:	4610      	mov	r0, r2
 8007a8a:	4798      	blx	r3
 8007a8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a8e:	e00f      	b.n	8007ab0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa2b 	bl	8007eee <USBD_CtlError>
        err++;
 8007a98:	7afb      	ldrb	r3, [r7, #11]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	72fb      	strb	r3, [r7, #11]
      break;
 8007a9e:	e007      	b.n	8007ab0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fa23 	bl	8007eee <USBD_CtlError>
      err++;
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007aae:	bf00      	nop
    }
    break;
 8007ab0:	e037      	b.n	8007b22 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	7c1b      	ldrb	r3, [r3, #16]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac2:	f107 0208 	add.w	r2, r7, #8
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	4798      	blx	r3
 8007aca:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007acc:	e029      	b.n	8007b22 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fa0c 	bl	8007eee <USBD_CtlError>
      err++;
 8007ad6:	7afb      	ldrb	r3, [r7, #11]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	72fb      	strb	r3, [r7, #11]
    break;
 8007adc:	e021      	b.n	8007b22 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	7c1b      	ldrb	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10d      	bne.n	8007b02 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aee:	f107 0208 	add.w	r2, r7, #8
 8007af2:	4610      	mov	r0, r2
 8007af4:	4798      	blx	r3
 8007af6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3301      	adds	r3, #1
 8007afc:	2207      	movs	r2, #7
 8007afe:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007b00:	e00f      	b.n	8007b22 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f9f2 	bl	8007eee <USBD_CtlError>
      err++;
 8007b0a:	7afb      	ldrb	r3, [r7, #11]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	72fb      	strb	r3, [r7, #11]
    break;
 8007b10:	e007      	b.n	8007b22 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f9ea 	bl	8007eee <USBD_CtlError>
    err++;
 8007b1a:	7afb      	ldrb	r3, [r7, #11]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	72fb      	strb	r3, [r7, #11]
    break;
 8007b20:	bf00      	nop
  }

  if (err != 0U)
 8007b22:	7afb      	ldrb	r3, [r7, #11]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d11e      	bne.n	8007b66 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	88db      	ldrh	r3, [r3, #6]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d016      	beq.n	8007b5e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007b30:	893b      	ldrh	r3, [r7, #8]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00e      	beq.n	8007b54 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	88da      	ldrh	r2, [r3, #6]
 8007b3a:	893b      	ldrh	r3, [r7, #8]
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	bf28      	it	cs
 8007b40:	4613      	movcs	r3, r2
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b46:	893b      	ldrh	r3, [r7, #8]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	68f9      	ldr	r1, [r7, #12]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fa3f 	bl	8007fd0 <USBD_CtlSendData>
 8007b52:	e009      	b.n	8007b68 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f9c9 	bl	8007eee <USBD_CtlError>
 8007b5c:	e004      	b.n	8007b68 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fa90 	bl	8008084 <USBD_CtlSendStatus>
 8007b64:	e000      	b.n	8007b68 <USBD_GetDescriptor+0x320>
    return;
 8007b66:	bf00      	nop
    }
  }
}
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop

08007b70 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	889b      	ldrh	r3, [r3, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d130      	bne.n	8007be4 <USBD_SetAddress+0x74>
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	88db      	ldrh	r3, [r3, #6]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d12c      	bne.n	8007be4 <USBD_SetAddress+0x74>
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	885b      	ldrh	r3, [r3, #2]
 8007b8e:	2b7f      	cmp	r3, #127	; 0x7f
 8007b90:	d828      	bhi.n	8007be4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	885b      	ldrh	r3, [r3, #2]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d104      	bne.n	8007bb2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f99f 	bl	8007eee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb0:	e01d      	b.n	8007bee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	7bfa      	ldrb	r2, [r7, #15]
 8007bb6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 ff86 	bl	8008ad0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fa5d 	bl	8008084 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d004      	beq.n	8007bda <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd8:	e009      	b.n	8007bee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be2:	e004      	b.n	8007bee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f981 	bl	8007eee <USBD_CtlError>
  }
}
 8007bec:	bf00      	nop
 8007bee:	bf00      	nop
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	885b      	ldrh	r3, [r3, #2]
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	4b4b      	ldr	r3, [pc, #300]	; (8007d3c <USBD_SetConfig+0x144>)
 8007c0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c10:	4b4a      	ldr	r3, [pc, #296]	; (8007d3c <USBD_SetConfig+0x144>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d905      	bls.n	8007c24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f967 	bl	8007eee <USBD_CtlError>
    return USBD_FAIL;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e087      	b.n	8007d34 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d002      	beq.n	8007c34 <USBD_SetConfig+0x3c>
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d025      	beq.n	8007c7e <USBD_SetConfig+0x86>
 8007c32:	e071      	b.n	8007d18 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007c34:	4b41      	ldr	r3, [pc, #260]	; (8007d3c <USBD_SetConfig+0x144>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01c      	beq.n	8007c76 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007c3c:	4b3f      	ldr	r3, [pc, #252]	; (8007d3c <USBD_SetConfig+0x144>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c46:	4b3d      	ldr	r3, [pc, #244]	; (8007d3c <USBD_SetConfig+0x144>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7ff f96f 	bl	8006f30 <USBD_SetClassConfig>
 8007c52:	4603      	mov	r3, r0
 8007c54:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d004      	beq.n	8007c66 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f945 	bl	8007eee <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007c64:	e065      	b.n	8007d32 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa0c 	bl	8008084 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2203      	movs	r2, #3
 8007c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007c74:	e05d      	b.n	8007d32 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fa04 	bl	8008084 <USBD_CtlSendStatus>
    break;
 8007c7c:	e059      	b.n	8007d32 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007c7e:	4b2f      	ldr	r3, [pc, #188]	; (8007d3c <USBD_SetConfig+0x144>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d112      	bne.n	8007cac <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007c8e:	4b2b      	ldr	r3, [pc, #172]	; (8007d3c <USBD_SetConfig+0x144>)
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c98:	4b28      	ldr	r3, [pc, #160]	; (8007d3c <USBD_SetConfig+0x144>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7ff f962 	bl	8006f68 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f9ed 	bl	8008084 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007caa:	e042      	b.n	8007d32 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007cac:	4b23      	ldr	r3, [pc, #140]	; (8007d3c <USBD_SetConfig+0x144>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d02a      	beq.n	8007d10 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff f950 	bl	8006f68 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007cc8:	4b1c      	ldr	r3, [pc, #112]	; (8007d3c <USBD_SetConfig+0x144>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cd2:	4b1a      	ldr	r3, [pc, #104]	; (8007d3c <USBD_SetConfig+0x144>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff f929 	bl	8006f30 <USBD_SetClassConfig>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00f      	beq.n	8007d08 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f8ff 	bl	8007eee <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7ff f935 	bl	8006f68 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2202      	movs	r2, #2
 8007d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007d06:	e014      	b.n	8007d32 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f9bb 	bl	8008084 <USBD_CtlSendStatus>
    break;
 8007d0e:	e010      	b.n	8007d32 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f9b7 	bl	8008084 <USBD_CtlSendStatus>
    break;
 8007d16:	e00c      	b.n	8007d32 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f8e7 	bl	8007eee <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d20:	4b06      	ldr	r3, [pc, #24]	; (8007d3c <USBD_SetConfig+0x144>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7ff f91e 	bl	8006f68 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d30:	bf00      	nop
  }

  return ret;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	20000214 	.word	0x20000214

08007d40 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	88db      	ldrh	r3, [r3, #6]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d004      	beq.n	8007d5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f8ca 	bl	8007eee <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007d5a:	e022      	b.n	8007da2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	dc02      	bgt.n	8007d6c <USBD_GetConfig+0x2c>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	dc03      	bgt.n	8007d72 <USBD_GetConfig+0x32>
 8007d6a:	e015      	b.n	8007d98 <USBD_GetConfig+0x58>
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d00b      	beq.n	8007d88 <USBD_GetConfig+0x48>
 8007d70:	e012      	b.n	8007d98 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f925 	bl	8007fd0 <USBD_CtlSendData>
      break;
 8007d86:	e00c      	b.n	8007da2 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f91d 	bl	8007fd0 <USBD_CtlSendData>
      break;
 8007d96:	e004      	b.n	8007da2 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f8a7 	bl	8007eee <USBD_CtlError>
      break;
 8007da0:	bf00      	nop
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d81e      	bhi.n	8007dfe <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	88db      	ldrh	r3, [r3, #6]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d004      	beq.n	8007dd2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f88f 	bl	8007eee <USBD_CtlError>
      break;
 8007dd0:	e01a      	b.n	8007e08 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d005      	beq.n	8007dee <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f043 0202 	orr.w	r2, r3, #2
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	330c      	adds	r3, #12
 8007df2:	2202      	movs	r2, #2
 8007df4:	4619      	mov	r1, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f8ea 	bl	8007fd0 <USBD_CtlSendData>
    break;
 8007dfc:	e004      	b.n	8007e08 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f874 	bl	8007eee <USBD_CtlError>
    break;
 8007e06:	bf00      	nop
  }
}
 8007e08:	bf00      	nop
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	885b      	ldrh	r3, [r3, #2]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d106      	bne.n	8007e30 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f92a 	bl	8008084 <USBD_CtlSendStatus>
  }
}
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d80b      	bhi.n	8007e66 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	885b      	ldrh	r3, [r3, #2]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d10c      	bne.n	8007e70 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f910 	bl	8008084 <USBD_CtlSendStatus>
      }
      break;
 8007e64:	e004      	b.n	8007e70 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f840 	bl	8007eee <USBD_CtlError>
      break;
 8007e6e:	e000      	b.n	8007e72 <USBD_ClrFeature+0x3a>
      break;
 8007e70:	bf00      	nop
  }
}
 8007e72:	bf00      	nop
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	781a      	ldrb	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3301      	adds	r3, #1
 8007e94:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	781a      	ldrb	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f7ff fa9c 	bl	80073e2 <SWAPBYTE>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	461a      	mov	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f7ff fa8f 	bl	80073e2 <SWAPBYTE>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f7ff fa82 	bl	80073e2 <SWAPBYTE>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	80da      	strh	r2, [r3, #6]
}
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ef8:	2180      	movs	r1, #128	; 0x80
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fd7e 	bl	80089fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007f00:	2100      	movs	r1, #0
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fd7a 	bl	80089fc <USBD_LL_StallEP>
}
 8007f08:	bf00      	nop
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d036      	beq.n	8007f94 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007f2a:	6938      	ldr	r0, [r7, #16]
 8007f2c:	f000 f836 	bl	8007f9c <USBD_GetLen>
 8007f30:	4603      	mov	r3, r0
 8007f32:	3301      	adds	r3, #1
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	4413      	add	r3, r2
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	7812      	ldrb	r2, [r2, #0]
 8007f48:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f50:	7dfb      	ldrb	r3, [r7, #23]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	4413      	add	r3, r2
 8007f56:	2203      	movs	r2, #3
 8007f58:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f60:	e013      	b.n	8007f8a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	4413      	add	r3, r2
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	7812      	ldrb	r2, [r2, #0]
 8007f6c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	3301      	adds	r3, #1
 8007f72:	613b      	str	r3, [r7, #16]
    idx++;
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
 8007f76:	3301      	adds	r3, #1
 8007f78:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	4413      	add	r3, r2
 8007f80:	2200      	movs	r2, #0
 8007f82:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
 8007f86:	3301      	adds	r3, #1
 8007f88:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1e7      	bne.n	8007f62 <USBD_GetString+0x52>
 8007f92:	e000      	b.n	8007f96 <USBD_GetString+0x86>
    return;
 8007f94:	bf00      	nop
  }
}
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007fac:	e005      	b.n	8007fba <USBD_GetLen+0x1e>
  {
    len++;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1f5      	bne.n	8007fae <USBD_GetLen+0x12>
  }

  return len;
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f000 fd89 	bl	8008b0e <USBD_LL_Transmit>

  return USBD_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	2100      	movs	r1, #0
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 fd78 	bl	8008b0e <USBD_LL_Transmit>

  return USBD_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2203      	movs	r2, #3
 8008038:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	2100      	movs	r1, #0
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f000 fd7c 	bl	8008b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	60b9      	str	r1, [r7, #8]
 800806c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	2100      	movs	r1, #0
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 fd6b 	bl	8008b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2204      	movs	r2, #4
 8008090:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008094:	2300      	movs	r3, #0
 8008096:	2200      	movs	r2, #0
 8008098:	2100      	movs	r1, #0
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fd37 	bl	8008b0e <USBD_LL_Transmit>

  return USBD_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2205      	movs	r2, #5
 80080b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080ba:	2300      	movs	r3, #0
 80080bc:	2200      	movs	r2, #0
 80080be:	2100      	movs	r1, #0
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fd45 	bl	8008b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80080d4:	2200      	movs	r2, #0
 80080d6:	4912      	ldr	r1, [pc, #72]	; (8008120 <MX_USB_DEVICE_Init+0x50>)
 80080d8:	4812      	ldr	r0, [pc, #72]	; (8008124 <MX_USB_DEVICE_Init+0x54>)
 80080da:	f7fe febb 	bl	8006e54 <USBD_Init>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80080e4:	f7f9 f942 	bl	800136c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80080e8:	490f      	ldr	r1, [pc, #60]	; (8008128 <MX_USB_DEVICE_Init+0x58>)
 80080ea:	480e      	ldr	r0, [pc, #56]	; (8008124 <MX_USB_DEVICE_Init+0x54>)
 80080ec:	f7fe fee8 	bl	8006ec0 <USBD_RegisterClass>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80080f6:	f7f9 f939 	bl	800136c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80080fa:	490c      	ldr	r1, [pc, #48]	; (800812c <MX_USB_DEVICE_Init+0x5c>)
 80080fc:	4809      	ldr	r0, [pc, #36]	; (8008124 <MX_USB_DEVICE_Init+0x54>)
 80080fe:	f7fe fe0d 	bl	8006d1c <USBD_CDC_RegisterInterface>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008108:	f7f9 f930 	bl	800136c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800810c:	4805      	ldr	r0, [pc, #20]	; (8008124 <MX_USB_DEVICE_Init+0x54>)
 800810e:	f7fe fef8 	bl	8006f02 <USBD_Start>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008118:	f7f9 f928 	bl	800136c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800811c:	bf00      	nop
 800811e:	bd80      	pop	{r7, pc}
 8008120:	20000130 	.word	0x20000130
 8008124:	200004fc 	.word	0x200004fc
 8008128:	20000018 	.word	0x20000018
 800812c:	2000011c 	.word	0x2000011c

08008130 <StaticIntArray_PushBack>:
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length);
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
StaticIntArray *StaticIntArray_PushBack(StaticIntArray *self, int32_t elem) {
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
    int32_t capa = sizeof(self->array) / sizeof(self->array[0]);
 800813a:	2364      	movs	r3, #100	; 0x64
 800813c:	60fb      	str	r3, [r7, #12]
    if (self->len >= capa) {
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	429a      	cmp	r2, r3
 8008148:	dc01      	bgt.n	800814e <StaticIntArray_PushBack+0x1e>
        return Receive_OverFlow;  // 配列の容量が足りない
 800814a:	2301      	movs	r3, #1
 800814c:	e00b      	b.n	8008166 <StaticIntArray_PushBack+0x36>
    }

    self->array[self->len++] = elem;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8008154:	1c59      	adds	r1, r3, #1
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6839      	ldr	r1, [r7, #0]
 8008160:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return Receive_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
	...

08008174 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008178:	2200      	movs	r2, #0
 800817a:	4905      	ldr	r1, [pc, #20]	; (8008190 <CDC_Init_FS+0x1c>)
 800817c:	4805      	ldr	r0, [pc, #20]	; (8008194 <CDC_Init_FS+0x20>)
 800817e:	f7fe fde2 	bl	8006d46 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008182:	4905      	ldr	r1, [pc, #20]	; (8008198 <CDC_Init_FS+0x24>)
 8008184:	4803      	ldr	r0, [pc, #12]	; (8008194 <CDC_Init_FS+0x20>)
 8008186:	f7fe fdf7 	bl	8006d78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800818a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800818c:	4618      	mov	r0, r3
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20000fd0 	.word	0x20000fd0
 8008194:	200004fc 	.word	0x200004fc
 8008198:	200007cc 	.word	0x200007cc

0800819c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80081a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	4603      	mov	r3, r0
 80081b4:	6039      	str	r1, [r7, #0]
 80081b6:	71fb      	strb	r3, [r7, #7]
 80081b8:	4613      	mov	r3, r2
 80081ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80081bc:	79fb      	ldrb	r3, [r7, #7]
 80081be:	2b23      	cmp	r3, #35	; 0x23
 80081c0:	d84a      	bhi.n	8008258 <CDC_Control_FS+0xac>
 80081c2:	a201      	add	r2, pc, #4	; (adr r2, 80081c8 <CDC_Control_FS+0x1c>)
 80081c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c8:	08008259 	.word	0x08008259
 80081cc:	08008259 	.word	0x08008259
 80081d0:	08008259 	.word	0x08008259
 80081d4:	08008259 	.word	0x08008259
 80081d8:	08008259 	.word	0x08008259
 80081dc:	08008259 	.word	0x08008259
 80081e0:	08008259 	.word	0x08008259
 80081e4:	08008259 	.word	0x08008259
 80081e8:	08008259 	.word	0x08008259
 80081ec:	08008259 	.word	0x08008259
 80081f0:	08008259 	.word	0x08008259
 80081f4:	08008259 	.word	0x08008259
 80081f8:	08008259 	.word	0x08008259
 80081fc:	08008259 	.word	0x08008259
 8008200:	08008259 	.word	0x08008259
 8008204:	08008259 	.word	0x08008259
 8008208:	08008259 	.word	0x08008259
 800820c:	08008259 	.word	0x08008259
 8008210:	08008259 	.word	0x08008259
 8008214:	08008259 	.word	0x08008259
 8008218:	08008259 	.word	0x08008259
 800821c:	08008259 	.word	0x08008259
 8008220:	08008259 	.word	0x08008259
 8008224:	08008259 	.word	0x08008259
 8008228:	08008259 	.word	0x08008259
 800822c:	08008259 	.word	0x08008259
 8008230:	08008259 	.word	0x08008259
 8008234:	08008259 	.word	0x08008259
 8008238:	08008259 	.word	0x08008259
 800823c:	08008259 	.word	0x08008259
 8008240:	08008259 	.word	0x08008259
 8008244:	08008259 	.word	0x08008259
 8008248:	08008259 	.word	0x08008259
 800824c:	08008259 	.word	0x08008259
 8008250:	08008259 	.word	0x08008259
 8008254:	08008259 	.word	0x08008259
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008258:	bf00      	nop
  }

  return (USBD_OK);
 800825a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800825c:	4618      	mov	r0, r3
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b096      	sub	sp, #88	; 0x58
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	4830      	ldr	r0, [pc, #192]	; (8008338 <CDC_Receive_FS+0xd0>)
 8008276:	f7fe fd7f 	bl	8006d78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800827a:	482f      	ldr	r0, [pc, #188]	; (8008338 <CDC_Receive_FS+0xd0>)
 800827c:	f7fe fdc0 	bl	8006e00 <USBD_CDC_ReceivePacket>

  uint8_t sendBuf[64];
  if (*Len && *Len < 64){
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d052      	beq.n	800832e <CDC_Receive_FS+0xc6>
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b3f      	cmp	r3, #63	; 0x3f
 800828e:	d84e      	bhi.n	800832e <CDC_Receive_FS+0xc6>
	  for (int i = 0; i < *Len; i++)
 8008290:	2300      	movs	r3, #0
 8008292:	657b      	str	r3, [r7, #84]	; 0x54
 8008294:	e00c      	b.n	80082b0 <CDC_Receive_FS+0x48>
	  {
		  sendBuf[i] = Buf[i];
 8008296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	4413      	add	r3, r2
 800829c:	7819      	ldrb	r1, [r3, #0]
 800829e:	f107 0210 	add.w	r2, r7, #16
 80082a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082a4:	4413      	add	r3, r2
 80082a6:	460a      	mov	r2, r1
 80082a8:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < *Len; i++)
 80082aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ac:	3301      	adds	r3, #1
 80082ae:	657b      	str	r3, [r7, #84]	; 0x54
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d8ed      	bhi.n	8008296 <CDC_Receive_FS+0x2e>
	  }
	  CDC_Transmit_FS(sendBuf, *Len);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	b29a      	uxth	r2, r3
 80082c0:	f107 0310 	add.w	r3, r7, #16
 80082c4:	4611      	mov	r1, r2
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 f83c 	bl	8008344 <CDC_Transmit_FS>
	  if(StaticIntArray_PushBack(&receive, sendBuf) == Receive_OverFlow){
 80082cc:	f107 0310 	add.w	r3, r7, #16
 80082d0:	4619      	mov	r1, r3
 80082d2:	481a      	ldr	r0, [pc, #104]	; (800833c <CDC_Receive_FS+0xd4>)
 80082d4:	f7ff ff2c 	bl	8008130 <StaticIntArray_PushBack>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d127      	bne.n	800832e <CDC_Receive_FS+0xc6>
		  char *msg = "Too many Description! CDC_Receive Buffer Overflow!\n\r";
 80082de:	4b18      	ldr	r3, [pc, #96]	; (8008340 <CDC_Receive_FS+0xd8>)
 80082e0:	60fb      	str	r3, [r7, #12]
		  CDC_Transmit_FS((uint8_t *)&msg, strlen(msg));
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7f7 ff9b 	bl	8000220 <strlen>
 80082ea:	4603      	mov	r3, r0
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	f107 030c 	add.w	r3, r7, #12
 80082f2:	4611      	mov	r1, r2
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 f825 	bl	8008344 <CDC_Transmit_FS>
		  for (uint8_t i = 0; i <= receive.len; ++i) {
 80082fa:	2300      	movs	r3, #0
 80082fc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8008300:	e00a      	b.n	8008318 <CDC_Receive_FS+0xb0>
			  receive.array[i] = 0;
 8008302:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008306:	4a0d      	ldr	r2, [pc, #52]	; (800833c <CDC_Receive_FS+0xd4>)
 8008308:	2100      	movs	r1, #0
 800830a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (uint8_t i = 0; i <= receive.len; ++i) {
 800830e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008312:	3301      	adds	r3, #1
 8008314:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8008318:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800831c:	4b07      	ldr	r3, [pc, #28]	; (800833c <CDC_Receive_FS+0xd4>)
 800831e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8008322:	429a      	cmp	r2, r3
 8008324:	dded      	ble.n	8008302 <CDC_Receive_FS+0x9a>
		}
		  receive.len = 0;
 8008326:	4b05      	ldr	r3, [pc, #20]	; (800833c <CDC_Receive_FS+0xd4>)
 8008328:	2200      	movs	r2, #0
 800832a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	  }
  }

  return (USBD_OK);
 800832e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008330:	4618      	mov	r0, r3
 8008332:	3758      	adds	r7, #88	; 0x58
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	200004fc 	.word	0x200004fc
 800833c:	20000218 	.word	0x20000218
 8008340:	08008f34 	.word	0x08008f34

08008344 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008354:	4b0d      	ldr	r3, [pc, #52]	; (800838c <CDC_Transmit_FS+0x48>)
 8008356:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800835a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008366:	2301      	movs	r3, #1
 8008368:	e00b      	b.n	8008382 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800836a:	887b      	ldrh	r3, [r7, #2]
 800836c:	461a      	mov	r2, r3
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	4806      	ldr	r0, [pc, #24]	; (800838c <CDC_Transmit_FS+0x48>)
 8008372:	f7fe fce8 	bl	8006d46 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008376:	4805      	ldr	r0, [pc, #20]	; (800838c <CDC_Transmit_FS+0x48>)
 8008378:	f7fe fd12 	bl	8006da0 <USBD_CDC_TransmitPacket>
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008380:	7bfb      	ldrb	r3, [r7, #15]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	200004fc 	.word	0x200004fc

08008390 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008390:	b480      	push	{r7}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	4613      	mov	r3, r2
 800839c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80083a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
	...

080083b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	6039      	str	r1, [r7, #0]
 80083be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2212      	movs	r2, #18
 80083c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083c6:	4b03      	ldr	r3, [pc, #12]	; (80083d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	20000150 	.word	0x20000150

080083d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	6039      	str	r1, [r7, #0]
 80083e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2204      	movs	r2, #4
 80083e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083ea:	4b03      	ldr	r3, [pc, #12]	; (80083f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	20000170 	.word	0x20000170

080083fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	6039      	str	r1, [r7, #0]
 8008406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d105      	bne.n	800841a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	4907      	ldr	r1, [pc, #28]	; (8008430 <USBD_FS_ProductStrDescriptor+0x34>)
 8008412:	4808      	ldr	r0, [pc, #32]	; (8008434 <USBD_FS_ProductStrDescriptor+0x38>)
 8008414:	f7ff fd7c 	bl	8007f10 <USBD_GetString>
 8008418:	e004      	b.n	8008424 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	4904      	ldr	r1, [pc, #16]	; (8008430 <USBD_FS_ProductStrDescriptor+0x34>)
 800841e:	4805      	ldr	r0, [pc, #20]	; (8008434 <USBD_FS_ProductStrDescriptor+0x38>)
 8008420:	f7ff fd76 	bl	8007f10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008424:	4b02      	ldr	r3, [pc, #8]	; (8008430 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	200017d0 	.word	0x200017d0
 8008434:	08008f6c 	.word	0x08008f6c

08008438 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	4904      	ldr	r1, [pc, #16]	; (8008458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008448:	4804      	ldr	r0, [pc, #16]	; (800845c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800844a:	f7ff fd61 	bl	8007f10 <USBD_GetString>
  return USBD_StrDesc;
 800844e:	4b02      	ldr	r3, [pc, #8]	; (8008458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008450:	4618      	mov	r0, r3
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	200017d0 	.word	0x200017d0
 800845c:	08008f84 	.word	0x08008f84

08008460 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	6039      	str	r1, [r7, #0]
 800846a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	221a      	movs	r2, #26
 8008470:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008472:	f000 f855 	bl	8008520 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008476:	4b02      	ldr	r3, [pc, #8]	; (8008480 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	20000174 	.word	0x20000174

08008484 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	4603      	mov	r3, r0
 800848c:	6039      	str	r1, [r7, #0]
 800848e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008490:	79fb      	ldrb	r3, [r7, #7]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d105      	bne.n	80084a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	4907      	ldr	r1, [pc, #28]	; (80084b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800849a:	4808      	ldr	r0, [pc, #32]	; (80084bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800849c:	f7ff fd38 	bl	8007f10 <USBD_GetString>
 80084a0:	e004      	b.n	80084ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	4904      	ldr	r1, [pc, #16]	; (80084b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084a6:	4805      	ldr	r0, [pc, #20]	; (80084bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80084a8:	f7ff fd32 	bl	8007f10 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084ac:	4b02      	ldr	r3, [pc, #8]	; (80084b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	200017d0 	.word	0x200017d0
 80084bc:	08008f98 	.word	0x08008f98

080084c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	6039      	str	r1, [r7, #0]
 80084ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084cc:	79fb      	ldrb	r3, [r7, #7]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d105      	bne.n	80084de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	4907      	ldr	r1, [pc, #28]	; (80084f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084d6:	4808      	ldr	r0, [pc, #32]	; (80084f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084d8:	f7ff fd1a 	bl	8007f10 <USBD_GetString>
 80084dc:	e004      	b.n	80084e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	4904      	ldr	r1, [pc, #16]	; (80084f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084e2:	4805      	ldr	r0, [pc, #20]	; (80084f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084e4:	f7ff fd14 	bl	8007f10 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084e8:	4b02      	ldr	r3, [pc, #8]	; (80084f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	200017d0 	.word	0x200017d0
 80084f8:	08008fa4 	.word	0x08008fa4

080084fc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	6039      	str	r1, [r7, #0]
 8008506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	220c      	movs	r2, #12
 800850c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800850e:	4b03      	ldr	r3, [pc, #12]	; (800851c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	20000164 	.word	0x20000164

08008520 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008526:	4b0f      	ldr	r3, [pc, #60]	; (8008564 <Get_SerialNum+0x44>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800852c:	4b0e      	ldr	r3, [pc, #56]	; (8008568 <Get_SerialNum+0x48>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008532:	4b0e      	ldr	r3, [pc, #56]	; (800856c <Get_SerialNum+0x4c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4413      	add	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d009      	beq.n	800855a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008546:	2208      	movs	r2, #8
 8008548:	4909      	ldr	r1, [pc, #36]	; (8008570 <Get_SerialNum+0x50>)
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 f814 	bl	8008578 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008550:	2204      	movs	r2, #4
 8008552:	4908      	ldr	r1, [pc, #32]	; (8008574 <Get_SerialNum+0x54>)
 8008554:	68b8      	ldr	r0, [r7, #8]
 8008556:	f000 f80f 	bl	8008578 <IntToUnicode>
  }
}
 800855a:	bf00      	nop
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	1ff07a10 	.word	0x1ff07a10
 8008568:	1ff07a14 	.word	0x1ff07a14
 800856c:	1ff07a18 	.word	0x1ff07a18
 8008570:	20000176 	.word	0x20000176
 8008574:	20000186 	.word	0x20000186

08008578 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008578:	b480      	push	{r7}
 800857a:	b087      	sub	sp, #28
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	4613      	mov	r3, r2
 8008584:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800858a:	2300      	movs	r3, #0
 800858c:	75fb      	strb	r3, [r7, #23]
 800858e:	e027      	b.n	80085e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	0f1b      	lsrs	r3, r3, #28
 8008594:	2b09      	cmp	r3, #9
 8008596:	d80b      	bhi.n	80085b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	0f1b      	lsrs	r3, r3, #28
 800859c:	b2da      	uxtb	r2, r3
 800859e:	7dfb      	ldrb	r3, [r7, #23]
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	4619      	mov	r1, r3
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	440b      	add	r3, r1
 80085a8:	3230      	adds	r2, #48	; 0x30
 80085aa:	b2d2      	uxtb	r2, r2
 80085ac:	701a      	strb	r2, [r3, #0]
 80085ae:	e00a      	b.n	80085c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	0f1b      	lsrs	r3, r3, #28
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	4619      	mov	r1, r3
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	440b      	add	r3, r1
 80085c0:	3237      	adds	r2, #55	; 0x37
 80085c2:	b2d2      	uxtb	r2, r2
 80085c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	011b      	lsls	r3, r3, #4
 80085ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085cc:	7dfb      	ldrb	r3, [r7, #23]
 80085ce:	005b      	lsls	r3, r3, #1
 80085d0:	3301      	adds	r3, #1
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	4413      	add	r3, r2
 80085d6:	2200      	movs	r2, #0
 80085d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	3301      	adds	r3, #1
 80085de:	75fb      	strb	r3, [r7, #23]
 80085e0:	7dfa      	ldrb	r2, [r7, #23]
 80085e2:	79fb      	ldrb	r3, [r7, #7]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d3d3      	bcc.n	8008590 <IntToUnicode+0x18>
  }
}
 80085e8:	bf00      	nop
 80085ea:	bf00      	nop
 80085ec:	371c      	adds	r7, #28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
	...

080085f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b08a      	sub	sp, #40	; 0x28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008600:	f107 0314 	add.w	r3, r7, #20
 8008604:	2200      	movs	r2, #0
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	605a      	str	r2, [r3, #4]
 800860a:	609a      	str	r2, [r3, #8]
 800860c:	60da      	str	r2, [r3, #12]
 800860e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008618:	d149      	bne.n	80086ae <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800861a:	4b27      	ldr	r3, [pc, #156]	; (80086b8 <HAL_PCD_MspInit+0xc0>)
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	4a26      	ldr	r2, [pc, #152]	; (80086b8 <HAL_PCD_MspInit+0xc0>)
 8008620:	f043 0301 	orr.w	r3, r3, #1
 8008624:	6313      	str	r3, [r2, #48]	; 0x30
 8008626:	4b24      	ldr	r3, [pc, #144]	; (80086b8 <HAL_PCD_MspInit+0xc0>)
 8008628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	613b      	str	r3, [r7, #16]
 8008630:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008632:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8008636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008638:	2302      	movs	r3, #2
 800863a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800863c:	2300      	movs	r3, #0
 800863e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008640:	2303      	movs	r3, #3
 8008642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008644:	230a      	movs	r3, #10
 8008646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008648:	f107 0314 	add.w	r3, r7, #20
 800864c:	4619      	mov	r1, r3
 800864e:	481b      	ldr	r0, [pc, #108]	; (80086bc <HAL_PCD_MspInit+0xc4>)
 8008650:	f7f9 f994 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800865a:	2300      	movs	r3, #0
 800865c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800865e:	2300      	movs	r3, #0
 8008660:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008662:	f107 0314 	add.w	r3, r7, #20
 8008666:	4619      	mov	r1, r3
 8008668:	4814      	ldr	r0, [pc, #80]	; (80086bc <HAL_PCD_MspInit+0xc4>)
 800866a:	f7f9 f987 	bl	800197c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800866e:	4b12      	ldr	r3, [pc, #72]	; (80086b8 <HAL_PCD_MspInit+0xc0>)
 8008670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008672:	4a11      	ldr	r2, [pc, #68]	; (80086b8 <HAL_PCD_MspInit+0xc0>)
 8008674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008678:	6353      	str	r3, [r2, #52]	; 0x34
 800867a:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <HAL_PCD_MspInit+0xc0>)
 800867c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	4b0c      	ldr	r3, [pc, #48]	; (80086b8 <HAL_PCD_MspInit+0xc0>)
 8008688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800868a:	4a0b      	ldr	r2, [pc, #44]	; (80086b8 <HAL_PCD_MspInit+0xc0>)
 800868c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008690:	6453      	str	r3, [r2, #68]	; 0x44
 8008692:	4b09      	ldr	r3, [pc, #36]	; (80086b8 <HAL_PCD_MspInit+0xc0>)
 8008694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800869a:	60bb      	str	r3, [r7, #8]
 800869c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800869e:	2200      	movs	r2, #0
 80086a0:	2100      	movs	r1, #0
 80086a2:	2043      	movs	r0, #67	; 0x43
 80086a4:	f7f9 f933 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80086a8:	2043      	movs	r0, #67	; 0x43
 80086aa:	f7f9 f94c 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80086ae:	bf00      	nop
 80086b0:	3728      	adds	r7, #40	; 0x28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	40023800 	.word	0x40023800
 80086bc:	40020000 	.word	0x40020000

080086c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80086d4:	4619      	mov	r1, r3
 80086d6:	4610      	mov	r0, r2
 80086d8:	f7fe fc5e 	bl	8006f98 <USBD_LL_SetupStage>
}
 80086dc:	bf00      	nop
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 80086f6:	78fa      	ldrb	r2, [r7, #3]
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	4613      	mov	r3, r2
 80086fc:	00db      	lsls	r3, r3, #3
 80086fe:	1a9b      	subs	r3, r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	440b      	add	r3, r1
 8008704:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	78fb      	ldrb	r3, [r7, #3]
 800870c:	4619      	mov	r1, r3
 800870e:	f7fe fc98 	bl	8007042 <USBD_LL_DataOutStage>
}
 8008712:	bf00      	nop
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b082      	sub	sp, #8
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	460b      	mov	r3, r1
 8008724:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800872c:	78fa      	ldrb	r2, [r7, #3]
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	4613      	mov	r3, r2
 8008732:	00db      	lsls	r3, r3, #3
 8008734:	1a9b      	subs	r3, r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	440b      	add	r3, r1
 800873a:	3348      	adds	r3, #72	; 0x48
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	78fb      	ldrb	r3, [r7, #3]
 8008740:	4619      	mov	r1, r3
 8008742:	f7fe fce1 	bl	8007108 <USBD_LL_DataInStage>
}
 8008746:	bf00      	nop
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800875c:	4618      	mov	r0, r3
 800875e:	f7fe fde5 	bl	800732c <USBD_LL_SOF>
}
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b084      	sub	sp, #16
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008772:	2301      	movs	r3, #1
 8008774:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d102      	bne.n	8008784 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800877e:	2300      	movs	r3, #0
 8008780:	73fb      	strb	r3, [r7, #15]
 8008782:	e008      	b.n	8008796 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	2b02      	cmp	r3, #2
 800878a:	d102      	bne.n	8008792 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800878c:	2301      	movs	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]
 8008790:	e001      	b.n	8008796 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008792:	f7f8 fdeb 	bl	800136c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800879c:	7bfa      	ldrb	r2, [r7, #15]
 800879e:	4611      	mov	r1, r2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fe fd88 	bl	80072b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fe fd41 	bl	8007234 <USBD_LL_Reset>
}
 80087b2:	bf00      	nop
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
	...

080087bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe fd83 	bl	80072d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	6812      	ldr	r2, [r2, #0]
 80087de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087e2:	f043 0301 	orr.w	r3, r3, #1
 80087e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a1b      	ldr	r3, [r3, #32]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d005      	beq.n	80087fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087f0:	4b04      	ldr	r3, [pc, #16]	; (8008804 <HAL_PCD_SuspendCallback+0x48>)
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	4a03      	ldr	r2, [pc, #12]	; (8008804 <HAL_PCD_SuspendCallback+0x48>)
 80087f6:	f043 0306 	orr.w	r3, r3, #6
 80087fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80087fc:	bf00      	nop
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	e000ed00 	.word	0xe000ed00

08008808 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008816:	4618      	mov	r0, r3
 8008818:	f7fe fd72 	bl	8007300 <USBD_LL_Resume>
}
 800881c:	bf00      	nop
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	460b      	mov	r3, r1
 800882e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008836:	78fa      	ldrb	r2, [r7, #3]
 8008838:	4611      	mov	r1, r2
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe fd9d 	bl	800737a <USBD_LL_IsoOUTIncomplete>
}
 8008840:	bf00      	nop
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800885a:	78fa      	ldrb	r2, [r7, #3]
 800885c:	4611      	mov	r1, r2
 800885e:	4618      	mov	r0, r3
 8008860:	f7fe fd7e 	bl	8007360 <USBD_LL_IsoINIncomplete>
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800887a:	4618      	mov	r0, r3
 800887c:	f7fe fd8a 	bl	8007394 <USBD_LL_DevConnected>
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008896:	4618      	mov	r0, r3
 8008898:	f7fe fd87 	bl	80073aa <USBD_LL_DevDisconnected>
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d13c      	bne.n	800892e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80088b4:	4a20      	ldr	r2, [pc, #128]	; (8008938 <USBD_LL_Init+0x94>)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a1e      	ldr	r2, [pc, #120]	; (8008938 <USBD_LL_Init+0x94>)
 80088c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088c4:	4b1c      	ldr	r3, [pc, #112]	; (8008938 <USBD_LL_Init+0x94>)
 80088c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80088ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80088cc:	4b1a      	ldr	r3, [pc, #104]	; (8008938 <USBD_LL_Init+0x94>)
 80088ce:	2206      	movs	r2, #6
 80088d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80088d2:	4b19      	ldr	r3, [pc, #100]	; (8008938 <USBD_LL_Init+0x94>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80088d8:	4b17      	ldr	r3, [pc, #92]	; (8008938 <USBD_LL_Init+0x94>)
 80088da:	2202      	movs	r2, #2
 80088dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80088de:	4b16      	ldr	r3, [pc, #88]	; (8008938 <USBD_LL_Init+0x94>)
 80088e0:	2201      	movs	r2, #1
 80088e2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80088e4:	4b14      	ldr	r3, [pc, #80]	; (8008938 <USBD_LL_Init+0x94>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80088ea:	4b13      	ldr	r3, [pc, #76]	; (8008938 <USBD_LL_Init+0x94>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80088f0:	4b11      	ldr	r3, [pc, #68]	; (8008938 <USBD_LL_Init+0x94>)
 80088f2:	2201      	movs	r2, #1
 80088f4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80088f6:	4b10      	ldr	r3, [pc, #64]	; (8008938 <USBD_LL_Init+0x94>)
 80088f8:	2201      	movs	r2, #1
 80088fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80088fc:	4b0e      	ldr	r3, [pc, #56]	; (8008938 <USBD_LL_Init+0x94>)
 80088fe:	2200      	movs	r2, #0
 8008900:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008902:	480d      	ldr	r0, [pc, #52]	; (8008938 <USBD_LL_Init+0x94>)
 8008904:	f7f9 f9ef 	bl	8001ce6 <HAL_PCD_Init>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800890e:	f7f8 fd2d 	bl	800136c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008912:	2180      	movs	r1, #128	; 0x80
 8008914:	4808      	ldr	r0, [pc, #32]	; (8008938 <USBD_LL_Init+0x94>)
 8008916:	f7fa fb60 	bl	8002fda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800891a:	2240      	movs	r2, #64	; 0x40
 800891c:	2100      	movs	r1, #0
 800891e:	4806      	ldr	r0, [pc, #24]	; (8008938 <USBD_LL_Init+0x94>)
 8008920:	f7fa fb14 	bl	8002f4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008924:	2280      	movs	r2, #128	; 0x80
 8008926:	2101      	movs	r1, #1
 8008928:	4803      	ldr	r0, [pc, #12]	; (8008938 <USBD_LL_Init+0x94>)
 800892a:	f7fa fb0f 	bl	8002f4c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	200019d0 	.word	0x200019d0

0800893c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008944:	2300      	movs	r3, #0
 8008946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008952:	4618      	mov	r0, r3
 8008954:	f7f9 faeb 	bl	8001f2e <HAL_PCD_Start>
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	4618      	mov	r0, r3
 8008960:	f000 f97e 	bl	8008c60 <USBD_Get_USB_Status>
 8008964:	4603      	mov	r3, r0
 8008966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008968:	7bbb      	ldrb	r3, [r7, #14]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	4608      	mov	r0, r1
 800897c:	4611      	mov	r1, r2
 800897e:	461a      	mov	r2, r3
 8008980:	4603      	mov	r3, r0
 8008982:	70fb      	strb	r3, [r7, #3]
 8008984:	460b      	mov	r3, r1
 8008986:	70bb      	strb	r3, [r7, #2]
 8008988:	4613      	mov	r3, r2
 800898a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800899a:	78bb      	ldrb	r3, [r7, #2]
 800899c:	883a      	ldrh	r2, [r7, #0]
 800899e:	78f9      	ldrb	r1, [r7, #3]
 80089a0:	f7f9 fedb 	bl	800275a <HAL_PCD_EP_Open>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 f958 	bl	8008c60 <USBD_Get_USB_Status>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	460b      	mov	r3, r1
 80089c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089d8:	78fa      	ldrb	r2, [r7, #3]
 80089da:	4611      	mov	r1, r2
 80089dc:	4618      	mov	r0, r3
 80089de:	f7f9 ff24 	bl	800282a <HAL_PCD_EP_Close>
 80089e2:	4603      	mov	r3, r0
 80089e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 f939 	bl	8008c60 <USBD_Get_USB_Status>
 80089ee:	4603      	mov	r3, r0
 80089f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a16:	78fa      	ldrb	r2, [r7, #3]
 8008a18:	4611      	mov	r1, r2
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7f9 fffc 	bl	8002a18 <HAL_PCD_EP_SetStall>
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 f91a 	bl	8008c60 <USBD_Get_USB_Status>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	460b      	mov	r3, r1
 8008a44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a54:	78fa      	ldrb	r2, [r7, #3]
 8008a56:	4611      	mov	r1, r2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fa f841 	bl	8002ae0 <HAL_PCD_EP_ClrStall>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 f8fb 	bl	8008c60 <USBD_Get_USB_Status>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	da0b      	bge.n	8008aac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a94:	78fb      	ldrb	r3, [r7, #3]
 8008a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a9a:	68f9      	ldr	r1, [r7, #12]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	1a9b      	subs	r3, r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	440b      	add	r3, r1
 8008aa6:	333e      	adds	r3, #62	; 0x3e
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	e00b      	b.n	8008ac4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ab2:	68f9      	ldr	r1, [r7, #12]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	00db      	lsls	r3, r3, #3
 8008ab8:	1a9b      	subs	r3, r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	440b      	add	r3, r1
 8008abe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ac2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008aea:	78fa      	ldrb	r2, [r7, #3]
 8008aec:	4611      	mov	r1, r2
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7f9 fe0e 	bl	8002710 <HAL_PCD_SetAddress>
 8008af4:	4603      	mov	r3, r0
 8008af6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 f8b0 	bl	8008c60 <USBD_Get_USB_Status>
 8008b00:	4603      	mov	r3, r0
 8008b02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b086      	sub	sp, #24
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	607a      	str	r2, [r7, #4]
 8008b18:	603b      	str	r3, [r7, #0]
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b2c:	7af9      	ldrb	r1, [r7, #11]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	f7f9 ff27 	bl	8002984 <HAL_PCD_EP_Transmit>
 8008b36:	4603      	mov	r3, r0
 8008b38:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 f88f 	bl	8008c60 <USBD_Get_USB_Status>
 8008b42:	4603      	mov	r3, r0
 8008b44:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b46:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	607a      	str	r2, [r7, #4]
 8008b5a:	603b      	str	r3, [r7, #0]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b6e:	7af9      	ldrb	r1, [r7, #11]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	f7f9 fea3 	bl	80028be <HAL_PCD_EP_Receive>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f86e 	bl	8008c60 <USBD_Get_USB_Status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b88:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b082      	sub	sp, #8
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ba4:	78fa      	ldrb	r2, [r7, #3]
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7f9 fed3 	bl	8002954 <HAL_PCD_EP_GetRxCount>
 8008bae:	4603      	mov	r3, r0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008bc4:	78fb      	ldrb	r3, [r7, #3]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d002      	beq.n	8008bd0 <HAL_PCDEx_LPM_Callback+0x18>
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d01f      	beq.n	8008c0e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008bce:	e03b      	b.n	8008c48 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d007      	beq.n	8008be8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008bd8:	f000 f83c 	bl	8008c54 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bdc:	4b1c      	ldr	r3, [pc, #112]	; (8008c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	4a1b      	ldr	r2, [pc, #108]	; (8008c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8008be2:	f023 0306 	bic.w	r3, r3, #6
 8008be6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	6812      	ldr	r2, [r2, #0]
 8008bf6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bfa:	f023 0301 	bic.w	r3, r3, #1
 8008bfe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe fb7a 	bl	8007300 <USBD_LL_Resume>
    break;
 8008c0c:	e01c      	b.n	8008c48 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	6812      	ldr	r2, [r2, #0]
 8008c1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c20:	f043 0301 	orr.w	r3, r3, #1
 8008c24:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fe fb52 	bl	80072d6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d005      	beq.n	8008c46 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c3a:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	4a04      	ldr	r2, [pc, #16]	; (8008c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8008c40:	f043 0306 	orr.w	r3, r3, #6
 8008c44:	6113      	str	r3, [r2, #16]
    break;
 8008c46:	bf00      	nop
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	e000ed00 	.word	0xe000ed00

08008c54 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008c58:	f7f8 f93e 	bl	8000ed8 <SystemClock_Config>
}
 8008c5c:	bf00      	nop
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4603      	mov	r3, r0
 8008c68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c6e:	79fb      	ldrb	r3, [r7, #7]
 8008c70:	2b03      	cmp	r3, #3
 8008c72:	d817      	bhi.n	8008ca4 <USBD_Get_USB_Status+0x44>
 8008c74:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <USBD_Get_USB_Status+0x1c>)
 8008c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7a:	bf00      	nop
 8008c7c:	08008c8d 	.word	0x08008c8d
 8008c80:	08008c93 	.word	0x08008c93
 8008c84:	08008c99 	.word	0x08008c99
 8008c88:	08008c9f 	.word	0x08008c9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c90:	e00b      	b.n	8008caa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c92:	2303      	movs	r3, #3
 8008c94:	73fb      	strb	r3, [r7, #15]
    break;
 8008c96:	e008      	b.n	8008caa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c9c:	e005      	b.n	8008caa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca2:	e002      	b.n	8008caa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca8:	bf00      	nop
  }
  return usb_status;
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <__errno>:
 8008cb8:	4b01      	ldr	r3, [pc, #4]	; (8008cc0 <__errno+0x8>)
 8008cba:	6818      	ldr	r0, [r3, #0]
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	20000190 	.word	0x20000190

08008cc4 <__libc_init_array>:
 8008cc4:	b570      	push	{r4, r5, r6, lr}
 8008cc6:	4d0d      	ldr	r5, [pc, #52]	; (8008cfc <__libc_init_array+0x38>)
 8008cc8:	4c0d      	ldr	r4, [pc, #52]	; (8008d00 <__libc_init_array+0x3c>)
 8008cca:	1b64      	subs	r4, r4, r5
 8008ccc:	10a4      	asrs	r4, r4, #2
 8008cce:	2600      	movs	r6, #0
 8008cd0:	42a6      	cmp	r6, r4
 8008cd2:	d109      	bne.n	8008ce8 <__libc_init_array+0x24>
 8008cd4:	4d0b      	ldr	r5, [pc, #44]	; (8008d04 <__libc_init_array+0x40>)
 8008cd6:	4c0c      	ldr	r4, [pc, #48]	; (8008d08 <__libc_init_array+0x44>)
 8008cd8:	f000 f8f8 	bl	8008ecc <_init>
 8008cdc:	1b64      	subs	r4, r4, r5
 8008cde:	10a4      	asrs	r4, r4, #2
 8008ce0:	2600      	movs	r6, #0
 8008ce2:	42a6      	cmp	r6, r4
 8008ce4:	d105      	bne.n	8008cf2 <__libc_init_array+0x2e>
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}
 8008ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cec:	4798      	blx	r3
 8008cee:	3601      	adds	r6, #1
 8008cf0:	e7ee      	b.n	8008cd0 <__libc_init_array+0xc>
 8008cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cf6:	4798      	blx	r3
 8008cf8:	3601      	adds	r6, #1
 8008cfa:	e7f2      	b.n	8008ce2 <__libc_init_array+0x1e>
 8008cfc:	08008fd4 	.word	0x08008fd4
 8008d00:	08008fd4 	.word	0x08008fd4
 8008d04:	08008fd4 	.word	0x08008fd4
 8008d08:	08008fd8 	.word	0x08008fd8

08008d0c <malloc>:
 8008d0c:	4b02      	ldr	r3, [pc, #8]	; (8008d18 <malloc+0xc>)
 8008d0e:	4601      	mov	r1, r0
 8008d10:	6818      	ldr	r0, [r3, #0]
 8008d12:	f000 b863 	b.w	8008ddc <_malloc_r>
 8008d16:	bf00      	nop
 8008d18:	20000190 	.word	0x20000190

08008d1c <free>:
 8008d1c:	4b02      	ldr	r3, [pc, #8]	; (8008d28 <free+0xc>)
 8008d1e:	4601      	mov	r1, r0
 8008d20:	6818      	ldr	r0, [r3, #0]
 8008d22:	f000 b80b 	b.w	8008d3c <_free_r>
 8008d26:	bf00      	nop
 8008d28:	20000190 	.word	0x20000190

08008d2c <memset>:
 8008d2c:	4402      	add	r2, r0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d100      	bne.n	8008d36 <memset+0xa>
 8008d34:	4770      	bx	lr
 8008d36:	f803 1b01 	strb.w	r1, [r3], #1
 8008d3a:	e7f9      	b.n	8008d30 <memset+0x4>

08008d3c <_free_r>:
 8008d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d3e:	2900      	cmp	r1, #0
 8008d40:	d048      	beq.n	8008dd4 <_free_r+0x98>
 8008d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d46:	9001      	str	r0, [sp, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008d4e:	bfb8      	it	lt
 8008d50:	18e4      	addlt	r4, r4, r3
 8008d52:	f000 f8ad 	bl	8008eb0 <__malloc_lock>
 8008d56:	4a20      	ldr	r2, [pc, #128]	; (8008dd8 <_free_r+0x9c>)
 8008d58:	9801      	ldr	r0, [sp, #4]
 8008d5a:	6813      	ldr	r3, [r2, #0]
 8008d5c:	4615      	mov	r5, r2
 8008d5e:	b933      	cbnz	r3, 8008d6e <_free_r+0x32>
 8008d60:	6063      	str	r3, [r4, #4]
 8008d62:	6014      	str	r4, [r2, #0]
 8008d64:	b003      	add	sp, #12
 8008d66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d6a:	f000 b8a7 	b.w	8008ebc <__malloc_unlock>
 8008d6e:	42a3      	cmp	r3, r4
 8008d70:	d90b      	bls.n	8008d8a <_free_r+0x4e>
 8008d72:	6821      	ldr	r1, [r4, #0]
 8008d74:	1862      	adds	r2, r4, r1
 8008d76:	4293      	cmp	r3, r2
 8008d78:	bf04      	itt	eq
 8008d7a:	681a      	ldreq	r2, [r3, #0]
 8008d7c:	685b      	ldreq	r3, [r3, #4]
 8008d7e:	6063      	str	r3, [r4, #4]
 8008d80:	bf04      	itt	eq
 8008d82:	1852      	addeq	r2, r2, r1
 8008d84:	6022      	streq	r2, [r4, #0]
 8008d86:	602c      	str	r4, [r5, #0]
 8008d88:	e7ec      	b.n	8008d64 <_free_r+0x28>
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	b10b      	cbz	r3, 8008d94 <_free_r+0x58>
 8008d90:	42a3      	cmp	r3, r4
 8008d92:	d9fa      	bls.n	8008d8a <_free_r+0x4e>
 8008d94:	6811      	ldr	r1, [r2, #0]
 8008d96:	1855      	adds	r5, r2, r1
 8008d98:	42a5      	cmp	r5, r4
 8008d9a:	d10b      	bne.n	8008db4 <_free_r+0x78>
 8008d9c:	6824      	ldr	r4, [r4, #0]
 8008d9e:	4421      	add	r1, r4
 8008da0:	1854      	adds	r4, r2, r1
 8008da2:	42a3      	cmp	r3, r4
 8008da4:	6011      	str	r1, [r2, #0]
 8008da6:	d1dd      	bne.n	8008d64 <_free_r+0x28>
 8008da8:	681c      	ldr	r4, [r3, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	6053      	str	r3, [r2, #4]
 8008dae:	4421      	add	r1, r4
 8008db0:	6011      	str	r1, [r2, #0]
 8008db2:	e7d7      	b.n	8008d64 <_free_r+0x28>
 8008db4:	d902      	bls.n	8008dbc <_free_r+0x80>
 8008db6:	230c      	movs	r3, #12
 8008db8:	6003      	str	r3, [r0, #0]
 8008dba:	e7d3      	b.n	8008d64 <_free_r+0x28>
 8008dbc:	6825      	ldr	r5, [r4, #0]
 8008dbe:	1961      	adds	r1, r4, r5
 8008dc0:	428b      	cmp	r3, r1
 8008dc2:	bf04      	itt	eq
 8008dc4:	6819      	ldreq	r1, [r3, #0]
 8008dc6:	685b      	ldreq	r3, [r3, #4]
 8008dc8:	6063      	str	r3, [r4, #4]
 8008dca:	bf04      	itt	eq
 8008dcc:	1949      	addeq	r1, r1, r5
 8008dce:	6021      	streq	r1, [r4, #0]
 8008dd0:	6054      	str	r4, [r2, #4]
 8008dd2:	e7c7      	b.n	8008d64 <_free_r+0x28>
 8008dd4:	b003      	add	sp, #12
 8008dd6:	bd30      	pop	{r4, r5, pc}
 8008dd8:	200003ac 	.word	0x200003ac

08008ddc <_malloc_r>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	1ccd      	adds	r5, r1, #3
 8008de0:	f025 0503 	bic.w	r5, r5, #3
 8008de4:	3508      	adds	r5, #8
 8008de6:	2d0c      	cmp	r5, #12
 8008de8:	bf38      	it	cc
 8008dea:	250c      	movcc	r5, #12
 8008dec:	2d00      	cmp	r5, #0
 8008dee:	4606      	mov	r6, r0
 8008df0:	db01      	blt.n	8008df6 <_malloc_r+0x1a>
 8008df2:	42a9      	cmp	r1, r5
 8008df4:	d903      	bls.n	8008dfe <_malloc_r+0x22>
 8008df6:	230c      	movs	r3, #12
 8008df8:	6033      	str	r3, [r6, #0]
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dfe:	f000 f857 	bl	8008eb0 <__malloc_lock>
 8008e02:	4921      	ldr	r1, [pc, #132]	; (8008e88 <_malloc_r+0xac>)
 8008e04:	680a      	ldr	r2, [r1, #0]
 8008e06:	4614      	mov	r4, r2
 8008e08:	b99c      	cbnz	r4, 8008e32 <_malloc_r+0x56>
 8008e0a:	4f20      	ldr	r7, [pc, #128]	; (8008e8c <_malloc_r+0xb0>)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	b923      	cbnz	r3, 8008e1a <_malloc_r+0x3e>
 8008e10:	4621      	mov	r1, r4
 8008e12:	4630      	mov	r0, r6
 8008e14:	f000 f83c 	bl	8008e90 <_sbrk_r>
 8008e18:	6038      	str	r0, [r7, #0]
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f000 f837 	bl	8008e90 <_sbrk_r>
 8008e22:	1c43      	adds	r3, r0, #1
 8008e24:	d123      	bne.n	8008e6e <_malloc_r+0x92>
 8008e26:	230c      	movs	r3, #12
 8008e28:	6033      	str	r3, [r6, #0]
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f000 f846 	bl	8008ebc <__malloc_unlock>
 8008e30:	e7e3      	b.n	8008dfa <_malloc_r+0x1e>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	1b5b      	subs	r3, r3, r5
 8008e36:	d417      	bmi.n	8008e68 <_malloc_r+0x8c>
 8008e38:	2b0b      	cmp	r3, #11
 8008e3a:	d903      	bls.n	8008e44 <_malloc_r+0x68>
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	441c      	add	r4, r3
 8008e40:	6025      	str	r5, [r4, #0]
 8008e42:	e004      	b.n	8008e4e <_malloc_r+0x72>
 8008e44:	6863      	ldr	r3, [r4, #4]
 8008e46:	42a2      	cmp	r2, r4
 8008e48:	bf0c      	ite	eq
 8008e4a:	600b      	streq	r3, [r1, #0]
 8008e4c:	6053      	strne	r3, [r2, #4]
 8008e4e:	4630      	mov	r0, r6
 8008e50:	f000 f834 	bl	8008ebc <__malloc_unlock>
 8008e54:	f104 000b 	add.w	r0, r4, #11
 8008e58:	1d23      	adds	r3, r4, #4
 8008e5a:	f020 0007 	bic.w	r0, r0, #7
 8008e5e:	1ac2      	subs	r2, r0, r3
 8008e60:	d0cc      	beq.n	8008dfc <_malloc_r+0x20>
 8008e62:	1a1b      	subs	r3, r3, r0
 8008e64:	50a3      	str	r3, [r4, r2]
 8008e66:	e7c9      	b.n	8008dfc <_malloc_r+0x20>
 8008e68:	4622      	mov	r2, r4
 8008e6a:	6864      	ldr	r4, [r4, #4]
 8008e6c:	e7cc      	b.n	8008e08 <_malloc_r+0x2c>
 8008e6e:	1cc4      	adds	r4, r0, #3
 8008e70:	f024 0403 	bic.w	r4, r4, #3
 8008e74:	42a0      	cmp	r0, r4
 8008e76:	d0e3      	beq.n	8008e40 <_malloc_r+0x64>
 8008e78:	1a21      	subs	r1, r4, r0
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	f000 f808 	bl	8008e90 <_sbrk_r>
 8008e80:	3001      	adds	r0, #1
 8008e82:	d1dd      	bne.n	8008e40 <_malloc_r+0x64>
 8008e84:	e7cf      	b.n	8008e26 <_malloc_r+0x4a>
 8008e86:	bf00      	nop
 8008e88:	200003ac 	.word	0x200003ac
 8008e8c:	200003b0 	.word	0x200003b0

08008e90 <_sbrk_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	4d06      	ldr	r5, [pc, #24]	; (8008eac <_sbrk_r+0x1c>)
 8008e94:	2300      	movs	r3, #0
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	602b      	str	r3, [r5, #0]
 8008e9c:	f7f8 fb6a 	bl	8001574 <_sbrk>
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	d102      	bne.n	8008eaa <_sbrk_r+0x1a>
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	b103      	cbz	r3, 8008eaa <_sbrk_r+0x1a>
 8008ea8:	6023      	str	r3, [r4, #0]
 8008eaa:	bd38      	pop	{r3, r4, r5, pc}
 8008eac:	20001dd4 	.word	0x20001dd4

08008eb0 <__malloc_lock>:
 8008eb0:	4801      	ldr	r0, [pc, #4]	; (8008eb8 <__malloc_lock+0x8>)
 8008eb2:	f000 b809 	b.w	8008ec8 <__retarget_lock_acquire_recursive>
 8008eb6:	bf00      	nop
 8008eb8:	20001ddc 	.word	0x20001ddc

08008ebc <__malloc_unlock>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	; (8008ec4 <__malloc_unlock+0x8>)
 8008ebe:	f000 b804 	b.w	8008eca <__retarget_lock_release_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	20001ddc 	.word	0x20001ddc

08008ec8 <__retarget_lock_acquire_recursive>:
 8008ec8:	4770      	bx	lr

08008eca <__retarget_lock_release_recursive>:
 8008eca:	4770      	bx	lr

08008ecc <_init>:
 8008ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ece:	bf00      	nop
 8008ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ed2:	bc08      	pop	{r3}
 8008ed4:	469e      	mov	lr, r3
 8008ed6:	4770      	bx	lr

08008ed8 <_fini>:
 8008ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eda:	bf00      	nop
 8008edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ede:	bc08      	pop	{r3}
 8008ee0:	469e      	mov	lr, r3
 8008ee2:	4770      	bx	lr
